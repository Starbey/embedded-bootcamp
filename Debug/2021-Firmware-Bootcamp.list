
2021-Firmware-Bootcamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005294  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005354  08005354  00006354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800540c  0800540c  0000640c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005410  08005410  00006410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08005414  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000154  2000000c  08005420  0000700c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000160  08005420  00007160  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e27f  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000020f0  00000000  00000000  000152b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000db0  00000000  00000000  000173a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000ac2  00000000  00000000  00018158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00019d6a  00000000  00000000  00018c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00011b60  00000000  00000000  00032984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0009719c  00000000  00000000  000444e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  000db680  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003308  00000000  00000000  000db6c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000072  00000000  00000000  000de9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800533c 	.word	0x0800533c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800533c 	.word	0x0800533c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	@ (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f001 fbf9 	bl	8001a20 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f001 fb3b 	bl	80018b0 <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	@ (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 ff98 	bl	8001178 <__aeabi_dsub>
 8000248:	f001 fb32 	bl	80018b0 <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	@ 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_fdiv>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	464f      	mov	r7, r9
 8000260:	4646      	mov	r6, r8
 8000262:	46d6      	mov	lr, sl
 8000264:	0244      	lsls	r4, r0, #9
 8000266:	b5c0      	push	{r6, r7, lr}
 8000268:	0047      	lsls	r7, r0, #1
 800026a:	1c0e      	adds	r6, r1, #0
 800026c:	0a64      	lsrs	r4, r4, #9
 800026e:	0e3f      	lsrs	r7, r7, #24
 8000270:	0fc5      	lsrs	r5, r0, #31
 8000272:	2f00      	cmp	r7, #0
 8000274:	d03c      	beq.n	80002f0 <__aeabi_fdiv+0x94>
 8000276:	2fff      	cmp	r7, #255	@ 0xff
 8000278:	d042      	beq.n	8000300 <__aeabi_fdiv+0xa4>
 800027a:	2300      	movs	r3, #0
 800027c:	2280      	movs	r2, #128	@ 0x80
 800027e:	4699      	mov	r9, r3
 8000280:	469a      	mov	sl, r3
 8000282:	00e4      	lsls	r4, r4, #3
 8000284:	04d2      	lsls	r2, r2, #19
 8000286:	4314      	orrs	r4, r2
 8000288:	3f7f      	subs	r7, #127	@ 0x7f
 800028a:	0273      	lsls	r3, r6, #9
 800028c:	0a5b      	lsrs	r3, r3, #9
 800028e:	4698      	mov	r8, r3
 8000290:	0073      	lsls	r3, r6, #1
 8000292:	0e1b      	lsrs	r3, r3, #24
 8000294:	0ff6      	lsrs	r6, r6, #31
 8000296:	2b00      	cmp	r3, #0
 8000298:	d01b      	beq.n	80002d2 <__aeabi_fdiv+0x76>
 800029a:	2bff      	cmp	r3, #255	@ 0xff
 800029c:	d013      	beq.n	80002c6 <__aeabi_fdiv+0x6a>
 800029e:	4642      	mov	r2, r8
 80002a0:	2180      	movs	r1, #128	@ 0x80
 80002a2:	00d2      	lsls	r2, r2, #3
 80002a4:	04c9      	lsls	r1, r1, #19
 80002a6:	4311      	orrs	r1, r2
 80002a8:	4688      	mov	r8, r1
 80002aa:	2000      	movs	r0, #0
 80002ac:	3b7f      	subs	r3, #127	@ 0x7f
 80002ae:	0029      	movs	r1, r5
 80002b0:	1aff      	subs	r7, r7, r3
 80002b2:	464b      	mov	r3, r9
 80002b4:	4071      	eors	r1, r6
 80002b6:	b2c9      	uxtb	r1, r1
 80002b8:	2b0f      	cmp	r3, #15
 80002ba:	d900      	bls.n	80002be <__aeabi_fdiv+0x62>
 80002bc:	e0b5      	b.n	800042a <__aeabi_fdiv+0x1ce>
 80002be:	4a74      	ldr	r2, [pc, #464]	@ (8000490 <__aeabi_fdiv+0x234>)
 80002c0:	009b      	lsls	r3, r3, #2
 80002c2:	58d3      	ldr	r3, [r2, r3]
 80002c4:	469f      	mov	pc, r3
 80002c6:	4643      	mov	r3, r8
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d13f      	bne.n	800034c <__aeabi_fdiv+0xf0>
 80002cc:	3fff      	subs	r7, #255	@ 0xff
 80002ce:	3302      	adds	r3, #2
 80002d0:	e003      	b.n	80002da <__aeabi_fdiv+0x7e>
 80002d2:	4643      	mov	r3, r8
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d12d      	bne.n	8000334 <__aeabi_fdiv+0xd8>
 80002d8:	2301      	movs	r3, #1
 80002da:	0029      	movs	r1, r5
 80002dc:	464a      	mov	r2, r9
 80002de:	4071      	eors	r1, r6
 80002e0:	b2c9      	uxtb	r1, r1
 80002e2:	431a      	orrs	r2, r3
 80002e4:	2a0e      	cmp	r2, #14
 80002e6:	d838      	bhi.n	800035a <__aeabi_fdiv+0xfe>
 80002e8:	486a      	ldr	r0, [pc, #424]	@ (8000494 <__aeabi_fdiv+0x238>)
 80002ea:	0092      	lsls	r2, r2, #2
 80002ec:	5882      	ldr	r2, [r0, r2]
 80002ee:	4697      	mov	pc, r2
 80002f0:	2c00      	cmp	r4, #0
 80002f2:	d113      	bne.n	800031c <__aeabi_fdiv+0xc0>
 80002f4:	2304      	movs	r3, #4
 80002f6:	4699      	mov	r9, r3
 80002f8:	3b03      	subs	r3, #3
 80002fa:	2700      	movs	r7, #0
 80002fc:	469a      	mov	sl, r3
 80002fe:	e7c4      	b.n	800028a <__aeabi_fdiv+0x2e>
 8000300:	2c00      	cmp	r4, #0
 8000302:	d105      	bne.n	8000310 <__aeabi_fdiv+0xb4>
 8000304:	2308      	movs	r3, #8
 8000306:	4699      	mov	r9, r3
 8000308:	3b06      	subs	r3, #6
 800030a:	27ff      	movs	r7, #255	@ 0xff
 800030c:	469a      	mov	sl, r3
 800030e:	e7bc      	b.n	800028a <__aeabi_fdiv+0x2e>
 8000310:	230c      	movs	r3, #12
 8000312:	4699      	mov	r9, r3
 8000314:	3b09      	subs	r3, #9
 8000316:	27ff      	movs	r7, #255	@ 0xff
 8000318:	469a      	mov	sl, r3
 800031a:	e7b6      	b.n	800028a <__aeabi_fdiv+0x2e>
 800031c:	0020      	movs	r0, r4
 800031e:	f001 fb89 	bl	8001a34 <__clzsi2>
 8000322:	2776      	movs	r7, #118	@ 0x76
 8000324:	1f43      	subs	r3, r0, #5
 8000326:	409c      	lsls	r4, r3
 8000328:	2300      	movs	r3, #0
 800032a:	427f      	negs	r7, r7
 800032c:	4699      	mov	r9, r3
 800032e:	469a      	mov	sl, r3
 8000330:	1a3f      	subs	r7, r7, r0
 8000332:	e7aa      	b.n	800028a <__aeabi_fdiv+0x2e>
 8000334:	4640      	mov	r0, r8
 8000336:	f001 fb7d 	bl	8001a34 <__clzsi2>
 800033a:	4642      	mov	r2, r8
 800033c:	1f43      	subs	r3, r0, #5
 800033e:	409a      	lsls	r2, r3
 8000340:	2376      	movs	r3, #118	@ 0x76
 8000342:	425b      	negs	r3, r3
 8000344:	1a1b      	subs	r3, r3, r0
 8000346:	4690      	mov	r8, r2
 8000348:	2000      	movs	r0, #0
 800034a:	e7b0      	b.n	80002ae <__aeabi_fdiv+0x52>
 800034c:	2303      	movs	r3, #3
 800034e:	464a      	mov	r2, r9
 8000350:	431a      	orrs	r2, r3
 8000352:	4691      	mov	r9, r2
 8000354:	2003      	movs	r0, #3
 8000356:	33fc      	adds	r3, #252	@ 0xfc
 8000358:	e7a9      	b.n	80002ae <__aeabi_fdiv+0x52>
 800035a:	000d      	movs	r5, r1
 800035c:	20ff      	movs	r0, #255	@ 0xff
 800035e:	2200      	movs	r2, #0
 8000360:	05c0      	lsls	r0, r0, #23
 8000362:	07ed      	lsls	r5, r5, #31
 8000364:	4310      	orrs	r0, r2
 8000366:	4328      	orrs	r0, r5
 8000368:	bce0      	pop	{r5, r6, r7}
 800036a:	46ba      	mov	sl, r7
 800036c:	46b1      	mov	r9, r6
 800036e:	46a8      	mov	r8, r5
 8000370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000372:	000d      	movs	r5, r1
 8000374:	2000      	movs	r0, #0
 8000376:	2200      	movs	r2, #0
 8000378:	e7f2      	b.n	8000360 <__aeabi_fdiv+0x104>
 800037a:	4653      	mov	r3, sl
 800037c:	2b02      	cmp	r3, #2
 800037e:	d0ed      	beq.n	800035c <__aeabi_fdiv+0x100>
 8000380:	2b03      	cmp	r3, #3
 8000382:	d033      	beq.n	80003ec <__aeabi_fdiv+0x190>
 8000384:	46a0      	mov	r8, r4
 8000386:	2b01      	cmp	r3, #1
 8000388:	d105      	bne.n	8000396 <__aeabi_fdiv+0x13a>
 800038a:	2000      	movs	r0, #0
 800038c:	2200      	movs	r2, #0
 800038e:	e7e7      	b.n	8000360 <__aeabi_fdiv+0x104>
 8000390:	0035      	movs	r5, r6
 8000392:	2803      	cmp	r0, #3
 8000394:	d07a      	beq.n	800048c <__aeabi_fdiv+0x230>
 8000396:	003b      	movs	r3, r7
 8000398:	337f      	adds	r3, #127	@ 0x7f
 800039a:	2b00      	cmp	r3, #0
 800039c:	dd2d      	ble.n	80003fa <__aeabi_fdiv+0x19e>
 800039e:	4642      	mov	r2, r8
 80003a0:	0752      	lsls	r2, r2, #29
 80003a2:	d007      	beq.n	80003b4 <__aeabi_fdiv+0x158>
 80003a4:	220f      	movs	r2, #15
 80003a6:	4641      	mov	r1, r8
 80003a8:	400a      	ands	r2, r1
 80003aa:	2a04      	cmp	r2, #4
 80003ac:	d002      	beq.n	80003b4 <__aeabi_fdiv+0x158>
 80003ae:	2204      	movs	r2, #4
 80003b0:	4694      	mov	ip, r2
 80003b2:	44e0      	add	r8, ip
 80003b4:	4642      	mov	r2, r8
 80003b6:	0112      	lsls	r2, r2, #4
 80003b8:	d505      	bpl.n	80003c6 <__aeabi_fdiv+0x16a>
 80003ba:	4642      	mov	r2, r8
 80003bc:	4b36      	ldr	r3, [pc, #216]	@ (8000498 <__aeabi_fdiv+0x23c>)
 80003be:	401a      	ands	r2, r3
 80003c0:	003b      	movs	r3, r7
 80003c2:	4690      	mov	r8, r2
 80003c4:	3380      	adds	r3, #128	@ 0x80
 80003c6:	2bfe      	cmp	r3, #254	@ 0xfe
 80003c8:	dcc8      	bgt.n	800035c <__aeabi_fdiv+0x100>
 80003ca:	4642      	mov	r2, r8
 80003cc:	0192      	lsls	r2, r2, #6
 80003ce:	0a52      	lsrs	r2, r2, #9
 80003d0:	b2d8      	uxtb	r0, r3
 80003d2:	e7c5      	b.n	8000360 <__aeabi_fdiv+0x104>
 80003d4:	2280      	movs	r2, #128	@ 0x80
 80003d6:	2500      	movs	r5, #0
 80003d8:	20ff      	movs	r0, #255	@ 0xff
 80003da:	03d2      	lsls	r2, r2, #15
 80003dc:	e7c0      	b.n	8000360 <__aeabi_fdiv+0x104>
 80003de:	2280      	movs	r2, #128	@ 0x80
 80003e0:	03d2      	lsls	r2, r2, #15
 80003e2:	4214      	tst	r4, r2
 80003e4:	d002      	beq.n	80003ec <__aeabi_fdiv+0x190>
 80003e6:	4643      	mov	r3, r8
 80003e8:	4213      	tst	r3, r2
 80003ea:	d049      	beq.n	8000480 <__aeabi_fdiv+0x224>
 80003ec:	2280      	movs	r2, #128	@ 0x80
 80003ee:	03d2      	lsls	r2, r2, #15
 80003f0:	4322      	orrs	r2, r4
 80003f2:	0252      	lsls	r2, r2, #9
 80003f4:	20ff      	movs	r0, #255	@ 0xff
 80003f6:	0a52      	lsrs	r2, r2, #9
 80003f8:	e7b2      	b.n	8000360 <__aeabi_fdiv+0x104>
 80003fa:	2201      	movs	r2, #1
 80003fc:	1ad3      	subs	r3, r2, r3
 80003fe:	2b1b      	cmp	r3, #27
 8000400:	dcc3      	bgt.n	800038a <__aeabi_fdiv+0x12e>
 8000402:	4642      	mov	r2, r8
 8000404:	40da      	lsrs	r2, r3
 8000406:	4643      	mov	r3, r8
 8000408:	379e      	adds	r7, #158	@ 0x9e
 800040a:	40bb      	lsls	r3, r7
 800040c:	1e59      	subs	r1, r3, #1
 800040e:	418b      	sbcs	r3, r1
 8000410:	431a      	orrs	r2, r3
 8000412:	0753      	lsls	r3, r2, #29
 8000414:	d004      	beq.n	8000420 <__aeabi_fdiv+0x1c4>
 8000416:	230f      	movs	r3, #15
 8000418:	4013      	ands	r3, r2
 800041a:	2b04      	cmp	r3, #4
 800041c:	d000      	beq.n	8000420 <__aeabi_fdiv+0x1c4>
 800041e:	3204      	adds	r2, #4
 8000420:	0153      	lsls	r3, r2, #5
 8000422:	d529      	bpl.n	8000478 <__aeabi_fdiv+0x21c>
 8000424:	2001      	movs	r0, #1
 8000426:	2200      	movs	r2, #0
 8000428:	e79a      	b.n	8000360 <__aeabi_fdiv+0x104>
 800042a:	4642      	mov	r2, r8
 800042c:	0163      	lsls	r3, r4, #5
 800042e:	0155      	lsls	r5, r2, #5
 8000430:	42ab      	cmp	r3, r5
 8000432:	d215      	bcs.n	8000460 <__aeabi_fdiv+0x204>
 8000434:	201b      	movs	r0, #27
 8000436:	2200      	movs	r2, #0
 8000438:	3f01      	subs	r7, #1
 800043a:	2601      	movs	r6, #1
 800043c:	001c      	movs	r4, r3
 800043e:	0052      	lsls	r2, r2, #1
 8000440:	005b      	lsls	r3, r3, #1
 8000442:	2c00      	cmp	r4, #0
 8000444:	db01      	blt.n	800044a <__aeabi_fdiv+0x1ee>
 8000446:	429d      	cmp	r5, r3
 8000448:	d801      	bhi.n	800044e <__aeabi_fdiv+0x1f2>
 800044a:	1b5b      	subs	r3, r3, r5
 800044c:	4332      	orrs	r2, r6
 800044e:	3801      	subs	r0, #1
 8000450:	2800      	cmp	r0, #0
 8000452:	d1f3      	bne.n	800043c <__aeabi_fdiv+0x1e0>
 8000454:	1e58      	subs	r0, r3, #1
 8000456:	4183      	sbcs	r3, r0
 8000458:	4313      	orrs	r3, r2
 800045a:	4698      	mov	r8, r3
 800045c:	000d      	movs	r5, r1
 800045e:	e79a      	b.n	8000396 <__aeabi_fdiv+0x13a>
 8000460:	201a      	movs	r0, #26
 8000462:	2201      	movs	r2, #1
 8000464:	1b5b      	subs	r3, r3, r5
 8000466:	e7e8      	b.n	800043a <__aeabi_fdiv+0x1de>
 8000468:	3b02      	subs	r3, #2
 800046a:	425a      	negs	r2, r3
 800046c:	4153      	adcs	r3, r2
 800046e:	425b      	negs	r3, r3
 8000470:	0035      	movs	r5, r6
 8000472:	2200      	movs	r2, #0
 8000474:	b2d8      	uxtb	r0, r3
 8000476:	e773      	b.n	8000360 <__aeabi_fdiv+0x104>
 8000478:	0192      	lsls	r2, r2, #6
 800047a:	2000      	movs	r0, #0
 800047c:	0a52      	lsrs	r2, r2, #9
 800047e:	e76f      	b.n	8000360 <__aeabi_fdiv+0x104>
 8000480:	431a      	orrs	r2, r3
 8000482:	0252      	lsls	r2, r2, #9
 8000484:	0035      	movs	r5, r6
 8000486:	20ff      	movs	r0, #255	@ 0xff
 8000488:	0a52      	lsrs	r2, r2, #9
 800048a:	e769      	b.n	8000360 <__aeabi_fdiv+0x104>
 800048c:	4644      	mov	r4, r8
 800048e:	e7ad      	b.n	80003ec <__aeabi_fdiv+0x190>
 8000490:	08005358 	.word	0x08005358
 8000494:	08005398 	.word	0x08005398
 8000498:	f7ffffff 	.word	0xf7ffffff

0800049c <__aeabi_ui2f>:
 800049c:	b570      	push	{r4, r5, r6, lr}
 800049e:	1e04      	subs	r4, r0, #0
 80004a0:	d00e      	beq.n	80004c0 <__aeabi_ui2f+0x24>
 80004a2:	f001 fac7 	bl	8001a34 <__clzsi2>
 80004a6:	239e      	movs	r3, #158	@ 0x9e
 80004a8:	0001      	movs	r1, r0
 80004aa:	1a1b      	subs	r3, r3, r0
 80004ac:	2b96      	cmp	r3, #150	@ 0x96
 80004ae:	dc0c      	bgt.n	80004ca <__aeabi_ui2f+0x2e>
 80004b0:	2808      	cmp	r0, #8
 80004b2:	d02f      	beq.n	8000514 <__aeabi_ui2f+0x78>
 80004b4:	3908      	subs	r1, #8
 80004b6:	408c      	lsls	r4, r1
 80004b8:	0264      	lsls	r4, r4, #9
 80004ba:	0a64      	lsrs	r4, r4, #9
 80004bc:	b2d8      	uxtb	r0, r3
 80004be:	e001      	b.n	80004c4 <__aeabi_ui2f+0x28>
 80004c0:	2000      	movs	r0, #0
 80004c2:	2400      	movs	r4, #0
 80004c4:	05c0      	lsls	r0, r0, #23
 80004c6:	4320      	orrs	r0, r4
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	2b99      	cmp	r3, #153	@ 0x99
 80004cc:	dc16      	bgt.n	80004fc <__aeabi_ui2f+0x60>
 80004ce:	1f42      	subs	r2, r0, #5
 80004d0:	2805      	cmp	r0, #5
 80004d2:	d000      	beq.n	80004d6 <__aeabi_ui2f+0x3a>
 80004d4:	4094      	lsls	r4, r2
 80004d6:	0022      	movs	r2, r4
 80004d8:	4810      	ldr	r0, [pc, #64]	@ (800051c <__aeabi_ui2f+0x80>)
 80004da:	4002      	ands	r2, r0
 80004dc:	0765      	lsls	r5, r4, #29
 80004de:	d009      	beq.n	80004f4 <__aeabi_ui2f+0x58>
 80004e0:	250f      	movs	r5, #15
 80004e2:	402c      	ands	r4, r5
 80004e4:	2c04      	cmp	r4, #4
 80004e6:	d005      	beq.n	80004f4 <__aeabi_ui2f+0x58>
 80004e8:	3204      	adds	r2, #4
 80004ea:	0154      	lsls	r4, r2, #5
 80004ec:	d502      	bpl.n	80004f4 <__aeabi_ui2f+0x58>
 80004ee:	239f      	movs	r3, #159	@ 0x9f
 80004f0:	4002      	ands	r2, r0
 80004f2:	1a5b      	subs	r3, r3, r1
 80004f4:	0192      	lsls	r2, r2, #6
 80004f6:	0a54      	lsrs	r4, r2, #9
 80004f8:	b2d8      	uxtb	r0, r3
 80004fa:	e7e3      	b.n	80004c4 <__aeabi_ui2f+0x28>
 80004fc:	0002      	movs	r2, r0
 80004fe:	0020      	movs	r0, r4
 8000500:	321b      	adds	r2, #27
 8000502:	4090      	lsls	r0, r2
 8000504:	0002      	movs	r2, r0
 8000506:	1e50      	subs	r0, r2, #1
 8000508:	4182      	sbcs	r2, r0
 800050a:	2005      	movs	r0, #5
 800050c:	1a40      	subs	r0, r0, r1
 800050e:	40c4      	lsrs	r4, r0
 8000510:	4314      	orrs	r4, r2
 8000512:	e7e0      	b.n	80004d6 <__aeabi_ui2f+0x3a>
 8000514:	0264      	lsls	r4, r4, #9
 8000516:	2096      	movs	r0, #150	@ 0x96
 8000518:	0a64      	lsrs	r4, r4, #9
 800051a:	e7d3      	b.n	80004c4 <__aeabi_ui2f+0x28>
 800051c:	fbffffff 	.word	0xfbffffff

08000520 <__aeabi_dadd>:
 8000520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000522:	4657      	mov	r7, sl
 8000524:	464e      	mov	r6, r9
 8000526:	4645      	mov	r5, r8
 8000528:	46de      	mov	lr, fp
 800052a:	b5e0      	push	{r5, r6, r7, lr}
 800052c:	b083      	sub	sp, #12
 800052e:	9000      	str	r0, [sp, #0]
 8000530:	9101      	str	r1, [sp, #4]
 8000532:	030c      	lsls	r4, r1, #12
 8000534:	004f      	lsls	r7, r1, #1
 8000536:	0fce      	lsrs	r6, r1, #31
 8000538:	0a61      	lsrs	r1, r4, #9
 800053a:	9c00      	ldr	r4, [sp, #0]
 800053c:	031d      	lsls	r5, r3, #12
 800053e:	0f64      	lsrs	r4, r4, #29
 8000540:	430c      	orrs	r4, r1
 8000542:	9900      	ldr	r1, [sp, #0]
 8000544:	9200      	str	r2, [sp, #0]
 8000546:	9301      	str	r3, [sp, #4]
 8000548:	00c8      	lsls	r0, r1, #3
 800054a:	0059      	lsls	r1, r3, #1
 800054c:	0d4b      	lsrs	r3, r1, #21
 800054e:	4699      	mov	r9, r3
 8000550:	9a00      	ldr	r2, [sp, #0]
 8000552:	9b01      	ldr	r3, [sp, #4]
 8000554:	0a6d      	lsrs	r5, r5, #9
 8000556:	0fd9      	lsrs	r1, r3, #31
 8000558:	0f53      	lsrs	r3, r2, #29
 800055a:	432b      	orrs	r3, r5
 800055c:	469a      	mov	sl, r3
 800055e:	9b00      	ldr	r3, [sp, #0]
 8000560:	0d7f      	lsrs	r7, r7, #21
 8000562:	00da      	lsls	r2, r3, #3
 8000564:	4694      	mov	ip, r2
 8000566:	464a      	mov	r2, r9
 8000568:	46b0      	mov	r8, r6
 800056a:	1aba      	subs	r2, r7, r2
 800056c:	428e      	cmp	r6, r1
 800056e:	d100      	bne.n	8000572 <__aeabi_dadd+0x52>
 8000570:	e0b0      	b.n	80006d4 <__aeabi_dadd+0x1b4>
 8000572:	2a00      	cmp	r2, #0
 8000574:	dc00      	bgt.n	8000578 <__aeabi_dadd+0x58>
 8000576:	e078      	b.n	800066a <__aeabi_dadd+0x14a>
 8000578:	4649      	mov	r1, r9
 800057a:	2900      	cmp	r1, #0
 800057c:	d100      	bne.n	8000580 <__aeabi_dadd+0x60>
 800057e:	e0e9      	b.n	8000754 <__aeabi_dadd+0x234>
 8000580:	49c9      	ldr	r1, [pc, #804]	@ (80008a8 <__aeabi_dadd+0x388>)
 8000582:	428f      	cmp	r7, r1
 8000584:	d100      	bne.n	8000588 <__aeabi_dadd+0x68>
 8000586:	e195      	b.n	80008b4 <__aeabi_dadd+0x394>
 8000588:	2501      	movs	r5, #1
 800058a:	2a38      	cmp	r2, #56	@ 0x38
 800058c:	dc16      	bgt.n	80005bc <__aeabi_dadd+0x9c>
 800058e:	2180      	movs	r1, #128	@ 0x80
 8000590:	4653      	mov	r3, sl
 8000592:	0409      	lsls	r1, r1, #16
 8000594:	430b      	orrs	r3, r1
 8000596:	469a      	mov	sl, r3
 8000598:	2a1f      	cmp	r2, #31
 800059a:	dd00      	ble.n	800059e <__aeabi_dadd+0x7e>
 800059c:	e1e7      	b.n	800096e <__aeabi_dadd+0x44e>
 800059e:	2120      	movs	r1, #32
 80005a0:	4655      	mov	r5, sl
 80005a2:	1a8b      	subs	r3, r1, r2
 80005a4:	4661      	mov	r1, ip
 80005a6:	409d      	lsls	r5, r3
 80005a8:	40d1      	lsrs	r1, r2
 80005aa:	430d      	orrs	r5, r1
 80005ac:	4661      	mov	r1, ip
 80005ae:	4099      	lsls	r1, r3
 80005b0:	1e4b      	subs	r3, r1, #1
 80005b2:	4199      	sbcs	r1, r3
 80005b4:	4653      	mov	r3, sl
 80005b6:	40d3      	lsrs	r3, r2
 80005b8:	430d      	orrs	r5, r1
 80005ba:	1ae4      	subs	r4, r4, r3
 80005bc:	1b45      	subs	r5, r0, r5
 80005be:	42a8      	cmp	r0, r5
 80005c0:	4180      	sbcs	r0, r0
 80005c2:	4240      	negs	r0, r0
 80005c4:	1a24      	subs	r4, r4, r0
 80005c6:	0223      	lsls	r3, r4, #8
 80005c8:	d400      	bmi.n	80005cc <__aeabi_dadd+0xac>
 80005ca:	e10f      	b.n	80007ec <__aeabi_dadd+0x2cc>
 80005cc:	0264      	lsls	r4, r4, #9
 80005ce:	0a64      	lsrs	r4, r4, #9
 80005d0:	2c00      	cmp	r4, #0
 80005d2:	d100      	bne.n	80005d6 <__aeabi_dadd+0xb6>
 80005d4:	e139      	b.n	800084a <__aeabi_dadd+0x32a>
 80005d6:	0020      	movs	r0, r4
 80005d8:	f001 fa2c 	bl	8001a34 <__clzsi2>
 80005dc:	0003      	movs	r3, r0
 80005de:	3b08      	subs	r3, #8
 80005e0:	2120      	movs	r1, #32
 80005e2:	0028      	movs	r0, r5
 80005e4:	1aca      	subs	r2, r1, r3
 80005e6:	40d0      	lsrs	r0, r2
 80005e8:	409c      	lsls	r4, r3
 80005ea:	0002      	movs	r2, r0
 80005ec:	409d      	lsls	r5, r3
 80005ee:	4322      	orrs	r2, r4
 80005f0:	429f      	cmp	r7, r3
 80005f2:	dd00      	ble.n	80005f6 <__aeabi_dadd+0xd6>
 80005f4:	e173      	b.n	80008de <__aeabi_dadd+0x3be>
 80005f6:	1bd8      	subs	r0, r3, r7
 80005f8:	3001      	adds	r0, #1
 80005fa:	1a09      	subs	r1, r1, r0
 80005fc:	002c      	movs	r4, r5
 80005fe:	408d      	lsls	r5, r1
 8000600:	40c4      	lsrs	r4, r0
 8000602:	1e6b      	subs	r3, r5, #1
 8000604:	419d      	sbcs	r5, r3
 8000606:	0013      	movs	r3, r2
 8000608:	40c2      	lsrs	r2, r0
 800060a:	408b      	lsls	r3, r1
 800060c:	4325      	orrs	r5, r4
 800060e:	2700      	movs	r7, #0
 8000610:	0014      	movs	r4, r2
 8000612:	431d      	orrs	r5, r3
 8000614:	076b      	lsls	r3, r5, #29
 8000616:	d009      	beq.n	800062c <__aeabi_dadd+0x10c>
 8000618:	230f      	movs	r3, #15
 800061a:	402b      	ands	r3, r5
 800061c:	2b04      	cmp	r3, #4
 800061e:	d005      	beq.n	800062c <__aeabi_dadd+0x10c>
 8000620:	1d2b      	adds	r3, r5, #4
 8000622:	42ab      	cmp	r3, r5
 8000624:	41ad      	sbcs	r5, r5
 8000626:	426d      	negs	r5, r5
 8000628:	1964      	adds	r4, r4, r5
 800062a:	001d      	movs	r5, r3
 800062c:	0223      	lsls	r3, r4, #8
 800062e:	d400      	bmi.n	8000632 <__aeabi_dadd+0x112>
 8000630:	e12d      	b.n	800088e <__aeabi_dadd+0x36e>
 8000632:	4a9d      	ldr	r2, [pc, #628]	@ (80008a8 <__aeabi_dadd+0x388>)
 8000634:	3701      	adds	r7, #1
 8000636:	4297      	cmp	r7, r2
 8000638:	d100      	bne.n	800063c <__aeabi_dadd+0x11c>
 800063a:	e0d3      	b.n	80007e4 <__aeabi_dadd+0x2c4>
 800063c:	4646      	mov	r6, r8
 800063e:	499b      	ldr	r1, [pc, #620]	@ (80008ac <__aeabi_dadd+0x38c>)
 8000640:	08ed      	lsrs	r5, r5, #3
 8000642:	4021      	ands	r1, r4
 8000644:	074a      	lsls	r2, r1, #29
 8000646:	432a      	orrs	r2, r5
 8000648:	057c      	lsls	r4, r7, #21
 800064a:	024d      	lsls	r5, r1, #9
 800064c:	0b2d      	lsrs	r5, r5, #12
 800064e:	0d64      	lsrs	r4, r4, #21
 8000650:	0524      	lsls	r4, r4, #20
 8000652:	432c      	orrs	r4, r5
 8000654:	07f6      	lsls	r6, r6, #31
 8000656:	4334      	orrs	r4, r6
 8000658:	0010      	movs	r0, r2
 800065a:	0021      	movs	r1, r4
 800065c:	b003      	add	sp, #12
 800065e:	bcf0      	pop	{r4, r5, r6, r7}
 8000660:	46bb      	mov	fp, r7
 8000662:	46b2      	mov	sl, r6
 8000664:	46a9      	mov	r9, r5
 8000666:	46a0      	mov	r8, r4
 8000668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800066a:	2a00      	cmp	r2, #0
 800066c:	d100      	bne.n	8000670 <__aeabi_dadd+0x150>
 800066e:	e084      	b.n	800077a <__aeabi_dadd+0x25a>
 8000670:	464a      	mov	r2, r9
 8000672:	1bd2      	subs	r2, r2, r7
 8000674:	2f00      	cmp	r7, #0
 8000676:	d000      	beq.n	800067a <__aeabi_dadd+0x15a>
 8000678:	e16d      	b.n	8000956 <__aeabi_dadd+0x436>
 800067a:	0025      	movs	r5, r4
 800067c:	4305      	orrs	r5, r0
 800067e:	d100      	bne.n	8000682 <__aeabi_dadd+0x162>
 8000680:	e127      	b.n	80008d2 <__aeabi_dadd+0x3b2>
 8000682:	1e56      	subs	r6, r2, #1
 8000684:	2a01      	cmp	r2, #1
 8000686:	d100      	bne.n	800068a <__aeabi_dadd+0x16a>
 8000688:	e23b      	b.n	8000b02 <__aeabi_dadd+0x5e2>
 800068a:	4d87      	ldr	r5, [pc, #540]	@ (80008a8 <__aeabi_dadd+0x388>)
 800068c:	42aa      	cmp	r2, r5
 800068e:	d100      	bne.n	8000692 <__aeabi_dadd+0x172>
 8000690:	e26a      	b.n	8000b68 <__aeabi_dadd+0x648>
 8000692:	2501      	movs	r5, #1
 8000694:	2e38      	cmp	r6, #56	@ 0x38
 8000696:	dc12      	bgt.n	80006be <__aeabi_dadd+0x19e>
 8000698:	0032      	movs	r2, r6
 800069a:	2a1f      	cmp	r2, #31
 800069c:	dd00      	ble.n	80006a0 <__aeabi_dadd+0x180>
 800069e:	e1f8      	b.n	8000a92 <__aeabi_dadd+0x572>
 80006a0:	2620      	movs	r6, #32
 80006a2:	0025      	movs	r5, r4
 80006a4:	1ab6      	subs	r6, r6, r2
 80006a6:	0007      	movs	r7, r0
 80006a8:	4653      	mov	r3, sl
 80006aa:	40b0      	lsls	r0, r6
 80006ac:	40d4      	lsrs	r4, r2
 80006ae:	40b5      	lsls	r5, r6
 80006b0:	40d7      	lsrs	r7, r2
 80006b2:	1e46      	subs	r6, r0, #1
 80006b4:	41b0      	sbcs	r0, r6
 80006b6:	1b1b      	subs	r3, r3, r4
 80006b8:	469a      	mov	sl, r3
 80006ba:	433d      	orrs	r5, r7
 80006bc:	4305      	orrs	r5, r0
 80006be:	4662      	mov	r2, ip
 80006c0:	1b55      	subs	r5, r2, r5
 80006c2:	45ac      	cmp	ip, r5
 80006c4:	4192      	sbcs	r2, r2
 80006c6:	4653      	mov	r3, sl
 80006c8:	4252      	negs	r2, r2
 80006ca:	000e      	movs	r6, r1
 80006cc:	464f      	mov	r7, r9
 80006ce:	4688      	mov	r8, r1
 80006d0:	1a9c      	subs	r4, r3, r2
 80006d2:	e778      	b.n	80005c6 <__aeabi_dadd+0xa6>
 80006d4:	2a00      	cmp	r2, #0
 80006d6:	dc00      	bgt.n	80006da <__aeabi_dadd+0x1ba>
 80006d8:	e08e      	b.n	80007f8 <__aeabi_dadd+0x2d8>
 80006da:	4649      	mov	r1, r9
 80006dc:	2900      	cmp	r1, #0
 80006de:	d175      	bne.n	80007cc <__aeabi_dadd+0x2ac>
 80006e0:	4661      	mov	r1, ip
 80006e2:	4653      	mov	r3, sl
 80006e4:	4319      	orrs	r1, r3
 80006e6:	d100      	bne.n	80006ea <__aeabi_dadd+0x1ca>
 80006e8:	e0f6      	b.n	80008d8 <__aeabi_dadd+0x3b8>
 80006ea:	1e51      	subs	r1, r2, #1
 80006ec:	2a01      	cmp	r2, #1
 80006ee:	d100      	bne.n	80006f2 <__aeabi_dadd+0x1d2>
 80006f0:	e191      	b.n	8000a16 <__aeabi_dadd+0x4f6>
 80006f2:	4d6d      	ldr	r5, [pc, #436]	@ (80008a8 <__aeabi_dadd+0x388>)
 80006f4:	42aa      	cmp	r2, r5
 80006f6:	d100      	bne.n	80006fa <__aeabi_dadd+0x1da>
 80006f8:	e0dc      	b.n	80008b4 <__aeabi_dadd+0x394>
 80006fa:	2501      	movs	r5, #1
 80006fc:	2938      	cmp	r1, #56	@ 0x38
 80006fe:	dc14      	bgt.n	800072a <__aeabi_dadd+0x20a>
 8000700:	000a      	movs	r2, r1
 8000702:	2a1f      	cmp	r2, #31
 8000704:	dd00      	ble.n	8000708 <__aeabi_dadd+0x1e8>
 8000706:	e1a2      	b.n	8000a4e <__aeabi_dadd+0x52e>
 8000708:	2120      	movs	r1, #32
 800070a:	4653      	mov	r3, sl
 800070c:	1a89      	subs	r1, r1, r2
 800070e:	408b      	lsls	r3, r1
 8000710:	001d      	movs	r5, r3
 8000712:	4663      	mov	r3, ip
 8000714:	40d3      	lsrs	r3, r2
 8000716:	431d      	orrs	r5, r3
 8000718:	4663      	mov	r3, ip
 800071a:	408b      	lsls	r3, r1
 800071c:	0019      	movs	r1, r3
 800071e:	1e4b      	subs	r3, r1, #1
 8000720:	4199      	sbcs	r1, r3
 8000722:	4653      	mov	r3, sl
 8000724:	40d3      	lsrs	r3, r2
 8000726:	430d      	orrs	r5, r1
 8000728:	18e4      	adds	r4, r4, r3
 800072a:	182d      	adds	r5, r5, r0
 800072c:	4285      	cmp	r5, r0
 800072e:	4180      	sbcs	r0, r0
 8000730:	4240      	negs	r0, r0
 8000732:	1824      	adds	r4, r4, r0
 8000734:	0223      	lsls	r3, r4, #8
 8000736:	d559      	bpl.n	80007ec <__aeabi_dadd+0x2cc>
 8000738:	4b5b      	ldr	r3, [pc, #364]	@ (80008a8 <__aeabi_dadd+0x388>)
 800073a:	3701      	adds	r7, #1
 800073c:	429f      	cmp	r7, r3
 800073e:	d051      	beq.n	80007e4 <__aeabi_dadd+0x2c4>
 8000740:	2101      	movs	r1, #1
 8000742:	4b5a      	ldr	r3, [pc, #360]	@ (80008ac <__aeabi_dadd+0x38c>)
 8000744:	086a      	lsrs	r2, r5, #1
 8000746:	401c      	ands	r4, r3
 8000748:	4029      	ands	r1, r5
 800074a:	430a      	orrs	r2, r1
 800074c:	07e5      	lsls	r5, r4, #31
 800074e:	4315      	orrs	r5, r2
 8000750:	0864      	lsrs	r4, r4, #1
 8000752:	e75f      	b.n	8000614 <__aeabi_dadd+0xf4>
 8000754:	4661      	mov	r1, ip
 8000756:	4653      	mov	r3, sl
 8000758:	4319      	orrs	r1, r3
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x23e>
 800075c:	e0bc      	b.n	80008d8 <__aeabi_dadd+0x3b8>
 800075e:	1e51      	subs	r1, r2, #1
 8000760:	2a01      	cmp	r2, #1
 8000762:	d100      	bne.n	8000766 <__aeabi_dadd+0x246>
 8000764:	e164      	b.n	8000a30 <__aeabi_dadd+0x510>
 8000766:	4d50      	ldr	r5, [pc, #320]	@ (80008a8 <__aeabi_dadd+0x388>)
 8000768:	42aa      	cmp	r2, r5
 800076a:	d100      	bne.n	800076e <__aeabi_dadd+0x24e>
 800076c:	e16a      	b.n	8000a44 <__aeabi_dadd+0x524>
 800076e:	2501      	movs	r5, #1
 8000770:	2938      	cmp	r1, #56	@ 0x38
 8000772:	dd00      	ble.n	8000776 <__aeabi_dadd+0x256>
 8000774:	e722      	b.n	80005bc <__aeabi_dadd+0x9c>
 8000776:	000a      	movs	r2, r1
 8000778:	e70e      	b.n	8000598 <__aeabi_dadd+0x78>
 800077a:	4a4d      	ldr	r2, [pc, #308]	@ (80008b0 <__aeabi_dadd+0x390>)
 800077c:	1c7d      	adds	r5, r7, #1
 800077e:	4215      	tst	r5, r2
 8000780:	d000      	beq.n	8000784 <__aeabi_dadd+0x264>
 8000782:	e0d0      	b.n	8000926 <__aeabi_dadd+0x406>
 8000784:	0025      	movs	r5, r4
 8000786:	4662      	mov	r2, ip
 8000788:	4653      	mov	r3, sl
 800078a:	4305      	orrs	r5, r0
 800078c:	431a      	orrs	r2, r3
 800078e:	2f00      	cmp	r7, #0
 8000790:	d000      	beq.n	8000794 <__aeabi_dadd+0x274>
 8000792:	e137      	b.n	8000a04 <__aeabi_dadd+0x4e4>
 8000794:	2d00      	cmp	r5, #0
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x27a>
 8000798:	e1a8      	b.n	8000aec <__aeabi_dadd+0x5cc>
 800079a:	2a00      	cmp	r2, #0
 800079c:	d100      	bne.n	80007a0 <__aeabi_dadd+0x280>
 800079e:	e16a      	b.n	8000a76 <__aeabi_dadd+0x556>
 80007a0:	4663      	mov	r3, ip
 80007a2:	1ac5      	subs	r5, r0, r3
 80007a4:	4653      	mov	r3, sl
 80007a6:	1ae2      	subs	r2, r4, r3
 80007a8:	42a8      	cmp	r0, r5
 80007aa:	419b      	sbcs	r3, r3
 80007ac:	425b      	negs	r3, r3
 80007ae:	1ad3      	subs	r3, r2, r3
 80007b0:	021a      	lsls	r2, r3, #8
 80007b2:	d400      	bmi.n	80007b6 <__aeabi_dadd+0x296>
 80007b4:	e203      	b.n	8000bbe <__aeabi_dadd+0x69e>
 80007b6:	4663      	mov	r3, ip
 80007b8:	1a1d      	subs	r5, r3, r0
 80007ba:	45ac      	cmp	ip, r5
 80007bc:	4192      	sbcs	r2, r2
 80007be:	4653      	mov	r3, sl
 80007c0:	4252      	negs	r2, r2
 80007c2:	1b1c      	subs	r4, r3, r4
 80007c4:	000e      	movs	r6, r1
 80007c6:	4688      	mov	r8, r1
 80007c8:	1aa4      	subs	r4, r4, r2
 80007ca:	e723      	b.n	8000614 <__aeabi_dadd+0xf4>
 80007cc:	4936      	ldr	r1, [pc, #216]	@ (80008a8 <__aeabi_dadd+0x388>)
 80007ce:	428f      	cmp	r7, r1
 80007d0:	d070      	beq.n	80008b4 <__aeabi_dadd+0x394>
 80007d2:	2501      	movs	r5, #1
 80007d4:	2a38      	cmp	r2, #56	@ 0x38
 80007d6:	dca8      	bgt.n	800072a <__aeabi_dadd+0x20a>
 80007d8:	2180      	movs	r1, #128	@ 0x80
 80007da:	4653      	mov	r3, sl
 80007dc:	0409      	lsls	r1, r1, #16
 80007de:	430b      	orrs	r3, r1
 80007e0:	469a      	mov	sl, r3
 80007e2:	e78e      	b.n	8000702 <__aeabi_dadd+0x1e2>
 80007e4:	003c      	movs	r4, r7
 80007e6:	2500      	movs	r5, #0
 80007e8:	2200      	movs	r2, #0
 80007ea:	e731      	b.n	8000650 <__aeabi_dadd+0x130>
 80007ec:	2307      	movs	r3, #7
 80007ee:	402b      	ands	r3, r5
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d000      	beq.n	80007f6 <__aeabi_dadd+0x2d6>
 80007f4:	e710      	b.n	8000618 <__aeabi_dadd+0xf8>
 80007f6:	e093      	b.n	8000920 <__aeabi_dadd+0x400>
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	d074      	beq.n	80008e6 <__aeabi_dadd+0x3c6>
 80007fc:	464a      	mov	r2, r9
 80007fe:	1bd2      	subs	r2, r2, r7
 8000800:	2f00      	cmp	r7, #0
 8000802:	d100      	bne.n	8000806 <__aeabi_dadd+0x2e6>
 8000804:	e0c7      	b.n	8000996 <__aeabi_dadd+0x476>
 8000806:	4928      	ldr	r1, [pc, #160]	@ (80008a8 <__aeabi_dadd+0x388>)
 8000808:	4589      	cmp	r9, r1
 800080a:	d100      	bne.n	800080e <__aeabi_dadd+0x2ee>
 800080c:	e185      	b.n	8000b1a <__aeabi_dadd+0x5fa>
 800080e:	2501      	movs	r5, #1
 8000810:	2a38      	cmp	r2, #56	@ 0x38
 8000812:	dc12      	bgt.n	800083a <__aeabi_dadd+0x31a>
 8000814:	2180      	movs	r1, #128	@ 0x80
 8000816:	0409      	lsls	r1, r1, #16
 8000818:	430c      	orrs	r4, r1
 800081a:	2a1f      	cmp	r2, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x300>
 800081e:	e1ab      	b.n	8000b78 <__aeabi_dadd+0x658>
 8000820:	2120      	movs	r1, #32
 8000822:	0025      	movs	r5, r4
 8000824:	1a89      	subs	r1, r1, r2
 8000826:	0007      	movs	r7, r0
 8000828:	4088      	lsls	r0, r1
 800082a:	408d      	lsls	r5, r1
 800082c:	40d7      	lsrs	r7, r2
 800082e:	1e41      	subs	r1, r0, #1
 8000830:	4188      	sbcs	r0, r1
 8000832:	40d4      	lsrs	r4, r2
 8000834:	433d      	orrs	r5, r7
 8000836:	4305      	orrs	r5, r0
 8000838:	44a2      	add	sl, r4
 800083a:	4465      	add	r5, ip
 800083c:	4565      	cmp	r5, ip
 800083e:	4192      	sbcs	r2, r2
 8000840:	4252      	negs	r2, r2
 8000842:	4452      	add	r2, sl
 8000844:	0014      	movs	r4, r2
 8000846:	464f      	mov	r7, r9
 8000848:	e774      	b.n	8000734 <__aeabi_dadd+0x214>
 800084a:	0028      	movs	r0, r5
 800084c:	f001 f8f2 	bl	8001a34 <__clzsi2>
 8000850:	0003      	movs	r3, r0
 8000852:	3318      	adds	r3, #24
 8000854:	2b1f      	cmp	r3, #31
 8000856:	dc00      	bgt.n	800085a <__aeabi_dadd+0x33a>
 8000858:	e6c2      	b.n	80005e0 <__aeabi_dadd+0xc0>
 800085a:	002a      	movs	r2, r5
 800085c:	3808      	subs	r0, #8
 800085e:	4082      	lsls	r2, r0
 8000860:	429f      	cmp	r7, r3
 8000862:	dd00      	ble.n	8000866 <__aeabi_dadd+0x346>
 8000864:	e0a9      	b.n	80009ba <__aeabi_dadd+0x49a>
 8000866:	1bdb      	subs	r3, r3, r7
 8000868:	1c58      	adds	r0, r3, #1
 800086a:	281f      	cmp	r0, #31
 800086c:	dc00      	bgt.n	8000870 <__aeabi_dadd+0x350>
 800086e:	e1ac      	b.n	8000bca <__aeabi_dadd+0x6aa>
 8000870:	0015      	movs	r5, r2
 8000872:	3b1f      	subs	r3, #31
 8000874:	40dd      	lsrs	r5, r3
 8000876:	2820      	cmp	r0, #32
 8000878:	d005      	beq.n	8000886 <__aeabi_dadd+0x366>
 800087a:	2340      	movs	r3, #64	@ 0x40
 800087c:	1a1b      	subs	r3, r3, r0
 800087e:	409a      	lsls	r2, r3
 8000880:	1e53      	subs	r3, r2, #1
 8000882:	419a      	sbcs	r2, r3
 8000884:	4315      	orrs	r5, r2
 8000886:	2307      	movs	r3, #7
 8000888:	2700      	movs	r7, #0
 800088a:	402b      	ands	r3, r5
 800088c:	e7b0      	b.n	80007f0 <__aeabi_dadd+0x2d0>
 800088e:	08ed      	lsrs	r5, r5, #3
 8000890:	4b05      	ldr	r3, [pc, #20]	@ (80008a8 <__aeabi_dadd+0x388>)
 8000892:	0762      	lsls	r2, r4, #29
 8000894:	432a      	orrs	r2, r5
 8000896:	08e4      	lsrs	r4, r4, #3
 8000898:	429f      	cmp	r7, r3
 800089a:	d00f      	beq.n	80008bc <__aeabi_dadd+0x39c>
 800089c:	0324      	lsls	r4, r4, #12
 800089e:	0b25      	lsrs	r5, r4, #12
 80008a0:	057c      	lsls	r4, r7, #21
 80008a2:	0d64      	lsrs	r4, r4, #21
 80008a4:	e6d4      	b.n	8000650 <__aeabi_dadd+0x130>
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	000007ff 	.word	0x000007ff
 80008ac:	ff7fffff 	.word	0xff7fffff
 80008b0:	000007fe 	.word	0x000007fe
 80008b4:	08c0      	lsrs	r0, r0, #3
 80008b6:	0762      	lsls	r2, r4, #29
 80008b8:	4302      	orrs	r2, r0
 80008ba:	08e4      	lsrs	r4, r4, #3
 80008bc:	0013      	movs	r3, r2
 80008be:	4323      	orrs	r3, r4
 80008c0:	d100      	bne.n	80008c4 <__aeabi_dadd+0x3a4>
 80008c2:	e186      	b.n	8000bd2 <__aeabi_dadd+0x6b2>
 80008c4:	2580      	movs	r5, #128	@ 0x80
 80008c6:	032d      	lsls	r5, r5, #12
 80008c8:	4325      	orrs	r5, r4
 80008ca:	032d      	lsls	r5, r5, #12
 80008cc:	4cc3      	ldr	r4, [pc, #780]	@ (8000bdc <__aeabi_dadd+0x6bc>)
 80008ce:	0b2d      	lsrs	r5, r5, #12
 80008d0:	e6be      	b.n	8000650 <__aeabi_dadd+0x130>
 80008d2:	4660      	mov	r0, ip
 80008d4:	4654      	mov	r4, sl
 80008d6:	000e      	movs	r6, r1
 80008d8:	0017      	movs	r7, r2
 80008da:	08c5      	lsrs	r5, r0, #3
 80008dc:	e7d8      	b.n	8000890 <__aeabi_dadd+0x370>
 80008de:	4cc0      	ldr	r4, [pc, #768]	@ (8000be0 <__aeabi_dadd+0x6c0>)
 80008e0:	1aff      	subs	r7, r7, r3
 80008e2:	4014      	ands	r4, r2
 80008e4:	e696      	b.n	8000614 <__aeabi_dadd+0xf4>
 80008e6:	4abf      	ldr	r2, [pc, #764]	@ (8000be4 <__aeabi_dadd+0x6c4>)
 80008e8:	1c79      	adds	r1, r7, #1
 80008ea:	4211      	tst	r1, r2
 80008ec:	d16b      	bne.n	80009c6 <__aeabi_dadd+0x4a6>
 80008ee:	0022      	movs	r2, r4
 80008f0:	4302      	orrs	r2, r0
 80008f2:	2f00      	cmp	r7, #0
 80008f4:	d000      	beq.n	80008f8 <__aeabi_dadd+0x3d8>
 80008f6:	e0db      	b.n	8000ab0 <__aeabi_dadd+0x590>
 80008f8:	2a00      	cmp	r2, #0
 80008fa:	d100      	bne.n	80008fe <__aeabi_dadd+0x3de>
 80008fc:	e12d      	b.n	8000b5a <__aeabi_dadd+0x63a>
 80008fe:	4662      	mov	r2, ip
 8000900:	4653      	mov	r3, sl
 8000902:	431a      	orrs	r2, r3
 8000904:	d100      	bne.n	8000908 <__aeabi_dadd+0x3e8>
 8000906:	e0b6      	b.n	8000a76 <__aeabi_dadd+0x556>
 8000908:	4663      	mov	r3, ip
 800090a:	18c5      	adds	r5, r0, r3
 800090c:	4285      	cmp	r5, r0
 800090e:	4180      	sbcs	r0, r0
 8000910:	4454      	add	r4, sl
 8000912:	4240      	negs	r0, r0
 8000914:	1824      	adds	r4, r4, r0
 8000916:	0223      	lsls	r3, r4, #8
 8000918:	d502      	bpl.n	8000920 <__aeabi_dadd+0x400>
 800091a:	000f      	movs	r7, r1
 800091c:	4bb0      	ldr	r3, [pc, #704]	@ (8000be0 <__aeabi_dadd+0x6c0>)
 800091e:	401c      	ands	r4, r3
 8000920:	003a      	movs	r2, r7
 8000922:	0028      	movs	r0, r5
 8000924:	e7d8      	b.n	80008d8 <__aeabi_dadd+0x3b8>
 8000926:	4662      	mov	r2, ip
 8000928:	1a85      	subs	r5, r0, r2
 800092a:	42a8      	cmp	r0, r5
 800092c:	4192      	sbcs	r2, r2
 800092e:	4653      	mov	r3, sl
 8000930:	4252      	negs	r2, r2
 8000932:	4691      	mov	r9, r2
 8000934:	1ae3      	subs	r3, r4, r3
 8000936:	001a      	movs	r2, r3
 8000938:	464b      	mov	r3, r9
 800093a:	1ad2      	subs	r2, r2, r3
 800093c:	0013      	movs	r3, r2
 800093e:	4691      	mov	r9, r2
 8000940:	021a      	lsls	r2, r3, #8
 8000942:	d454      	bmi.n	80009ee <__aeabi_dadd+0x4ce>
 8000944:	464a      	mov	r2, r9
 8000946:	464c      	mov	r4, r9
 8000948:	432a      	orrs	r2, r5
 800094a:	d000      	beq.n	800094e <__aeabi_dadd+0x42e>
 800094c:	e640      	b.n	80005d0 <__aeabi_dadd+0xb0>
 800094e:	2600      	movs	r6, #0
 8000950:	2400      	movs	r4, #0
 8000952:	2500      	movs	r5, #0
 8000954:	e67c      	b.n	8000650 <__aeabi_dadd+0x130>
 8000956:	4da1      	ldr	r5, [pc, #644]	@ (8000bdc <__aeabi_dadd+0x6bc>)
 8000958:	45a9      	cmp	r9, r5
 800095a:	d100      	bne.n	800095e <__aeabi_dadd+0x43e>
 800095c:	e090      	b.n	8000a80 <__aeabi_dadd+0x560>
 800095e:	2501      	movs	r5, #1
 8000960:	2a38      	cmp	r2, #56	@ 0x38
 8000962:	dd00      	ble.n	8000966 <__aeabi_dadd+0x446>
 8000964:	e6ab      	b.n	80006be <__aeabi_dadd+0x19e>
 8000966:	2580      	movs	r5, #128	@ 0x80
 8000968:	042d      	lsls	r5, r5, #16
 800096a:	432c      	orrs	r4, r5
 800096c:	e695      	b.n	800069a <__aeabi_dadd+0x17a>
 800096e:	0011      	movs	r1, r2
 8000970:	4655      	mov	r5, sl
 8000972:	3920      	subs	r1, #32
 8000974:	40cd      	lsrs	r5, r1
 8000976:	46a9      	mov	r9, r5
 8000978:	2a20      	cmp	r2, #32
 800097a:	d006      	beq.n	800098a <__aeabi_dadd+0x46a>
 800097c:	2140      	movs	r1, #64	@ 0x40
 800097e:	4653      	mov	r3, sl
 8000980:	1a8a      	subs	r2, r1, r2
 8000982:	4093      	lsls	r3, r2
 8000984:	4662      	mov	r2, ip
 8000986:	431a      	orrs	r2, r3
 8000988:	4694      	mov	ip, r2
 800098a:	4665      	mov	r5, ip
 800098c:	1e6b      	subs	r3, r5, #1
 800098e:	419d      	sbcs	r5, r3
 8000990:	464b      	mov	r3, r9
 8000992:	431d      	orrs	r5, r3
 8000994:	e612      	b.n	80005bc <__aeabi_dadd+0x9c>
 8000996:	0021      	movs	r1, r4
 8000998:	4301      	orrs	r1, r0
 800099a:	d100      	bne.n	800099e <__aeabi_dadd+0x47e>
 800099c:	e0c4      	b.n	8000b28 <__aeabi_dadd+0x608>
 800099e:	1e51      	subs	r1, r2, #1
 80009a0:	2a01      	cmp	r2, #1
 80009a2:	d100      	bne.n	80009a6 <__aeabi_dadd+0x486>
 80009a4:	e0fb      	b.n	8000b9e <__aeabi_dadd+0x67e>
 80009a6:	4d8d      	ldr	r5, [pc, #564]	@ (8000bdc <__aeabi_dadd+0x6bc>)
 80009a8:	42aa      	cmp	r2, r5
 80009aa:	d100      	bne.n	80009ae <__aeabi_dadd+0x48e>
 80009ac:	e0b5      	b.n	8000b1a <__aeabi_dadd+0x5fa>
 80009ae:	2501      	movs	r5, #1
 80009b0:	2938      	cmp	r1, #56	@ 0x38
 80009b2:	dd00      	ble.n	80009b6 <__aeabi_dadd+0x496>
 80009b4:	e741      	b.n	800083a <__aeabi_dadd+0x31a>
 80009b6:	000a      	movs	r2, r1
 80009b8:	e72f      	b.n	800081a <__aeabi_dadd+0x2fa>
 80009ba:	4c89      	ldr	r4, [pc, #548]	@ (8000be0 <__aeabi_dadd+0x6c0>)
 80009bc:	1aff      	subs	r7, r7, r3
 80009be:	4014      	ands	r4, r2
 80009c0:	0762      	lsls	r2, r4, #29
 80009c2:	08e4      	lsrs	r4, r4, #3
 80009c4:	e76a      	b.n	800089c <__aeabi_dadd+0x37c>
 80009c6:	4a85      	ldr	r2, [pc, #532]	@ (8000bdc <__aeabi_dadd+0x6bc>)
 80009c8:	4291      	cmp	r1, r2
 80009ca:	d100      	bne.n	80009ce <__aeabi_dadd+0x4ae>
 80009cc:	e0e3      	b.n	8000b96 <__aeabi_dadd+0x676>
 80009ce:	4663      	mov	r3, ip
 80009d0:	18c2      	adds	r2, r0, r3
 80009d2:	4282      	cmp	r2, r0
 80009d4:	4180      	sbcs	r0, r0
 80009d6:	0023      	movs	r3, r4
 80009d8:	4240      	negs	r0, r0
 80009da:	4453      	add	r3, sl
 80009dc:	181b      	adds	r3, r3, r0
 80009de:	07dd      	lsls	r5, r3, #31
 80009e0:	085c      	lsrs	r4, r3, #1
 80009e2:	2307      	movs	r3, #7
 80009e4:	0852      	lsrs	r2, r2, #1
 80009e6:	4315      	orrs	r5, r2
 80009e8:	000f      	movs	r7, r1
 80009ea:	402b      	ands	r3, r5
 80009ec:	e700      	b.n	80007f0 <__aeabi_dadd+0x2d0>
 80009ee:	4663      	mov	r3, ip
 80009f0:	1a1d      	subs	r5, r3, r0
 80009f2:	45ac      	cmp	ip, r5
 80009f4:	4192      	sbcs	r2, r2
 80009f6:	4653      	mov	r3, sl
 80009f8:	4252      	negs	r2, r2
 80009fa:	1b1c      	subs	r4, r3, r4
 80009fc:	000e      	movs	r6, r1
 80009fe:	4688      	mov	r8, r1
 8000a00:	1aa4      	subs	r4, r4, r2
 8000a02:	e5e5      	b.n	80005d0 <__aeabi_dadd+0xb0>
 8000a04:	2d00      	cmp	r5, #0
 8000a06:	d000      	beq.n	8000a0a <__aeabi_dadd+0x4ea>
 8000a08:	e091      	b.n	8000b2e <__aeabi_dadd+0x60e>
 8000a0a:	2a00      	cmp	r2, #0
 8000a0c:	d138      	bne.n	8000a80 <__aeabi_dadd+0x560>
 8000a0e:	2480      	movs	r4, #128	@ 0x80
 8000a10:	2600      	movs	r6, #0
 8000a12:	0324      	lsls	r4, r4, #12
 8000a14:	e756      	b.n	80008c4 <__aeabi_dadd+0x3a4>
 8000a16:	4663      	mov	r3, ip
 8000a18:	18c5      	adds	r5, r0, r3
 8000a1a:	4285      	cmp	r5, r0
 8000a1c:	4180      	sbcs	r0, r0
 8000a1e:	4454      	add	r4, sl
 8000a20:	4240      	negs	r0, r0
 8000a22:	1824      	adds	r4, r4, r0
 8000a24:	2701      	movs	r7, #1
 8000a26:	0223      	lsls	r3, r4, #8
 8000a28:	d400      	bmi.n	8000a2c <__aeabi_dadd+0x50c>
 8000a2a:	e6df      	b.n	80007ec <__aeabi_dadd+0x2cc>
 8000a2c:	2702      	movs	r7, #2
 8000a2e:	e687      	b.n	8000740 <__aeabi_dadd+0x220>
 8000a30:	4663      	mov	r3, ip
 8000a32:	1ac5      	subs	r5, r0, r3
 8000a34:	42a8      	cmp	r0, r5
 8000a36:	4180      	sbcs	r0, r0
 8000a38:	4653      	mov	r3, sl
 8000a3a:	4240      	negs	r0, r0
 8000a3c:	1ae4      	subs	r4, r4, r3
 8000a3e:	2701      	movs	r7, #1
 8000a40:	1a24      	subs	r4, r4, r0
 8000a42:	e5c0      	b.n	80005c6 <__aeabi_dadd+0xa6>
 8000a44:	0762      	lsls	r2, r4, #29
 8000a46:	08c0      	lsrs	r0, r0, #3
 8000a48:	4302      	orrs	r2, r0
 8000a4a:	08e4      	lsrs	r4, r4, #3
 8000a4c:	e736      	b.n	80008bc <__aeabi_dadd+0x39c>
 8000a4e:	0011      	movs	r1, r2
 8000a50:	4653      	mov	r3, sl
 8000a52:	3920      	subs	r1, #32
 8000a54:	40cb      	lsrs	r3, r1
 8000a56:	4699      	mov	r9, r3
 8000a58:	2a20      	cmp	r2, #32
 8000a5a:	d006      	beq.n	8000a6a <__aeabi_dadd+0x54a>
 8000a5c:	2140      	movs	r1, #64	@ 0x40
 8000a5e:	4653      	mov	r3, sl
 8000a60:	1a8a      	subs	r2, r1, r2
 8000a62:	4093      	lsls	r3, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	431a      	orrs	r2, r3
 8000a68:	4694      	mov	ip, r2
 8000a6a:	4665      	mov	r5, ip
 8000a6c:	1e6b      	subs	r3, r5, #1
 8000a6e:	419d      	sbcs	r5, r3
 8000a70:	464b      	mov	r3, r9
 8000a72:	431d      	orrs	r5, r3
 8000a74:	e659      	b.n	800072a <__aeabi_dadd+0x20a>
 8000a76:	0762      	lsls	r2, r4, #29
 8000a78:	08c0      	lsrs	r0, r0, #3
 8000a7a:	4302      	orrs	r2, r0
 8000a7c:	08e4      	lsrs	r4, r4, #3
 8000a7e:	e70d      	b.n	800089c <__aeabi_dadd+0x37c>
 8000a80:	4653      	mov	r3, sl
 8000a82:	075a      	lsls	r2, r3, #29
 8000a84:	4663      	mov	r3, ip
 8000a86:	08d8      	lsrs	r0, r3, #3
 8000a88:	4653      	mov	r3, sl
 8000a8a:	000e      	movs	r6, r1
 8000a8c:	4302      	orrs	r2, r0
 8000a8e:	08dc      	lsrs	r4, r3, #3
 8000a90:	e714      	b.n	80008bc <__aeabi_dadd+0x39c>
 8000a92:	0015      	movs	r5, r2
 8000a94:	0026      	movs	r6, r4
 8000a96:	3d20      	subs	r5, #32
 8000a98:	40ee      	lsrs	r6, r5
 8000a9a:	2a20      	cmp	r2, #32
 8000a9c:	d003      	beq.n	8000aa6 <__aeabi_dadd+0x586>
 8000a9e:	2540      	movs	r5, #64	@ 0x40
 8000aa0:	1aaa      	subs	r2, r5, r2
 8000aa2:	4094      	lsls	r4, r2
 8000aa4:	4320      	orrs	r0, r4
 8000aa6:	1e42      	subs	r2, r0, #1
 8000aa8:	4190      	sbcs	r0, r2
 8000aaa:	0005      	movs	r5, r0
 8000aac:	4335      	orrs	r5, r6
 8000aae:	e606      	b.n	80006be <__aeabi_dadd+0x19e>
 8000ab0:	2a00      	cmp	r2, #0
 8000ab2:	d07c      	beq.n	8000bae <__aeabi_dadd+0x68e>
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	4653      	mov	r3, sl
 8000ab8:	08c0      	lsrs	r0, r0, #3
 8000aba:	431a      	orrs	r2, r3
 8000abc:	d100      	bne.n	8000ac0 <__aeabi_dadd+0x5a0>
 8000abe:	e6fa      	b.n	80008b6 <__aeabi_dadd+0x396>
 8000ac0:	0762      	lsls	r2, r4, #29
 8000ac2:	4310      	orrs	r0, r2
 8000ac4:	2280      	movs	r2, #128	@ 0x80
 8000ac6:	08e4      	lsrs	r4, r4, #3
 8000ac8:	0312      	lsls	r2, r2, #12
 8000aca:	4214      	tst	r4, r2
 8000acc:	d008      	beq.n	8000ae0 <__aeabi_dadd+0x5c0>
 8000ace:	08d9      	lsrs	r1, r3, #3
 8000ad0:	4211      	tst	r1, r2
 8000ad2:	d105      	bne.n	8000ae0 <__aeabi_dadd+0x5c0>
 8000ad4:	4663      	mov	r3, ip
 8000ad6:	08d8      	lsrs	r0, r3, #3
 8000ad8:	4653      	mov	r3, sl
 8000ada:	000c      	movs	r4, r1
 8000adc:	075b      	lsls	r3, r3, #29
 8000ade:	4318      	orrs	r0, r3
 8000ae0:	0f42      	lsrs	r2, r0, #29
 8000ae2:	00c0      	lsls	r0, r0, #3
 8000ae4:	08c0      	lsrs	r0, r0, #3
 8000ae6:	0752      	lsls	r2, r2, #29
 8000ae8:	4302      	orrs	r2, r0
 8000aea:	e6e7      	b.n	80008bc <__aeabi_dadd+0x39c>
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	d100      	bne.n	8000af2 <__aeabi_dadd+0x5d2>
 8000af0:	e72d      	b.n	800094e <__aeabi_dadd+0x42e>
 8000af2:	4663      	mov	r3, ip
 8000af4:	08d8      	lsrs	r0, r3, #3
 8000af6:	4653      	mov	r3, sl
 8000af8:	075a      	lsls	r2, r3, #29
 8000afa:	000e      	movs	r6, r1
 8000afc:	4302      	orrs	r2, r0
 8000afe:	08dc      	lsrs	r4, r3, #3
 8000b00:	e6cc      	b.n	800089c <__aeabi_dadd+0x37c>
 8000b02:	4663      	mov	r3, ip
 8000b04:	1a1d      	subs	r5, r3, r0
 8000b06:	45ac      	cmp	ip, r5
 8000b08:	4192      	sbcs	r2, r2
 8000b0a:	4653      	mov	r3, sl
 8000b0c:	4252      	negs	r2, r2
 8000b0e:	1b1c      	subs	r4, r3, r4
 8000b10:	000e      	movs	r6, r1
 8000b12:	4688      	mov	r8, r1
 8000b14:	1aa4      	subs	r4, r4, r2
 8000b16:	3701      	adds	r7, #1
 8000b18:	e555      	b.n	80005c6 <__aeabi_dadd+0xa6>
 8000b1a:	4663      	mov	r3, ip
 8000b1c:	08d9      	lsrs	r1, r3, #3
 8000b1e:	4653      	mov	r3, sl
 8000b20:	075a      	lsls	r2, r3, #29
 8000b22:	430a      	orrs	r2, r1
 8000b24:	08dc      	lsrs	r4, r3, #3
 8000b26:	e6c9      	b.n	80008bc <__aeabi_dadd+0x39c>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	4654      	mov	r4, sl
 8000b2c:	e6d4      	b.n	80008d8 <__aeabi_dadd+0x3b8>
 8000b2e:	08c0      	lsrs	r0, r0, #3
 8000b30:	2a00      	cmp	r2, #0
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dadd+0x616>
 8000b34:	e6bf      	b.n	80008b6 <__aeabi_dadd+0x396>
 8000b36:	0762      	lsls	r2, r4, #29
 8000b38:	4310      	orrs	r0, r2
 8000b3a:	2280      	movs	r2, #128	@ 0x80
 8000b3c:	08e4      	lsrs	r4, r4, #3
 8000b3e:	0312      	lsls	r2, r2, #12
 8000b40:	4214      	tst	r4, r2
 8000b42:	d0cd      	beq.n	8000ae0 <__aeabi_dadd+0x5c0>
 8000b44:	08dd      	lsrs	r5, r3, #3
 8000b46:	4215      	tst	r5, r2
 8000b48:	d1ca      	bne.n	8000ae0 <__aeabi_dadd+0x5c0>
 8000b4a:	4663      	mov	r3, ip
 8000b4c:	08d8      	lsrs	r0, r3, #3
 8000b4e:	4653      	mov	r3, sl
 8000b50:	075b      	lsls	r3, r3, #29
 8000b52:	000e      	movs	r6, r1
 8000b54:	002c      	movs	r4, r5
 8000b56:	4318      	orrs	r0, r3
 8000b58:	e7c2      	b.n	8000ae0 <__aeabi_dadd+0x5c0>
 8000b5a:	4663      	mov	r3, ip
 8000b5c:	08d9      	lsrs	r1, r3, #3
 8000b5e:	4653      	mov	r3, sl
 8000b60:	075a      	lsls	r2, r3, #29
 8000b62:	430a      	orrs	r2, r1
 8000b64:	08dc      	lsrs	r4, r3, #3
 8000b66:	e699      	b.n	800089c <__aeabi_dadd+0x37c>
 8000b68:	4663      	mov	r3, ip
 8000b6a:	08d8      	lsrs	r0, r3, #3
 8000b6c:	4653      	mov	r3, sl
 8000b6e:	075a      	lsls	r2, r3, #29
 8000b70:	000e      	movs	r6, r1
 8000b72:	4302      	orrs	r2, r0
 8000b74:	08dc      	lsrs	r4, r3, #3
 8000b76:	e6a1      	b.n	80008bc <__aeabi_dadd+0x39c>
 8000b78:	0011      	movs	r1, r2
 8000b7a:	0027      	movs	r7, r4
 8000b7c:	3920      	subs	r1, #32
 8000b7e:	40cf      	lsrs	r7, r1
 8000b80:	2a20      	cmp	r2, #32
 8000b82:	d003      	beq.n	8000b8c <__aeabi_dadd+0x66c>
 8000b84:	2140      	movs	r1, #64	@ 0x40
 8000b86:	1a8a      	subs	r2, r1, r2
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	4320      	orrs	r0, r4
 8000b8c:	1e42      	subs	r2, r0, #1
 8000b8e:	4190      	sbcs	r0, r2
 8000b90:	0005      	movs	r5, r0
 8000b92:	433d      	orrs	r5, r7
 8000b94:	e651      	b.n	800083a <__aeabi_dadd+0x31a>
 8000b96:	000c      	movs	r4, r1
 8000b98:	2500      	movs	r5, #0
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	e558      	b.n	8000650 <__aeabi_dadd+0x130>
 8000b9e:	4460      	add	r0, ip
 8000ba0:	4560      	cmp	r0, ip
 8000ba2:	4192      	sbcs	r2, r2
 8000ba4:	4454      	add	r4, sl
 8000ba6:	4252      	negs	r2, r2
 8000ba8:	0005      	movs	r5, r0
 8000baa:	18a4      	adds	r4, r4, r2
 8000bac:	e73a      	b.n	8000a24 <__aeabi_dadd+0x504>
 8000bae:	4653      	mov	r3, sl
 8000bb0:	075a      	lsls	r2, r3, #29
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	08d9      	lsrs	r1, r3, #3
 8000bb6:	4653      	mov	r3, sl
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	08dc      	lsrs	r4, r3, #3
 8000bbc:	e67e      	b.n	80008bc <__aeabi_dadd+0x39c>
 8000bbe:	001a      	movs	r2, r3
 8000bc0:	001c      	movs	r4, r3
 8000bc2:	432a      	orrs	r2, r5
 8000bc4:	d000      	beq.n	8000bc8 <__aeabi_dadd+0x6a8>
 8000bc6:	e6ab      	b.n	8000920 <__aeabi_dadd+0x400>
 8000bc8:	e6c1      	b.n	800094e <__aeabi_dadd+0x42e>
 8000bca:	2120      	movs	r1, #32
 8000bcc:	2500      	movs	r5, #0
 8000bce:	1a09      	subs	r1, r1, r0
 8000bd0:	e519      	b.n	8000606 <__aeabi_dadd+0xe6>
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2500      	movs	r5, #0
 8000bd6:	4c01      	ldr	r4, [pc, #4]	@ (8000bdc <__aeabi_dadd+0x6bc>)
 8000bd8:	e53a      	b.n	8000650 <__aeabi_dadd+0x130>
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	000007ff 	.word	0x000007ff
 8000be0:	ff7fffff 	.word	0xff7fffff
 8000be4:	000007fe 	.word	0x000007fe

08000be8 <__aeabi_dmul>:
 8000be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bea:	4657      	mov	r7, sl
 8000bec:	46de      	mov	lr, fp
 8000bee:	464e      	mov	r6, r9
 8000bf0:	4645      	mov	r5, r8
 8000bf2:	b5e0      	push	{r5, r6, r7, lr}
 8000bf4:	001f      	movs	r7, r3
 8000bf6:	030b      	lsls	r3, r1, #12
 8000bf8:	0b1b      	lsrs	r3, r3, #12
 8000bfa:	0016      	movs	r6, r2
 8000bfc:	469a      	mov	sl, r3
 8000bfe:	0fca      	lsrs	r2, r1, #31
 8000c00:	004b      	lsls	r3, r1, #1
 8000c02:	0004      	movs	r4, r0
 8000c04:	4693      	mov	fp, r2
 8000c06:	b087      	sub	sp, #28
 8000c08:	0d5b      	lsrs	r3, r3, #21
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_dmul+0x26>
 8000c0c:	e0d5      	b.n	8000dba <__aeabi_dmul+0x1d2>
 8000c0e:	4abb      	ldr	r2, [pc, #748]	@ (8000efc <__aeabi_dmul+0x314>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d100      	bne.n	8000c16 <__aeabi_dmul+0x2e>
 8000c14:	e0f8      	b.n	8000e08 <__aeabi_dmul+0x220>
 8000c16:	4651      	mov	r1, sl
 8000c18:	0f42      	lsrs	r2, r0, #29
 8000c1a:	00c9      	lsls	r1, r1, #3
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	2180      	movs	r1, #128	@ 0x80
 8000c20:	0409      	lsls	r1, r1, #16
 8000c22:	4311      	orrs	r1, r2
 8000c24:	00c2      	lsls	r2, r0, #3
 8000c26:	4691      	mov	r9, r2
 8000c28:	4ab5      	ldr	r2, [pc, #724]	@ (8000f00 <__aeabi_dmul+0x318>)
 8000c2a:	468a      	mov	sl, r1
 8000c2c:	189d      	adds	r5, r3, r2
 8000c2e:	2300      	movs	r3, #0
 8000c30:	4698      	mov	r8, r3
 8000c32:	9302      	str	r3, [sp, #8]
 8000c34:	033c      	lsls	r4, r7, #12
 8000c36:	007b      	lsls	r3, r7, #1
 8000c38:	0ffa      	lsrs	r2, r7, #31
 8000c3a:	0030      	movs	r0, r6
 8000c3c:	0b24      	lsrs	r4, r4, #12
 8000c3e:	0d5b      	lsrs	r3, r3, #21
 8000c40:	9200      	str	r2, [sp, #0]
 8000c42:	d100      	bne.n	8000c46 <__aeabi_dmul+0x5e>
 8000c44:	e096      	b.n	8000d74 <__aeabi_dmul+0x18c>
 8000c46:	4aad      	ldr	r2, [pc, #692]	@ (8000efc <__aeabi_dmul+0x314>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d031      	beq.n	8000cb0 <__aeabi_dmul+0xc8>
 8000c4c:	0f72      	lsrs	r2, r6, #29
 8000c4e:	00e4      	lsls	r4, r4, #3
 8000c50:	4322      	orrs	r2, r4
 8000c52:	2480      	movs	r4, #128	@ 0x80
 8000c54:	0424      	lsls	r4, r4, #16
 8000c56:	4314      	orrs	r4, r2
 8000c58:	4aa9      	ldr	r2, [pc, #676]	@ (8000f00 <__aeabi_dmul+0x318>)
 8000c5a:	00f0      	lsls	r0, r6, #3
 8000c5c:	4694      	mov	ip, r2
 8000c5e:	4463      	add	r3, ip
 8000c60:	195b      	adds	r3, r3, r5
 8000c62:	1c5a      	adds	r2, r3, #1
 8000c64:	9201      	str	r2, [sp, #4]
 8000c66:	4642      	mov	r2, r8
 8000c68:	2600      	movs	r6, #0
 8000c6a:	2a0a      	cmp	r2, #10
 8000c6c:	dc42      	bgt.n	8000cf4 <__aeabi_dmul+0x10c>
 8000c6e:	465a      	mov	r2, fp
 8000c70:	9900      	ldr	r1, [sp, #0]
 8000c72:	404a      	eors	r2, r1
 8000c74:	4693      	mov	fp, r2
 8000c76:	4642      	mov	r2, r8
 8000c78:	2a02      	cmp	r2, #2
 8000c7a:	dc32      	bgt.n	8000ce2 <__aeabi_dmul+0xfa>
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	2a01      	cmp	r2, #1
 8000c80:	d900      	bls.n	8000c84 <__aeabi_dmul+0x9c>
 8000c82:	e149      	b.n	8000f18 <__aeabi_dmul+0x330>
 8000c84:	2e02      	cmp	r6, #2
 8000c86:	d100      	bne.n	8000c8a <__aeabi_dmul+0xa2>
 8000c88:	e0ca      	b.n	8000e20 <__aeabi_dmul+0x238>
 8000c8a:	2e01      	cmp	r6, #1
 8000c8c:	d13d      	bne.n	8000d0a <__aeabi_dmul+0x122>
 8000c8e:	2300      	movs	r3, #0
 8000c90:	2400      	movs	r4, #0
 8000c92:	2200      	movs	r2, #0
 8000c94:	0010      	movs	r0, r2
 8000c96:	465a      	mov	r2, fp
 8000c98:	051b      	lsls	r3, r3, #20
 8000c9a:	4323      	orrs	r3, r4
 8000c9c:	07d2      	lsls	r2, r2, #31
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	b007      	add	sp, #28
 8000ca4:	bcf0      	pop	{r4, r5, r6, r7}
 8000ca6:	46bb      	mov	fp, r7
 8000ca8:	46b2      	mov	sl, r6
 8000caa:	46a9      	mov	r9, r5
 8000cac:	46a0      	mov	r8, r4
 8000cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cb0:	4b92      	ldr	r3, [pc, #584]	@ (8000efc <__aeabi_dmul+0x314>)
 8000cb2:	4326      	orrs	r6, r4
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_dmul+0xd4>
 8000cba:	e0bb      	b.n	8000e34 <__aeabi_dmul+0x24c>
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	4641      	mov	r1, r8
 8000cc0:	4311      	orrs	r1, r2
 8000cc2:	465a      	mov	r2, fp
 8000cc4:	4688      	mov	r8, r1
 8000cc6:	9900      	ldr	r1, [sp, #0]
 8000cc8:	404a      	eors	r2, r1
 8000cca:	2180      	movs	r1, #128	@ 0x80
 8000ccc:	0109      	lsls	r1, r1, #4
 8000cce:	468c      	mov	ip, r1
 8000cd0:	0029      	movs	r1, r5
 8000cd2:	4461      	add	r1, ip
 8000cd4:	9101      	str	r1, [sp, #4]
 8000cd6:	4641      	mov	r1, r8
 8000cd8:	290a      	cmp	r1, #10
 8000cda:	dd00      	ble.n	8000cde <__aeabi_dmul+0xf6>
 8000cdc:	e233      	b.n	8001146 <__aeabi_dmul+0x55e>
 8000cde:	4693      	mov	fp, r2
 8000ce0:	2603      	movs	r6, #3
 8000ce2:	4642      	mov	r2, r8
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	4097      	lsls	r7, r2
 8000ce8:	21a6      	movs	r1, #166	@ 0xa6
 8000cea:	003a      	movs	r2, r7
 8000cec:	00c9      	lsls	r1, r1, #3
 8000cee:	400a      	ands	r2, r1
 8000cf0:	420f      	tst	r7, r1
 8000cf2:	d031      	beq.n	8000d58 <__aeabi_dmul+0x170>
 8000cf4:	9e02      	ldr	r6, [sp, #8]
 8000cf6:	2e02      	cmp	r6, #2
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_dmul+0x114>
 8000cfa:	e235      	b.n	8001168 <__aeabi_dmul+0x580>
 8000cfc:	2e03      	cmp	r6, #3
 8000cfe:	d100      	bne.n	8000d02 <__aeabi_dmul+0x11a>
 8000d00:	e1d2      	b.n	80010a8 <__aeabi_dmul+0x4c0>
 8000d02:	4654      	mov	r4, sl
 8000d04:	4648      	mov	r0, r9
 8000d06:	2e01      	cmp	r6, #1
 8000d08:	d0c1      	beq.n	8000c8e <__aeabi_dmul+0xa6>
 8000d0a:	9a01      	ldr	r2, [sp, #4]
 8000d0c:	4b7d      	ldr	r3, [pc, #500]	@ (8000f04 <__aeabi_dmul+0x31c>)
 8000d0e:	4694      	mov	ip, r2
 8000d10:	4463      	add	r3, ip
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dc00      	bgt.n	8000d18 <__aeabi_dmul+0x130>
 8000d16:	e0c0      	b.n	8000e9a <__aeabi_dmul+0x2b2>
 8000d18:	0742      	lsls	r2, r0, #29
 8000d1a:	d009      	beq.n	8000d30 <__aeabi_dmul+0x148>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4002      	ands	r2, r0
 8000d20:	2a04      	cmp	r2, #4
 8000d22:	d005      	beq.n	8000d30 <__aeabi_dmul+0x148>
 8000d24:	1d02      	adds	r2, r0, #4
 8000d26:	4282      	cmp	r2, r0
 8000d28:	4180      	sbcs	r0, r0
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	1824      	adds	r4, r4, r0
 8000d2e:	0010      	movs	r0, r2
 8000d30:	01e2      	lsls	r2, r4, #7
 8000d32:	d506      	bpl.n	8000d42 <__aeabi_dmul+0x15a>
 8000d34:	4b74      	ldr	r3, [pc, #464]	@ (8000f08 <__aeabi_dmul+0x320>)
 8000d36:	9a01      	ldr	r2, [sp, #4]
 8000d38:	401c      	ands	r4, r3
 8000d3a:	2380      	movs	r3, #128	@ 0x80
 8000d3c:	4694      	mov	ip, r2
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	4463      	add	r3, ip
 8000d42:	4a72      	ldr	r2, [pc, #456]	@ (8000f0c <__aeabi_dmul+0x324>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	dc6b      	bgt.n	8000e20 <__aeabi_dmul+0x238>
 8000d48:	0762      	lsls	r2, r4, #29
 8000d4a:	08c0      	lsrs	r0, r0, #3
 8000d4c:	0264      	lsls	r4, r4, #9
 8000d4e:	055b      	lsls	r3, r3, #21
 8000d50:	4302      	orrs	r2, r0
 8000d52:	0b24      	lsrs	r4, r4, #12
 8000d54:	0d5b      	lsrs	r3, r3, #21
 8000d56:	e79d      	b.n	8000c94 <__aeabi_dmul+0xac>
 8000d58:	2190      	movs	r1, #144	@ 0x90
 8000d5a:	0089      	lsls	r1, r1, #2
 8000d5c:	420f      	tst	r7, r1
 8000d5e:	d163      	bne.n	8000e28 <__aeabi_dmul+0x240>
 8000d60:	2288      	movs	r2, #136	@ 0x88
 8000d62:	423a      	tst	r2, r7
 8000d64:	d100      	bne.n	8000d68 <__aeabi_dmul+0x180>
 8000d66:	e0d7      	b.n	8000f18 <__aeabi_dmul+0x330>
 8000d68:	9b00      	ldr	r3, [sp, #0]
 8000d6a:	46a2      	mov	sl, r4
 8000d6c:	469b      	mov	fp, r3
 8000d6e:	4681      	mov	r9, r0
 8000d70:	9602      	str	r6, [sp, #8]
 8000d72:	e7bf      	b.n	8000cf4 <__aeabi_dmul+0x10c>
 8000d74:	0023      	movs	r3, r4
 8000d76:	4333      	orrs	r3, r6
 8000d78:	d100      	bne.n	8000d7c <__aeabi_dmul+0x194>
 8000d7a:	e07f      	b.n	8000e7c <__aeabi_dmul+0x294>
 8000d7c:	2c00      	cmp	r4, #0
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_dmul+0x19a>
 8000d80:	e1ad      	b.n	80010de <__aeabi_dmul+0x4f6>
 8000d82:	0020      	movs	r0, r4
 8000d84:	f000 fe56 	bl	8001a34 <__clzsi2>
 8000d88:	0002      	movs	r2, r0
 8000d8a:	0003      	movs	r3, r0
 8000d8c:	3a0b      	subs	r2, #11
 8000d8e:	201d      	movs	r0, #29
 8000d90:	0019      	movs	r1, r3
 8000d92:	1a82      	subs	r2, r0, r2
 8000d94:	0030      	movs	r0, r6
 8000d96:	3908      	subs	r1, #8
 8000d98:	40d0      	lsrs	r0, r2
 8000d9a:	408c      	lsls	r4, r1
 8000d9c:	4304      	orrs	r4, r0
 8000d9e:	0030      	movs	r0, r6
 8000da0:	4088      	lsls	r0, r1
 8000da2:	4a5b      	ldr	r2, [pc, #364]	@ (8000f10 <__aeabi_dmul+0x328>)
 8000da4:	1aeb      	subs	r3, r5, r3
 8000da6:	4694      	mov	ip, r2
 8000da8:	4463      	add	r3, ip
 8000daa:	1c5a      	adds	r2, r3, #1
 8000dac:	9201      	str	r2, [sp, #4]
 8000dae:	4642      	mov	r2, r8
 8000db0:	2600      	movs	r6, #0
 8000db2:	2a0a      	cmp	r2, #10
 8000db4:	dc00      	bgt.n	8000db8 <__aeabi_dmul+0x1d0>
 8000db6:	e75a      	b.n	8000c6e <__aeabi_dmul+0x86>
 8000db8:	e79c      	b.n	8000cf4 <__aeabi_dmul+0x10c>
 8000dba:	4653      	mov	r3, sl
 8000dbc:	4303      	orrs	r3, r0
 8000dbe:	4699      	mov	r9, r3
 8000dc0:	d054      	beq.n	8000e6c <__aeabi_dmul+0x284>
 8000dc2:	4653      	mov	r3, sl
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d100      	bne.n	8000dca <__aeabi_dmul+0x1e2>
 8000dc8:	e177      	b.n	80010ba <__aeabi_dmul+0x4d2>
 8000dca:	4650      	mov	r0, sl
 8000dcc:	f000 fe32 	bl	8001a34 <__clzsi2>
 8000dd0:	230b      	movs	r3, #11
 8000dd2:	425b      	negs	r3, r3
 8000dd4:	469c      	mov	ip, r3
 8000dd6:	0002      	movs	r2, r0
 8000dd8:	4484      	add	ip, r0
 8000dda:	0011      	movs	r1, r2
 8000ddc:	4650      	mov	r0, sl
 8000dde:	3908      	subs	r1, #8
 8000de0:	4088      	lsls	r0, r1
 8000de2:	231d      	movs	r3, #29
 8000de4:	4680      	mov	r8, r0
 8000de6:	4660      	mov	r0, ip
 8000de8:	1a1b      	subs	r3, r3, r0
 8000dea:	0020      	movs	r0, r4
 8000dec:	40d8      	lsrs	r0, r3
 8000dee:	0003      	movs	r3, r0
 8000df0:	4640      	mov	r0, r8
 8000df2:	4303      	orrs	r3, r0
 8000df4:	469a      	mov	sl, r3
 8000df6:	0023      	movs	r3, r4
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	4699      	mov	r9, r3
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	4d44      	ldr	r5, [pc, #272]	@ (8000f10 <__aeabi_dmul+0x328>)
 8000e00:	4698      	mov	r8, r3
 8000e02:	1aad      	subs	r5, r5, r2
 8000e04:	9302      	str	r3, [sp, #8]
 8000e06:	e715      	b.n	8000c34 <__aeabi_dmul+0x4c>
 8000e08:	4652      	mov	r2, sl
 8000e0a:	4302      	orrs	r2, r0
 8000e0c:	4691      	mov	r9, r2
 8000e0e:	d126      	bne.n	8000e5e <__aeabi_dmul+0x276>
 8000e10:	2200      	movs	r2, #0
 8000e12:	001d      	movs	r5, r3
 8000e14:	2302      	movs	r3, #2
 8000e16:	4692      	mov	sl, r2
 8000e18:	3208      	adds	r2, #8
 8000e1a:	4690      	mov	r8, r2
 8000e1c:	9302      	str	r3, [sp, #8]
 8000e1e:	e709      	b.n	8000c34 <__aeabi_dmul+0x4c>
 8000e20:	2400      	movs	r4, #0
 8000e22:	2200      	movs	r2, #0
 8000e24:	4b35      	ldr	r3, [pc, #212]	@ (8000efc <__aeabi_dmul+0x314>)
 8000e26:	e735      	b.n	8000c94 <__aeabi_dmul+0xac>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	2480      	movs	r4, #128	@ 0x80
 8000e2c:	469b      	mov	fp, r3
 8000e2e:	0324      	lsls	r4, r4, #12
 8000e30:	4b32      	ldr	r3, [pc, #200]	@ (8000efc <__aeabi_dmul+0x314>)
 8000e32:	e72f      	b.n	8000c94 <__aeabi_dmul+0xac>
 8000e34:	2202      	movs	r2, #2
 8000e36:	4641      	mov	r1, r8
 8000e38:	4311      	orrs	r1, r2
 8000e3a:	2280      	movs	r2, #128	@ 0x80
 8000e3c:	0112      	lsls	r2, r2, #4
 8000e3e:	4694      	mov	ip, r2
 8000e40:	002a      	movs	r2, r5
 8000e42:	4462      	add	r2, ip
 8000e44:	4688      	mov	r8, r1
 8000e46:	9201      	str	r2, [sp, #4]
 8000e48:	290a      	cmp	r1, #10
 8000e4a:	dd00      	ble.n	8000e4e <__aeabi_dmul+0x266>
 8000e4c:	e752      	b.n	8000cf4 <__aeabi_dmul+0x10c>
 8000e4e:	465a      	mov	r2, fp
 8000e50:	2000      	movs	r0, #0
 8000e52:	9900      	ldr	r1, [sp, #0]
 8000e54:	0004      	movs	r4, r0
 8000e56:	404a      	eors	r2, r1
 8000e58:	4693      	mov	fp, r2
 8000e5a:	2602      	movs	r6, #2
 8000e5c:	e70b      	b.n	8000c76 <__aeabi_dmul+0x8e>
 8000e5e:	220c      	movs	r2, #12
 8000e60:	001d      	movs	r5, r3
 8000e62:	2303      	movs	r3, #3
 8000e64:	4681      	mov	r9, r0
 8000e66:	4690      	mov	r8, r2
 8000e68:	9302      	str	r3, [sp, #8]
 8000e6a:	e6e3      	b.n	8000c34 <__aeabi_dmul+0x4c>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	469a      	mov	sl, r3
 8000e70:	3304      	adds	r3, #4
 8000e72:	4698      	mov	r8, r3
 8000e74:	3b03      	subs	r3, #3
 8000e76:	2500      	movs	r5, #0
 8000e78:	9302      	str	r3, [sp, #8]
 8000e7a:	e6db      	b.n	8000c34 <__aeabi_dmul+0x4c>
 8000e7c:	4642      	mov	r2, r8
 8000e7e:	3301      	adds	r3, #1
 8000e80:	431a      	orrs	r2, r3
 8000e82:	002b      	movs	r3, r5
 8000e84:	4690      	mov	r8, r2
 8000e86:	1c5a      	adds	r2, r3, #1
 8000e88:	9201      	str	r2, [sp, #4]
 8000e8a:	4642      	mov	r2, r8
 8000e8c:	2400      	movs	r4, #0
 8000e8e:	2000      	movs	r0, #0
 8000e90:	2601      	movs	r6, #1
 8000e92:	2a0a      	cmp	r2, #10
 8000e94:	dc00      	bgt.n	8000e98 <__aeabi_dmul+0x2b0>
 8000e96:	e6ea      	b.n	8000c6e <__aeabi_dmul+0x86>
 8000e98:	e72c      	b.n	8000cf4 <__aeabi_dmul+0x10c>
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	1ad2      	subs	r2, r2, r3
 8000e9e:	2a38      	cmp	r2, #56	@ 0x38
 8000ea0:	dd00      	ble.n	8000ea4 <__aeabi_dmul+0x2bc>
 8000ea2:	e6f4      	b.n	8000c8e <__aeabi_dmul+0xa6>
 8000ea4:	2a1f      	cmp	r2, #31
 8000ea6:	dc00      	bgt.n	8000eaa <__aeabi_dmul+0x2c2>
 8000ea8:	e12a      	b.n	8001100 <__aeabi_dmul+0x518>
 8000eaa:	211f      	movs	r1, #31
 8000eac:	4249      	negs	r1, r1
 8000eae:	1acb      	subs	r3, r1, r3
 8000eb0:	0021      	movs	r1, r4
 8000eb2:	40d9      	lsrs	r1, r3
 8000eb4:	000b      	movs	r3, r1
 8000eb6:	2a20      	cmp	r2, #32
 8000eb8:	d005      	beq.n	8000ec6 <__aeabi_dmul+0x2de>
 8000eba:	4a16      	ldr	r2, [pc, #88]	@ (8000f14 <__aeabi_dmul+0x32c>)
 8000ebc:	9d01      	ldr	r5, [sp, #4]
 8000ebe:	4694      	mov	ip, r2
 8000ec0:	4465      	add	r5, ip
 8000ec2:	40ac      	lsls	r4, r5
 8000ec4:	4320      	orrs	r0, r4
 8000ec6:	1e42      	subs	r2, r0, #1
 8000ec8:	4190      	sbcs	r0, r2
 8000eca:	4318      	orrs	r0, r3
 8000ecc:	2307      	movs	r3, #7
 8000ece:	0019      	movs	r1, r3
 8000ed0:	2400      	movs	r4, #0
 8000ed2:	4001      	ands	r1, r0
 8000ed4:	4203      	tst	r3, r0
 8000ed6:	d00c      	beq.n	8000ef2 <__aeabi_dmul+0x30a>
 8000ed8:	230f      	movs	r3, #15
 8000eda:	4003      	ands	r3, r0
 8000edc:	2b04      	cmp	r3, #4
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_dmul+0x2fa>
 8000ee0:	e140      	b.n	8001164 <__aeabi_dmul+0x57c>
 8000ee2:	1d03      	adds	r3, r0, #4
 8000ee4:	4283      	cmp	r3, r0
 8000ee6:	41a4      	sbcs	r4, r4
 8000ee8:	0018      	movs	r0, r3
 8000eea:	4264      	negs	r4, r4
 8000eec:	0761      	lsls	r1, r4, #29
 8000eee:	0264      	lsls	r4, r4, #9
 8000ef0:	0b24      	lsrs	r4, r4, #12
 8000ef2:	08c2      	lsrs	r2, r0, #3
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	e6cc      	b.n	8000c94 <__aeabi_dmul+0xac>
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	000007ff 	.word	0x000007ff
 8000f00:	fffffc01 	.word	0xfffffc01
 8000f04:	000003ff 	.word	0x000003ff
 8000f08:	feffffff 	.word	0xfeffffff
 8000f0c:	000007fe 	.word	0x000007fe
 8000f10:	fffffc0d 	.word	0xfffffc0d
 8000f14:	0000043e 	.word	0x0000043e
 8000f18:	4649      	mov	r1, r9
 8000f1a:	464a      	mov	r2, r9
 8000f1c:	0409      	lsls	r1, r1, #16
 8000f1e:	0c09      	lsrs	r1, r1, #16
 8000f20:	000d      	movs	r5, r1
 8000f22:	0c16      	lsrs	r6, r2, #16
 8000f24:	0c02      	lsrs	r2, r0, #16
 8000f26:	0400      	lsls	r0, r0, #16
 8000f28:	0c00      	lsrs	r0, r0, #16
 8000f2a:	4345      	muls	r5, r0
 8000f2c:	46ac      	mov	ip, r5
 8000f2e:	0005      	movs	r5, r0
 8000f30:	4375      	muls	r5, r6
 8000f32:	46a8      	mov	r8, r5
 8000f34:	0015      	movs	r5, r2
 8000f36:	000f      	movs	r7, r1
 8000f38:	4375      	muls	r5, r6
 8000f3a:	9200      	str	r2, [sp, #0]
 8000f3c:	9502      	str	r5, [sp, #8]
 8000f3e:	002a      	movs	r2, r5
 8000f40:	9d00      	ldr	r5, [sp, #0]
 8000f42:	436f      	muls	r7, r5
 8000f44:	4665      	mov	r5, ip
 8000f46:	0c2d      	lsrs	r5, r5, #16
 8000f48:	46a9      	mov	r9, r5
 8000f4a:	4447      	add	r7, r8
 8000f4c:	444f      	add	r7, r9
 8000f4e:	45b8      	cmp	r8, r7
 8000f50:	d905      	bls.n	8000f5e <__aeabi_dmul+0x376>
 8000f52:	0015      	movs	r5, r2
 8000f54:	2280      	movs	r2, #128	@ 0x80
 8000f56:	0252      	lsls	r2, r2, #9
 8000f58:	4690      	mov	r8, r2
 8000f5a:	4445      	add	r5, r8
 8000f5c:	9502      	str	r5, [sp, #8]
 8000f5e:	0c3d      	lsrs	r5, r7, #16
 8000f60:	9503      	str	r5, [sp, #12]
 8000f62:	4665      	mov	r5, ip
 8000f64:	042d      	lsls	r5, r5, #16
 8000f66:	043f      	lsls	r7, r7, #16
 8000f68:	0c2d      	lsrs	r5, r5, #16
 8000f6a:	46ac      	mov	ip, r5
 8000f6c:	003d      	movs	r5, r7
 8000f6e:	4465      	add	r5, ip
 8000f70:	9504      	str	r5, [sp, #16]
 8000f72:	0c25      	lsrs	r5, r4, #16
 8000f74:	0424      	lsls	r4, r4, #16
 8000f76:	0c24      	lsrs	r4, r4, #16
 8000f78:	46ac      	mov	ip, r5
 8000f7a:	0025      	movs	r5, r4
 8000f7c:	4375      	muls	r5, r6
 8000f7e:	46a8      	mov	r8, r5
 8000f80:	4665      	mov	r5, ip
 8000f82:	000f      	movs	r7, r1
 8000f84:	4369      	muls	r1, r5
 8000f86:	4441      	add	r1, r8
 8000f88:	4689      	mov	r9, r1
 8000f8a:	4367      	muls	r7, r4
 8000f8c:	0c39      	lsrs	r1, r7, #16
 8000f8e:	4449      	add	r1, r9
 8000f90:	436e      	muls	r6, r5
 8000f92:	4588      	cmp	r8, r1
 8000f94:	d903      	bls.n	8000f9e <__aeabi_dmul+0x3b6>
 8000f96:	2280      	movs	r2, #128	@ 0x80
 8000f98:	0252      	lsls	r2, r2, #9
 8000f9a:	4690      	mov	r8, r2
 8000f9c:	4446      	add	r6, r8
 8000f9e:	0c0d      	lsrs	r5, r1, #16
 8000fa0:	46a8      	mov	r8, r5
 8000fa2:	0035      	movs	r5, r6
 8000fa4:	4445      	add	r5, r8
 8000fa6:	9505      	str	r5, [sp, #20]
 8000fa8:	9d03      	ldr	r5, [sp, #12]
 8000faa:	043f      	lsls	r7, r7, #16
 8000fac:	46a8      	mov	r8, r5
 8000fae:	0c3f      	lsrs	r7, r7, #16
 8000fb0:	0409      	lsls	r1, r1, #16
 8000fb2:	19c9      	adds	r1, r1, r7
 8000fb4:	4488      	add	r8, r1
 8000fb6:	4645      	mov	r5, r8
 8000fb8:	9503      	str	r5, [sp, #12]
 8000fba:	4655      	mov	r5, sl
 8000fbc:	042e      	lsls	r6, r5, #16
 8000fbe:	0c36      	lsrs	r6, r6, #16
 8000fc0:	0c2f      	lsrs	r7, r5, #16
 8000fc2:	0035      	movs	r5, r6
 8000fc4:	4345      	muls	r5, r0
 8000fc6:	4378      	muls	r0, r7
 8000fc8:	4681      	mov	r9, r0
 8000fca:	0038      	movs	r0, r7
 8000fcc:	46a8      	mov	r8, r5
 8000fce:	0c2d      	lsrs	r5, r5, #16
 8000fd0:	46aa      	mov	sl, r5
 8000fd2:	9a00      	ldr	r2, [sp, #0]
 8000fd4:	4350      	muls	r0, r2
 8000fd6:	4372      	muls	r2, r6
 8000fd8:	444a      	add	r2, r9
 8000fda:	4452      	add	r2, sl
 8000fdc:	4591      	cmp	r9, r2
 8000fde:	d903      	bls.n	8000fe8 <__aeabi_dmul+0x400>
 8000fe0:	2580      	movs	r5, #128	@ 0x80
 8000fe2:	026d      	lsls	r5, r5, #9
 8000fe4:	46a9      	mov	r9, r5
 8000fe6:	4448      	add	r0, r9
 8000fe8:	0c15      	lsrs	r5, r2, #16
 8000fea:	46a9      	mov	r9, r5
 8000fec:	4645      	mov	r5, r8
 8000fee:	042d      	lsls	r5, r5, #16
 8000ff0:	0c2d      	lsrs	r5, r5, #16
 8000ff2:	46a8      	mov	r8, r5
 8000ff4:	4665      	mov	r5, ip
 8000ff6:	437d      	muls	r5, r7
 8000ff8:	0412      	lsls	r2, r2, #16
 8000ffa:	4448      	add	r0, r9
 8000ffc:	4490      	add	r8, r2
 8000ffe:	46a9      	mov	r9, r5
 8001000:	0032      	movs	r2, r6
 8001002:	4665      	mov	r5, ip
 8001004:	4362      	muls	r2, r4
 8001006:	436e      	muls	r6, r5
 8001008:	437c      	muls	r4, r7
 800100a:	0c17      	lsrs	r7, r2, #16
 800100c:	1936      	adds	r6, r6, r4
 800100e:	19bf      	adds	r7, r7, r6
 8001010:	42bc      	cmp	r4, r7
 8001012:	d903      	bls.n	800101c <__aeabi_dmul+0x434>
 8001014:	2480      	movs	r4, #128	@ 0x80
 8001016:	0264      	lsls	r4, r4, #9
 8001018:	46a4      	mov	ip, r4
 800101a:	44e1      	add	r9, ip
 800101c:	9c02      	ldr	r4, [sp, #8]
 800101e:	9e03      	ldr	r6, [sp, #12]
 8001020:	46a4      	mov	ip, r4
 8001022:	9d05      	ldr	r5, [sp, #20]
 8001024:	4466      	add	r6, ip
 8001026:	428e      	cmp	r6, r1
 8001028:	4189      	sbcs	r1, r1
 800102a:	46ac      	mov	ip, r5
 800102c:	0412      	lsls	r2, r2, #16
 800102e:	043c      	lsls	r4, r7, #16
 8001030:	0c12      	lsrs	r2, r2, #16
 8001032:	18a2      	adds	r2, r4, r2
 8001034:	4462      	add	r2, ip
 8001036:	4249      	negs	r1, r1
 8001038:	1854      	adds	r4, r2, r1
 800103a:	4446      	add	r6, r8
 800103c:	46a4      	mov	ip, r4
 800103e:	4546      	cmp	r6, r8
 8001040:	41a4      	sbcs	r4, r4
 8001042:	4682      	mov	sl, r0
 8001044:	4264      	negs	r4, r4
 8001046:	46a0      	mov	r8, r4
 8001048:	42aa      	cmp	r2, r5
 800104a:	4192      	sbcs	r2, r2
 800104c:	458c      	cmp	ip, r1
 800104e:	4189      	sbcs	r1, r1
 8001050:	44e2      	add	sl, ip
 8001052:	44d0      	add	r8, sl
 8001054:	4249      	negs	r1, r1
 8001056:	4252      	negs	r2, r2
 8001058:	430a      	orrs	r2, r1
 800105a:	45a0      	cmp	r8, r4
 800105c:	41a4      	sbcs	r4, r4
 800105e:	4582      	cmp	sl, r0
 8001060:	4189      	sbcs	r1, r1
 8001062:	4264      	negs	r4, r4
 8001064:	4249      	negs	r1, r1
 8001066:	430c      	orrs	r4, r1
 8001068:	4641      	mov	r1, r8
 800106a:	0c3f      	lsrs	r7, r7, #16
 800106c:	19d2      	adds	r2, r2, r7
 800106e:	1912      	adds	r2, r2, r4
 8001070:	0dcc      	lsrs	r4, r1, #23
 8001072:	9904      	ldr	r1, [sp, #16]
 8001074:	0270      	lsls	r0, r6, #9
 8001076:	4308      	orrs	r0, r1
 8001078:	1e41      	subs	r1, r0, #1
 800107a:	4188      	sbcs	r0, r1
 800107c:	4641      	mov	r1, r8
 800107e:	444a      	add	r2, r9
 8001080:	0df6      	lsrs	r6, r6, #23
 8001082:	0252      	lsls	r2, r2, #9
 8001084:	4330      	orrs	r0, r6
 8001086:	0249      	lsls	r1, r1, #9
 8001088:	4314      	orrs	r4, r2
 800108a:	4308      	orrs	r0, r1
 800108c:	01d2      	lsls	r2, r2, #7
 800108e:	d535      	bpl.n	80010fc <__aeabi_dmul+0x514>
 8001090:	2201      	movs	r2, #1
 8001092:	0843      	lsrs	r3, r0, #1
 8001094:	4002      	ands	r2, r0
 8001096:	4313      	orrs	r3, r2
 8001098:	07e0      	lsls	r0, r4, #31
 800109a:	4318      	orrs	r0, r3
 800109c:	0864      	lsrs	r4, r4, #1
 800109e:	e634      	b.n	8000d0a <__aeabi_dmul+0x122>
 80010a0:	9b00      	ldr	r3, [sp, #0]
 80010a2:	46a2      	mov	sl, r4
 80010a4:	469b      	mov	fp, r3
 80010a6:	4681      	mov	r9, r0
 80010a8:	2480      	movs	r4, #128	@ 0x80
 80010aa:	4653      	mov	r3, sl
 80010ac:	0324      	lsls	r4, r4, #12
 80010ae:	431c      	orrs	r4, r3
 80010b0:	0324      	lsls	r4, r4, #12
 80010b2:	464a      	mov	r2, r9
 80010b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001170 <__aeabi_dmul+0x588>)
 80010b6:	0b24      	lsrs	r4, r4, #12
 80010b8:	e5ec      	b.n	8000c94 <__aeabi_dmul+0xac>
 80010ba:	f000 fcbb 	bl	8001a34 <__clzsi2>
 80010be:	2315      	movs	r3, #21
 80010c0:	469c      	mov	ip, r3
 80010c2:	4484      	add	ip, r0
 80010c4:	0002      	movs	r2, r0
 80010c6:	4663      	mov	r3, ip
 80010c8:	3220      	adds	r2, #32
 80010ca:	2b1c      	cmp	r3, #28
 80010cc:	dc00      	bgt.n	80010d0 <__aeabi_dmul+0x4e8>
 80010ce:	e684      	b.n	8000dda <__aeabi_dmul+0x1f2>
 80010d0:	2300      	movs	r3, #0
 80010d2:	4699      	mov	r9, r3
 80010d4:	0023      	movs	r3, r4
 80010d6:	3808      	subs	r0, #8
 80010d8:	4083      	lsls	r3, r0
 80010da:	469a      	mov	sl, r3
 80010dc:	e68e      	b.n	8000dfc <__aeabi_dmul+0x214>
 80010de:	f000 fca9 	bl	8001a34 <__clzsi2>
 80010e2:	0002      	movs	r2, r0
 80010e4:	0003      	movs	r3, r0
 80010e6:	3215      	adds	r2, #21
 80010e8:	3320      	adds	r3, #32
 80010ea:	2a1c      	cmp	r2, #28
 80010ec:	dc00      	bgt.n	80010f0 <__aeabi_dmul+0x508>
 80010ee:	e64e      	b.n	8000d8e <__aeabi_dmul+0x1a6>
 80010f0:	0002      	movs	r2, r0
 80010f2:	0034      	movs	r4, r6
 80010f4:	3a08      	subs	r2, #8
 80010f6:	2000      	movs	r0, #0
 80010f8:	4094      	lsls	r4, r2
 80010fa:	e652      	b.n	8000da2 <__aeabi_dmul+0x1ba>
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	e604      	b.n	8000d0a <__aeabi_dmul+0x122>
 8001100:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <__aeabi_dmul+0x58c>)
 8001102:	0021      	movs	r1, r4
 8001104:	469c      	mov	ip, r3
 8001106:	0003      	movs	r3, r0
 8001108:	9d01      	ldr	r5, [sp, #4]
 800110a:	40d3      	lsrs	r3, r2
 800110c:	4465      	add	r5, ip
 800110e:	40a9      	lsls	r1, r5
 8001110:	4319      	orrs	r1, r3
 8001112:	0003      	movs	r3, r0
 8001114:	40ab      	lsls	r3, r5
 8001116:	1e58      	subs	r0, r3, #1
 8001118:	4183      	sbcs	r3, r0
 800111a:	4319      	orrs	r1, r3
 800111c:	0008      	movs	r0, r1
 800111e:	40d4      	lsrs	r4, r2
 8001120:	074b      	lsls	r3, r1, #29
 8001122:	d009      	beq.n	8001138 <__aeabi_dmul+0x550>
 8001124:	230f      	movs	r3, #15
 8001126:	400b      	ands	r3, r1
 8001128:	2b04      	cmp	r3, #4
 800112a:	d005      	beq.n	8001138 <__aeabi_dmul+0x550>
 800112c:	1d0b      	adds	r3, r1, #4
 800112e:	428b      	cmp	r3, r1
 8001130:	4180      	sbcs	r0, r0
 8001132:	4240      	negs	r0, r0
 8001134:	1824      	adds	r4, r4, r0
 8001136:	0018      	movs	r0, r3
 8001138:	0223      	lsls	r3, r4, #8
 800113a:	d400      	bmi.n	800113e <__aeabi_dmul+0x556>
 800113c:	e6d6      	b.n	8000eec <__aeabi_dmul+0x304>
 800113e:	2301      	movs	r3, #1
 8001140:	2400      	movs	r4, #0
 8001142:	2200      	movs	r2, #0
 8001144:	e5a6      	b.n	8000c94 <__aeabi_dmul+0xac>
 8001146:	290f      	cmp	r1, #15
 8001148:	d1aa      	bne.n	80010a0 <__aeabi_dmul+0x4b8>
 800114a:	2380      	movs	r3, #128	@ 0x80
 800114c:	4652      	mov	r2, sl
 800114e:	031b      	lsls	r3, r3, #12
 8001150:	421a      	tst	r2, r3
 8001152:	d0a9      	beq.n	80010a8 <__aeabi_dmul+0x4c0>
 8001154:	421c      	tst	r4, r3
 8001156:	d1a7      	bne.n	80010a8 <__aeabi_dmul+0x4c0>
 8001158:	431c      	orrs	r4, r3
 800115a:	9b00      	ldr	r3, [sp, #0]
 800115c:	0002      	movs	r2, r0
 800115e:	469b      	mov	fp, r3
 8001160:	4b03      	ldr	r3, [pc, #12]	@ (8001170 <__aeabi_dmul+0x588>)
 8001162:	e597      	b.n	8000c94 <__aeabi_dmul+0xac>
 8001164:	2400      	movs	r4, #0
 8001166:	e6c1      	b.n	8000eec <__aeabi_dmul+0x304>
 8001168:	2400      	movs	r4, #0
 800116a:	4b01      	ldr	r3, [pc, #4]	@ (8001170 <__aeabi_dmul+0x588>)
 800116c:	0022      	movs	r2, r4
 800116e:	e591      	b.n	8000c94 <__aeabi_dmul+0xac>
 8001170:	000007ff 	.word	0x000007ff
 8001174:	0000041e 	.word	0x0000041e

08001178 <__aeabi_dsub>:
 8001178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117a:	464e      	mov	r6, r9
 800117c:	4645      	mov	r5, r8
 800117e:	46de      	mov	lr, fp
 8001180:	4657      	mov	r7, sl
 8001182:	b5e0      	push	{r5, r6, r7, lr}
 8001184:	b085      	sub	sp, #20
 8001186:	9000      	str	r0, [sp, #0]
 8001188:	9101      	str	r1, [sp, #4]
 800118a:	030c      	lsls	r4, r1, #12
 800118c:	004f      	lsls	r7, r1, #1
 800118e:	0fce      	lsrs	r6, r1, #31
 8001190:	0a61      	lsrs	r1, r4, #9
 8001192:	9c00      	ldr	r4, [sp, #0]
 8001194:	46b0      	mov	r8, r6
 8001196:	0f64      	lsrs	r4, r4, #29
 8001198:	430c      	orrs	r4, r1
 800119a:	9900      	ldr	r1, [sp, #0]
 800119c:	0d7f      	lsrs	r7, r7, #21
 800119e:	00c8      	lsls	r0, r1, #3
 80011a0:	0011      	movs	r1, r2
 80011a2:	001a      	movs	r2, r3
 80011a4:	031b      	lsls	r3, r3, #12
 80011a6:	469c      	mov	ip, r3
 80011a8:	9100      	str	r1, [sp, #0]
 80011aa:	9201      	str	r2, [sp, #4]
 80011ac:	0051      	lsls	r1, r2, #1
 80011ae:	0d4b      	lsrs	r3, r1, #21
 80011b0:	4699      	mov	r9, r3
 80011b2:	9b01      	ldr	r3, [sp, #4]
 80011b4:	9d00      	ldr	r5, [sp, #0]
 80011b6:	0fd9      	lsrs	r1, r3, #31
 80011b8:	4663      	mov	r3, ip
 80011ba:	0f6a      	lsrs	r2, r5, #29
 80011bc:	0a5b      	lsrs	r3, r3, #9
 80011be:	4313      	orrs	r3, r2
 80011c0:	00ea      	lsls	r2, r5, #3
 80011c2:	4694      	mov	ip, r2
 80011c4:	4693      	mov	fp, r2
 80011c6:	4ac1      	ldr	r2, [pc, #772]	@ (80014cc <__aeabi_dsub+0x354>)
 80011c8:	9003      	str	r0, [sp, #12]
 80011ca:	9302      	str	r3, [sp, #8]
 80011cc:	4591      	cmp	r9, r2
 80011ce:	d100      	bne.n	80011d2 <__aeabi_dsub+0x5a>
 80011d0:	e0cd      	b.n	800136e <__aeabi_dsub+0x1f6>
 80011d2:	2501      	movs	r5, #1
 80011d4:	4069      	eors	r1, r5
 80011d6:	464d      	mov	r5, r9
 80011d8:	1b7d      	subs	r5, r7, r5
 80011da:	46aa      	mov	sl, r5
 80011dc:	428e      	cmp	r6, r1
 80011de:	d100      	bne.n	80011e2 <__aeabi_dsub+0x6a>
 80011e0:	e080      	b.n	80012e4 <__aeabi_dsub+0x16c>
 80011e2:	2d00      	cmp	r5, #0
 80011e4:	dc00      	bgt.n	80011e8 <__aeabi_dsub+0x70>
 80011e6:	e335      	b.n	8001854 <__aeabi_dsub+0x6dc>
 80011e8:	4649      	mov	r1, r9
 80011ea:	2900      	cmp	r1, #0
 80011ec:	d100      	bne.n	80011f0 <__aeabi_dsub+0x78>
 80011ee:	e0df      	b.n	80013b0 <__aeabi_dsub+0x238>
 80011f0:	4297      	cmp	r7, r2
 80011f2:	d100      	bne.n	80011f6 <__aeabi_dsub+0x7e>
 80011f4:	e194      	b.n	8001520 <__aeabi_dsub+0x3a8>
 80011f6:	4652      	mov	r2, sl
 80011f8:	2501      	movs	r5, #1
 80011fa:	2a38      	cmp	r2, #56	@ 0x38
 80011fc:	dc19      	bgt.n	8001232 <__aeabi_dsub+0xba>
 80011fe:	2280      	movs	r2, #128	@ 0x80
 8001200:	9b02      	ldr	r3, [sp, #8]
 8001202:	0412      	lsls	r2, r2, #16
 8001204:	4313      	orrs	r3, r2
 8001206:	9302      	str	r3, [sp, #8]
 8001208:	4652      	mov	r2, sl
 800120a:	2a1f      	cmp	r2, #31
 800120c:	dd00      	ble.n	8001210 <__aeabi_dsub+0x98>
 800120e:	e1e3      	b.n	80015d8 <__aeabi_dsub+0x460>
 8001210:	4653      	mov	r3, sl
 8001212:	2220      	movs	r2, #32
 8001214:	4661      	mov	r1, ip
 8001216:	9d02      	ldr	r5, [sp, #8]
 8001218:	1ad2      	subs	r2, r2, r3
 800121a:	4095      	lsls	r5, r2
 800121c:	40d9      	lsrs	r1, r3
 800121e:	430d      	orrs	r5, r1
 8001220:	4661      	mov	r1, ip
 8001222:	4091      	lsls	r1, r2
 8001224:	000a      	movs	r2, r1
 8001226:	1e51      	subs	r1, r2, #1
 8001228:	418a      	sbcs	r2, r1
 800122a:	4315      	orrs	r5, r2
 800122c:	9a02      	ldr	r2, [sp, #8]
 800122e:	40da      	lsrs	r2, r3
 8001230:	1aa4      	subs	r4, r4, r2
 8001232:	1b45      	subs	r5, r0, r5
 8001234:	42a8      	cmp	r0, r5
 8001236:	4180      	sbcs	r0, r0
 8001238:	4240      	negs	r0, r0
 800123a:	1a24      	subs	r4, r4, r0
 800123c:	0223      	lsls	r3, r4, #8
 800123e:	d400      	bmi.n	8001242 <__aeabi_dsub+0xca>
 8001240:	e13d      	b.n	80014be <__aeabi_dsub+0x346>
 8001242:	0264      	lsls	r4, r4, #9
 8001244:	0a64      	lsrs	r4, r4, #9
 8001246:	2c00      	cmp	r4, #0
 8001248:	d100      	bne.n	800124c <__aeabi_dsub+0xd4>
 800124a:	e147      	b.n	80014dc <__aeabi_dsub+0x364>
 800124c:	0020      	movs	r0, r4
 800124e:	f000 fbf1 	bl	8001a34 <__clzsi2>
 8001252:	0003      	movs	r3, r0
 8001254:	3b08      	subs	r3, #8
 8001256:	2120      	movs	r1, #32
 8001258:	0028      	movs	r0, r5
 800125a:	1aca      	subs	r2, r1, r3
 800125c:	40d0      	lsrs	r0, r2
 800125e:	409c      	lsls	r4, r3
 8001260:	0002      	movs	r2, r0
 8001262:	409d      	lsls	r5, r3
 8001264:	4322      	orrs	r2, r4
 8001266:	429f      	cmp	r7, r3
 8001268:	dd00      	ble.n	800126c <__aeabi_dsub+0xf4>
 800126a:	e177      	b.n	800155c <__aeabi_dsub+0x3e4>
 800126c:	1bd8      	subs	r0, r3, r7
 800126e:	3001      	adds	r0, #1
 8001270:	1a09      	subs	r1, r1, r0
 8001272:	002c      	movs	r4, r5
 8001274:	408d      	lsls	r5, r1
 8001276:	40c4      	lsrs	r4, r0
 8001278:	1e6b      	subs	r3, r5, #1
 800127a:	419d      	sbcs	r5, r3
 800127c:	0013      	movs	r3, r2
 800127e:	40c2      	lsrs	r2, r0
 8001280:	408b      	lsls	r3, r1
 8001282:	4325      	orrs	r5, r4
 8001284:	2700      	movs	r7, #0
 8001286:	0014      	movs	r4, r2
 8001288:	431d      	orrs	r5, r3
 800128a:	076b      	lsls	r3, r5, #29
 800128c:	d009      	beq.n	80012a2 <__aeabi_dsub+0x12a>
 800128e:	230f      	movs	r3, #15
 8001290:	402b      	ands	r3, r5
 8001292:	2b04      	cmp	r3, #4
 8001294:	d005      	beq.n	80012a2 <__aeabi_dsub+0x12a>
 8001296:	1d2b      	adds	r3, r5, #4
 8001298:	42ab      	cmp	r3, r5
 800129a:	41ad      	sbcs	r5, r5
 800129c:	426d      	negs	r5, r5
 800129e:	1964      	adds	r4, r4, r5
 80012a0:	001d      	movs	r5, r3
 80012a2:	0223      	lsls	r3, r4, #8
 80012a4:	d400      	bmi.n	80012a8 <__aeabi_dsub+0x130>
 80012a6:	e140      	b.n	800152a <__aeabi_dsub+0x3b2>
 80012a8:	4a88      	ldr	r2, [pc, #544]	@ (80014cc <__aeabi_dsub+0x354>)
 80012aa:	3701      	adds	r7, #1
 80012ac:	4297      	cmp	r7, r2
 80012ae:	d100      	bne.n	80012b2 <__aeabi_dsub+0x13a>
 80012b0:	e101      	b.n	80014b6 <__aeabi_dsub+0x33e>
 80012b2:	2601      	movs	r6, #1
 80012b4:	4643      	mov	r3, r8
 80012b6:	4986      	ldr	r1, [pc, #536]	@ (80014d0 <__aeabi_dsub+0x358>)
 80012b8:	08ed      	lsrs	r5, r5, #3
 80012ba:	4021      	ands	r1, r4
 80012bc:	074a      	lsls	r2, r1, #29
 80012be:	432a      	orrs	r2, r5
 80012c0:	057c      	lsls	r4, r7, #21
 80012c2:	024d      	lsls	r5, r1, #9
 80012c4:	0b2d      	lsrs	r5, r5, #12
 80012c6:	0d64      	lsrs	r4, r4, #21
 80012c8:	401e      	ands	r6, r3
 80012ca:	0524      	lsls	r4, r4, #20
 80012cc:	432c      	orrs	r4, r5
 80012ce:	07f6      	lsls	r6, r6, #31
 80012d0:	4334      	orrs	r4, r6
 80012d2:	0010      	movs	r0, r2
 80012d4:	0021      	movs	r1, r4
 80012d6:	b005      	add	sp, #20
 80012d8:	bcf0      	pop	{r4, r5, r6, r7}
 80012da:	46bb      	mov	fp, r7
 80012dc:	46b2      	mov	sl, r6
 80012de:	46a9      	mov	r9, r5
 80012e0:	46a0      	mov	r8, r4
 80012e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012e4:	2d00      	cmp	r5, #0
 80012e6:	dc00      	bgt.n	80012ea <__aeabi_dsub+0x172>
 80012e8:	e2d0      	b.n	800188c <__aeabi_dsub+0x714>
 80012ea:	4649      	mov	r1, r9
 80012ec:	2900      	cmp	r1, #0
 80012ee:	d000      	beq.n	80012f2 <__aeabi_dsub+0x17a>
 80012f0:	e0d4      	b.n	800149c <__aeabi_dsub+0x324>
 80012f2:	4661      	mov	r1, ip
 80012f4:	9b02      	ldr	r3, [sp, #8]
 80012f6:	4319      	orrs	r1, r3
 80012f8:	d100      	bne.n	80012fc <__aeabi_dsub+0x184>
 80012fa:	e12b      	b.n	8001554 <__aeabi_dsub+0x3dc>
 80012fc:	1e69      	subs	r1, r5, #1
 80012fe:	2d01      	cmp	r5, #1
 8001300:	d100      	bne.n	8001304 <__aeabi_dsub+0x18c>
 8001302:	e1d9      	b.n	80016b8 <__aeabi_dsub+0x540>
 8001304:	4295      	cmp	r5, r2
 8001306:	d100      	bne.n	800130a <__aeabi_dsub+0x192>
 8001308:	e10a      	b.n	8001520 <__aeabi_dsub+0x3a8>
 800130a:	2501      	movs	r5, #1
 800130c:	2938      	cmp	r1, #56	@ 0x38
 800130e:	dc17      	bgt.n	8001340 <__aeabi_dsub+0x1c8>
 8001310:	468a      	mov	sl, r1
 8001312:	4653      	mov	r3, sl
 8001314:	2b1f      	cmp	r3, #31
 8001316:	dd00      	ble.n	800131a <__aeabi_dsub+0x1a2>
 8001318:	e1e7      	b.n	80016ea <__aeabi_dsub+0x572>
 800131a:	2220      	movs	r2, #32
 800131c:	1ad2      	subs	r2, r2, r3
 800131e:	9b02      	ldr	r3, [sp, #8]
 8001320:	4661      	mov	r1, ip
 8001322:	4093      	lsls	r3, r2
 8001324:	001d      	movs	r5, r3
 8001326:	4653      	mov	r3, sl
 8001328:	40d9      	lsrs	r1, r3
 800132a:	4663      	mov	r3, ip
 800132c:	4093      	lsls	r3, r2
 800132e:	001a      	movs	r2, r3
 8001330:	430d      	orrs	r5, r1
 8001332:	1e51      	subs	r1, r2, #1
 8001334:	418a      	sbcs	r2, r1
 8001336:	4653      	mov	r3, sl
 8001338:	4315      	orrs	r5, r2
 800133a:	9a02      	ldr	r2, [sp, #8]
 800133c:	40da      	lsrs	r2, r3
 800133e:	18a4      	adds	r4, r4, r2
 8001340:	182d      	adds	r5, r5, r0
 8001342:	4285      	cmp	r5, r0
 8001344:	4180      	sbcs	r0, r0
 8001346:	4240      	negs	r0, r0
 8001348:	1824      	adds	r4, r4, r0
 800134a:	0223      	lsls	r3, r4, #8
 800134c:	d400      	bmi.n	8001350 <__aeabi_dsub+0x1d8>
 800134e:	e0b6      	b.n	80014be <__aeabi_dsub+0x346>
 8001350:	4b5e      	ldr	r3, [pc, #376]	@ (80014cc <__aeabi_dsub+0x354>)
 8001352:	3701      	adds	r7, #1
 8001354:	429f      	cmp	r7, r3
 8001356:	d100      	bne.n	800135a <__aeabi_dsub+0x1e2>
 8001358:	e0ad      	b.n	80014b6 <__aeabi_dsub+0x33e>
 800135a:	2101      	movs	r1, #1
 800135c:	4b5c      	ldr	r3, [pc, #368]	@ (80014d0 <__aeabi_dsub+0x358>)
 800135e:	086a      	lsrs	r2, r5, #1
 8001360:	401c      	ands	r4, r3
 8001362:	4029      	ands	r1, r5
 8001364:	430a      	orrs	r2, r1
 8001366:	07e5      	lsls	r5, r4, #31
 8001368:	4315      	orrs	r5, r2
 800136a:	0864      	lsrs	r4, r4, #1
 800136c:	e78d      	b.n	800128a <__aeabi_dsub+0x112>
 800136e:	4a59      	ldr	r2, [pc, #356]	@ (80014d4 <__aeabi_dsub+0x35c>)
 8001370:	9b02      	ldr	r3, [sp, #8]
 8001372:	4692      	mov	sl, r2
 8001374:	4662      	mov	r2, ip
 8001376:	44ba      	add	sl, r7
 8001378:	431a      	orrs	r2, r3
 800137a:	d02c      	beq.n	80013d6 <__aeabi_dsub+0x25e>
 800137c:	428e      	cmp	r6, r1
 800137e:	d02e      	beq.n	80013de <__aeabi_dsub+0x266>
 8001380:	4652      	mov	r2, sl
 8001382:	2a00      	cmp	r2, #0
 8001384:	d060      	beq.n	8001448 <__aeabi_dsub+0x2d0>
 8001386:	2f00      	cmp	r7, #0
 8001388:	d100      	bne.n	800138c <__aeabi_dsub+0x214>
 800138a:	e0db      	b.n	8001544 <__aeabi_dsub+0x3cc>
 800138c:	4663      	mov	r3, ip
 800138e:	000e      	movs	r6, r1
 8001390:	9c02      	ldr	r4, [sp, #8]
 8001392:	08d8      	lsrs	r0, r3, #3
 8001394:	0762      	lsls	r2, r4, #29
 8001396:	4302      	orrs	r2, r0
 8001398:	08e4      	lsrs	r4, r4, #3
 800139a:	0013      	movs	r3, r2
 800139c:	4323      	orrs	r3, r4
 800139e:	d100      	bne.n	80013a2 <__aeabi_dsub+0x22a>
 80013a0:	e254      	b.n	800184c <__aeabi_dsub+0x6d4>
 80013a2:	2580      	movs	r5, #128	@ 0x80
 80013a4:	032d      	lsls	r5, r5, #12
 80013a6:	4325      	orrs	r5, r4
 80013a8:	032d      	lsls	r5, r5, #12
 80013aa:	4c48      	ldr	r4, [pc, #288]	@ (80014cc <__aeabi_dsub+0x354>)
 80013ac:	0b2d      	lsrs	r5, r5, #12
 80013ae:	e78c      	b.n	80012ca <__aeabi_dsub+0x152>
 80013b0:	4661      	mov	r1, ip
 80013b2:	9b02      	ldr	r3, [sp, #8]
 80013b4:	4319      	orrs	r1, r3
 80013b6:	d100      	bne.n	80013ba <__aeabi_dsub+0x242>
 80013b8:	e0cc      	b.n	8001554 <__aeabi_dsub+0x3dc>
 80013ba:	0029      	movs	r1, r5
 80013bc:	3901      	subs	r1, #1
 80013be:	2d01      	cmp	r5, #1
 80013c0:	d100      	bne.n	80013c4 <__aeabi_dsub+0x24c>
 80013c2:	e188      	b.n	80016d6 <__aeabi_dsub+0x55e>
 80013c4:	4295      	cmp	r5, r2
 80013c6:	d100      	bne.n	80013ca <__aeabi_dsub+0x252>
 80013c8:	e0aa      	b.n	8001520 <__aeabi_dsub+0x3a8>
 80013ca:	2501      	movs	r5, #1
 80013cc:	2938      	cmp	r1, #56	@ 0x38
 80013ce:	dd00      	ble.n	80013d2 <__aeabi_dsub+0x25a>
 80013d0:	e72f      	b.n	8001232 <__aeabi_dsub+0xba>
 80013d2:	468a      	mov	sl, r1
 80013d4:	e718      	b.n	8001208 <__aeabi_dsub+0x90>
 80013d6:	2201      	movs	r2, #1
 80013d8:	4051      	eors	r1, r2
 80013da:	428e      	cmp	r6, r1
 80013dc:	d1d0      	bne.n	8001380 <__aeabi_dsub+0x208>
 80013de:	4653      	mov	r3, sl
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dsub+0x26e>
 80013e4:	e0be      	b.n	8001564 <__aeabi_dsub+0x3ec>
 80013e6:	2f00      	cmp	r7, #0
 80013e8:	d000      	beq.n	80013ec <__aeabi_dsub+0x274>
 80013ea:	e138      	b.n	800165e <__aeabi_dsub+0x4e6>
 80013ec:	46ca      	mov	sl, r9
 80013ee:	0022      	movs	r2, r4
 80013f0:	4302      	orrs	r2, r0
 80013f2:	d100      	bne.n	80013f6 <__aeabi_dsub+0x27e>
 80013f4:	e1e2      	b.n	80017bc <__aeabi_dsub+0x644>
 80013f6:	4653      	mov	r3, sl
 80013f8:	1e59      	subs	r1, r3, #1
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d100      	bne.n	8001400 <__aeabi_dsub+0x288>
 80013fe:	e20d      	b.n	800181c <__aeabi_dsub+0x6a4>
 8001400:	4a32      	ldr	r2, [pc, #200]	@ (80014cc <__aeabi_dsub+0x354>)
 8001402:	4592      	cmp	sl, r2
 8001404:	d100      	bne.n	8001408 <__aeabi_dsub+0x290>
 8001406:	e1d2      	b.n	80017ae <__aeabi_dsub+0x636>
 8001408:	2701      	movs	r7, #1
 800140a:	2938      	cmp	r1, #56	@ 0x38
 800140c:	dc13      	bgt.n	8001436 <__aeabi_dsub+0x2be>
 800140e:	291f      	cmp	r1, #31
 8001410:	dd00      	ble.n	8001414 <__aeabi_dsub+0x29c>
 8001412:	e1ee      	b.n	80017f2 <__aeabi_dsub+0x67a>
 8001414:	2220      	movs	r2, #32
 8001416:	9b02      	ldr	r3, [sp, #8]
 8001418:	1a52      	subs	r2, r2, r1
 800141a:	0025      	movs	r5, r4
 800141c:	0007      	movs	r7, r0
 800141e:	469a      	mov	sl, r3
 8001420:	40cc      	lsrs	r4, r1
 8001422:	4090      	lsls	r0, r2
 8001424:	4095      	lsls	r5, r2
 8001426:	40cf      	lsrs	r7, r1
 8001428:	44a2      	add	sl, r4
 800142a:	1e42      	subs	r2, r0, #1
 800142c:	4190      	sbcs	r0, r2
 800142e:	4653      	mov	r3, sl
 8001430:	432f      	orrs	r7, r5
 8001432:	4307      	orrs	r7, r0
 8001434:	9302      	str	r3, [sp, #8]
 8001436:	003d      	movs	r5, r7
 8001438:	4465      	add	r5, ip
 800143a:	4565      	cmp	r5, ip
 800143c:	4192      	sbcs	r2, r2
 800143e:	9b02      	ldr	r3, [sp, #8]
 8001440:	4252      	negs	r2, r2
 8001442:	464f      	mov	r7, r9
 8001444:	18d4      	adds	r4, r2, r3
 8001446:	e780      	b.n	800134a <__aeabi_dsub+0x1d2>
 8001448:	4a23      	ldr	r2, [pc, #140]	@ (80014d8 <__aeabi_dsub+0x360>)
 800144a:	1c7d      	adds	r5, r7, #1
 800144c:	4215      	tst	r5, r2
 800144e:	d000      	beq.n	8001452 <__aeabi_dsub+0x2da>
 8001450:	e0aa      	b.n	80015a8 <__aeabi_dsub+0x430>
 8001452:	4662      	mov	r2, ip
 8001454:	0025      	movs	r5, r4
 8001456:	9b02      	ldr	r3, [sp, #8]
 8001458:	4305      	orrs	r5, r0
 800145a:	431a      	orrs	r2, r3
 800145c:	2f00      	cmp	r7, #0
 800145e:	d000      	beq.n	8001462 <__aeabi_dsub+0x2ea>
 8001460:	e0f5      	b.n	800164e <__aeabi_dsub+0x4d6>
 8001462:	2d00      	cmp	r5, #0
 8001464:	d100      	bne.n	8001468 <__aeabi_dsub+0x2f0>
 8001466:	e16b      	b.n	8001740 <__aeabi_dsub+0x5c8>
 8001468:	2a00      	cmp	r2, #0
 800146a:	d100      	bne.n	800146e <__aeabi_dsub+0x2f6>
 800146c:	e152      	b.n	8001714 <__aeabi_dsub+0x59c>
 800146e:	4663      	mov	r3, ip
 8001470:	1ac5      	subs	r5, r0, r3
 8001472:	9b02      	ldr	r3, [sp, #8]
 8001474:	1ae2      	subs	r2, r4, r3
 8001476:	42a8      	cmp	r0, r5
 8001478:	419b      	sbcs	r3, r3
 800147a:	425b      	negs	r3, r3
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	021a      	lsls	r2, r3, #8
 8001480:	d400      	bmi.n	8001484 <__aeabi_dsub+0x30c>
 8001482:	e1d5      	b.n	8001830 <__aeabi_dsub+0x6b8>
 8001484:	4663      	mov	r3, ip
 8001486:	1a1d      	subs	r5, r3, r0
 8001488:	45ac      	cmp	ip, r5
 800148a:	4192      	sbcs	r2, r2
 800148c:	2601      	movs	r6, #1
 800148e:	9b02      	ldr	r3, [sp, #8]
 8001490:	4252      	negs	r2, r2
 8001492:	1b1c      	subs	r4, r3, r4
 8001494:	4688      	mov	r8, r1
 8001496:	1aa4      	subs	r4, r4, r2
 8001498:	400e      	ands	r6, r1
 800149a:	e6f6      	b.n	800128a <__aeabi_dsub+0x112>
 800149c:	4297      	cmp	r7, r2
 800149e:	d03f      	beq.n	8001520 <__aeabi_dsub+0x3a8>
 80014a0:	4652      	mov	r2, sl
 80014a2:	2501      	movs	r5, #1
 80014a4:	2a38      	cmp	r2, #56	@ 0x38
 80014a6:	dd00      	ble.n	80014aa <__aeabi_dsub+0x332>
 80014a8:	e74a      	b.n	8001340 <__aeabi_dsub+0x1c8>
 80014aa:	2280      	movs	r2, #128	@ 0x80
 80014ac:	9b02      	ldr	r3, [sp, #8]
 80014ae:	0412      	lsls	r2, r2, #16
 80014b0:	4313      	orrs	r3, r2
 80014b2:	9302      	str	r3, [sp, #8]
 80014b4:	e72d      	b.n	8001312 <__aeabi_dsub+0x19a>
 80014b6:	003c      	movs	r4, r7
 80014b8:	2500      	movs	r5, #0
 80014ba:	2200      	movs	r2, #0
 80014bc:	e705      	b.n	80012ca <__aeabi_dsub+0x152>
 80014be:	2307      	movs	r3, #7
 80014c0:	402b      	ands	r3, r5
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d000      	beq.n	80014c8 <__aeabi_dsub+0x350>
 80014c6:	e6e2      	b.n	800128e <__aeabi_dsub+0x116>
 80014c8:	e06b      	b.n	80015a2 <__aeabi_dsub+0x42a>
 80014ca:	46c0      	nop			@ (mov r8, r8)
 80014cc:	000007ff 	.word	0x000007ff
 80014d0:	ff7fffff 	.word	0xff7fffff
 80014d4:	fffff801 	.word	0xfffff801
 80014d8:	000007fe 	.word	0x000007fe
 80014dc:	0028      	movs	r0, r5
 80014de:	f000 faa9 	bl	8001a34 <__clzsi2>
 80014e2:	0003      	movs	r3, r0
 80014e4:	3318      	adds	r3, #24
 80014e6:	2b1f      	cmp	r3, #31
 80014e8:	dc00      	bgt.n	80014ec <__aeabi_dsub+0x374>
 80014ea:	e6b4      	b.n	8001256 <__aeabi_dsub+0xde>
 80014ec:	002a      	movs	r2, r5
 80014ee:	3808      	subs	r0, #8
 80014f0:	4082      	lsls	r2, r0
 80014f2:	429f      	cmp	r7, r3
 80014f4:	dd00      	ble.n	80014f8 <__aeabi_dsub+0x380>
 80014f6:	e0b9      	b.n	800166c <__aeabi_dsub+0x4f4>
 80014f8:	1bdb      	subs	r3, r3, r7
 80014fa:	1c58      	adds	r0, r3, #1
 80014fc:	281f      	cmp	r0, #31
 80014fe:	dc00      	bgt.n	8001502 <__aeabi_dsub+0x38a>
 8001500:	e1a0      	b.n	8001844 <__aeabi_dsub+0x6cc>
 8001502:	0015      	movs	r5, r2
 8001504:	3b1f      	subs	r3, #31
 8001506:	40dd      	lsrs	r5, r3
 8001508:	2820      	cmp	r0, #32
 800150a:	d005      	beq.n	8001518 <__aeabi_dsub+0x3a0>
 800150c:	2340      	movs	r3, #64	@ 0x40
 800150e:	1a1b      	subs	r3, r3, r0
 8001510:	409a      	lsls	r2, r3
 8001512:	1e53      	subs	r3, r2, #1
 8001514:	419a      	sbcs	r2, r3
 8001516:	4315      	orrs	r5, r2
 8001518:	2307      	movs	r3, #7
 800151a:	2700      	movs	r7, #0
 800151c:	402b      	ands	r3, r5
 800151e:	e7d0      	b.n	80014c2 <__aeabi_dsub+0x34a>
 8001520:	08c0      	lsrs	r0, r0, #3
 8001522:	0762      	lsls	r2, r4, #29
 8001524:	4302      	orrs	r2, r0
 8001526:	08e4      	lsrs	r4, r4, #3
 8001528:	e737      	b.n	800139a <__aeabi_dsub+0x222>
 800152a:	08ea      	lsrs	r2, r5, #3
 800152c:	0763      	lsls	r3, r4, #29
 800152e:	431a      	orrs	r2, r3
 8001530:	4bd3      	ldr	r3, [pc, #844]	@ (8001880 <__aeabi_dsub+0x708>)
 8001532:	08e4      	lsrs	r4, r4, #3
 8001534:	429f      	cmp	r7, r3
 8001536:	d100      	bne.n	800153a <__aeabi_dsub+0x3c2>
 8001538:	e72f      	b.n	800139a <__aeabi_dsub+0x222>
 800153a:	0324      	lsls	r4, r4, #12
 800153c:	0b25      	lsrs	r5, r4, #12
 800153e:	057c      	lsls	r4, r7, #21
 8001540:	0d64      	lsrs	r4, r4, #21
 8001542:	e6c2      	b.n	80012ca <__aeabi_dsub+0x152>
 8001544:	46ca      	mov	sl, r9
 8001546:	0022      	movs	r2, r4
 8001548:	4302      	orrs	r2, r0
 800154a:	d158      	bne.n	80015fe <__aeabi_dsub+0x486>
 800154c:	4663      	mov	r3, ip
 800154e:	000e      	movs	r6, r1
 8001550:	9c02      	ldr	r4, [sp, #8]
 8001552:	9303      	str	r3, [sp, #12]
 8001554:	9b03      	ldr	r3, [sp, #12]
 8001556:	4657      	mov	r7, sl
 8001558:	08da      	lsrs	r2, r3, #3
 800155a:	e7e7      	b.n	800152c <__aeabi_dsub+0x3b4>
 800155c:	4cc9      	ldr	r4, [pc, #804]	@ (8001884 <__aeabi_dsub+0x70c>)
 800155e:	1aff      	subs	r7, r7, r3
 8001560:	4014      	ands	r4, r2
 8001562:	e692      	b.n	800128a <__aeabi_dsub+0x112>
 8001564:	4dc8      	ldr	r5, [pc, #800]	@ (8001888 <__aeabi_dsub+0x710>)
 8001566:	1c7a      	adds	r2, r7, #1
 8001568:	422a      	tst	r2, r5
 800156a:	d000      	beq.n	800156e <__aeabi_dsub+0x3f6>
 800156c:	e084      	b.n	8001678 <__aeabi_dsub+0x500>
 800156e:	0022      	movs	r2, r4
 8001570:	4302      	orrs	r2, r0
 8001572:	2f00      	cmp	r7, #0
 8001574:	d000      	beq.n	8001578 <__aeabi_dsub+0x400>
 8001576:	e0ef      	b.n	8001758 <__aeabi_dsub+0x5e0>
 8001578:	2a00      	cmp	r2, #0
 800157a:	d100      	bne.n	800157e <__aeabi_dsub+0x406>
 800157c:	e0e5      	b.n	800174a <__aeabi_dsub+0x5d2>
 800157e:	4662      	mov	r2, ip
 8001580:	9902      	ldr	r1, [sp, #8]
 8001582:	430a      	orrs	r2, r1
 8001584:	d100      	bne.n	8001588 <__aeabi_dsub+0x410>
 8001586:	e0c5      	b.n	8001714 <__aeabi_dsub+0x59c>
 8001588:	4663      	mov	r3, ip
 800158a:	18c5      	adds	r5, r0, r3
 800158c:	468c      	mov	ip, r1
 800158e:	4285      	cmp	r5, r0
 8001590:	4180      	sbcs	r0, r0
 8001592:	4464      	add	r4, ip
 8001594:	4240      	negs	r0, r0
 8001596:	1824      	adds	r4, r4, r0
 8001598:	0223      	lsls	r3, r4, #8
 800159a:	d502      	bpl.n	80015a2 <__aeabi_dsub+0x42a>
 800159c:	4bb9      	ldr	r3, [pc, #740]	@ (8001884 <__aeabi_dsub+0x70c>)
 800159e:	3701      	adds	r7, #1
 80015a0:	401c      	ands	r4, r3
 80015a2:	46ba      	mov	sl, r7
 80015a4:	9503      	str	r5, [sp, #12]
 80015a6:	e7d5      	b.n	8001554 <__aeabi_dsub+0x3dc>
 80015a8:	4662      	mov	r2, ip
 80015aa:	1a85      	subs	r5, r0, r2
 80015ac:	42a8      	cmp	r0, r5
 80015ae:	4192      	sbcs	r2, r2
 80015b0:	4252      	negs	r2, r2
 80015b2:	4691      	mov	r9, r2
 80015b4:	9b02      	ldr	r3, [sp, #8]
 80015b6:	1ae3      	subs	r3, r4, r3
 80015b8:	001a      	movs	r2, r3
 80015ba:	464b      	mov	r3, r9
 80015bc:	1ad2      	subs	r2, r2, r3
 80015be:	0013      	movs	r3, r2
 80015c0:	4691      	mov	r9, r2
 80015c2:	021a      	lsls	r2, r3, #8
 80015c4:	d46c      	bmi.n	80016a0 <__aeabi_dsub+0x528>
 80015c6:	464a      	mov	r2, r9
 80015c8:	464c      	mov	r4, r9
 80015ca:	432a      	orrs	r2, r5
 80015cc:	d000      	beq.n	80015d0 <__aeabi_dsub+0x458>
 80015ce:	e63a      	b.n	8001246 <__aeabi_dsub+0xce>
 80015d0:	2600      	movs	r6, #0
 80015d2:	2400      	movs	r4, #0
 80015d4:	2500      	movs	r5, #0
 80015d6:	e678      	b.n	80012ca <__aeabi_dsub+0x152>
 80015d8:	9902      	ldr	r1, [sp, #8]
 80015da:	4653      	mov	r3, sl
 80015dc:	000d      	movs	r5, r1
 80015de:	3a20      	subs	r2, #32
 80015e0:	40d5      	lsrs	r5, r2
 80015e2:	2b20      	cmp	r3, #32
 80015e4:	d006      	beq.n	80015f4 <__aeabi_dsub+0x47c>
 80015e6:	2240      	movs	r2, #64	@ 0x40
 80015e8:	1ad2      	subs	r2, r2, r3
 80015ea:	000b      	movs	r3, r1
 80015ec:	4093      	lsls	r3, r2
 80015ee:	4662      	mov	r2, ip
 80015f0:	431a      	orrs	r2, r3
 80015f2:	4693      	mov	fp, r2
 80015f4:	465b      	mov	r3, fp
 80015f6:	1e5a      	subs	r2, r3, #1
 80015f8:	4193      	sbcs	r3, r2
 80015fa:	431d      	orrs	r5, r3
 80015fc:	e619      	b.n	8001232 <__aeabi_dsub+0xba>
 80015fe:	4653      	mov	r3, sl
 8001600:	1e5a      	subs	r2, r3, #1
 8001602:	2b01      	cmp	r3, #1
 8001604:	d100      	bne.n	8001608 <__aeabi_dsub+0x490>
 8001606:	e0c6      	b.n	8001796 <__aeabi_dsub+0x61e>
 8001608:	4e9d      	ldr	r6, [pc, #628]	@ (8001880 <__aeabi_dsub+0x708>)
 800160a:	45b2      	cmp	sl, r6
 800160c:	d100      	bne.n	8001610 <__aeabi_dsub+0x498>
 800160e:	e6bd      	b.n	800138c <__aeabi_dsub+0x214>
 8001610:	4688      	mov	r8, r1
 8001612:	000e      	movs	r6, r1
 8001614:	2501      	movs	r5, #1
 8001616:	2a38      	cmp	r2, #56	@ 0x38
 8001618:	dc10      	bgt.n	800163c <__aeabi_dsub+0x4c4>
 800161a:	2a1f      	cmp	r2, #31
 800161c:	dc7f      	bgt.n	800171e <__aeabi_dsub+0x5a6>
 800161e:	2120      	movs	r1, #32
 8001620:	0025      	movs	r5, r4
 8001622:	1a89      	subs	r1, r1, r2
 8001624:	0007      	movs	r7, r0
 8001626:	4088      	lsls	r0, r1
 8001628:	408d      	lsls	r5, r1
 800162a:	40d7      	lsrs	r7, r2
 800162c:	40d4      	lsrs	r4, r2
 800162e:	1e41      	subs	r1, r0, #1
 8001630:	4188      	sbcs	r0, r1
 8001632:	9b02      	ldr	r3, [sp, #8]
 8001634:	433d      	orrs	r5, r7
 8001636:	1b1b      	subs	r3, r3, r4
 8001638:	4305      	orrs	r5, r0
 800163a:	9302      	str	r3, [sp, #8]
 800163c:	4662      	mov	r2, ip
 800163e:	1b55      	subs	r5, r2, r5
 8001640:	45ac      	cmp	ip, r5
 8001642:	4192      	sbcs	r2, r2
 8001644:	9b02      	ldr	r3, [sp, #8]
 8001646:	4252      	negs	r2, r2
 8001648:	464f      	mov	r7, r9
 800164a:	1a9c      	subs	r4, r3, r2
 800164c:	e5f6      	b.n	800123c <__aeabi_dsub+0xc4>
 800164e:	2d00      	cmp	r5, #0
 8001650:	d000      	beq.n	8001654 <__aeabi_dsub+0x4dc>
 8001652:	e0b7      	b.n	80017c4 <__aeabi_dsub+0x64c>
 8001654:	2a00      	cmp	r2, #0
 8001656:	d100      	bne.n	800165a <__aeabi_dsub+0x4e2>
 8001658:	e0f0      	b.n	800183c <__aeabi_dsub+0x6c4>
 800165a:	2601      	movs	r6, #1
 800165c:	400e      	ands	r6, r1
 800165e:	4663      	mov	r3, ip
 8001660:	9802      	ldr	r0, [sp, #8]
 8001662:	08d9      	lsrs	r1, r3, #3
 8001664:	0742      	lsls	r2, r0, #29
 8001666:	430a      	orrs	r2, r1
 8001668:	08c4      	lsrs	r4, r0, #3
 800166a:	e696      	b.n	800139a <__aeabi_dsub+0x222>
 800166c:	4c85      	ldr	r4, [pc, #532]	@ (8001884 <__aeabi_dsub+0x70c>)
 800166e:	1aff      	subs	r7, r7, r3
 8001670:	4014      	ands	r4, r2
 8001672:	0762      	lsls	r2, r4, #29
 8001674:	08e4      	lsrs	r4, r4, #3
 8001676:	e760      	b.n	800153a <__aeabi_dsub+0x3c2>
 8001678:	4981      	ldr	r1, [pc, #516]	@ (8001880 <__aeabi_dsub+0x708>)
 800167a:	428a      	cmp	r2, r1
 800167c:	d100      	bne.n	8001680 <__aeabi_dsub+0x508>
 800167e:	e0c9      	b.n	8001814 <__aeabi_dsub+0x69c>
 8001680:	4663      	mov	r3, ip
 8001682:	18c1      	adds	r1, r0, r3
 8001684:	4281      	cmp	r1, r0
 8001686:	4180      	sbcs	r0, r0
 8001688:	9b02      	ldr	r3, [sp, #8]
 800168a:	4240      	negs	r0, r0
 800168c:	18e3      	adds	r3, r4, r3
 800168e:	181b      	adds	r3, r3, r0
 8001690:	07dd      	lsls	r5, r3, #31
 8001692:	085c      	lsrs	r4, r3, #1
 8001694:	2307      	movs	r3, #7
 8001696:	0849      	lsrs	r1, r1, #1
 8001698:	430d      	orrs	r5, r1
 800169a:	0017      	movs	r7, r2
 800169c:	402b      	ands	r3, r5
 800169e:	e710      	b.n	80014c2 <__aeabi_dsub+0x34a>
 80016a0:	4663      	mov	r3, ip
 80016a2:	1a1d      	subs	r5, r3, r0
 80016a4:	45ac      	cmp	ip, r5
 80016a6:	4192      	sbcs	r2, r2
 80016a8:	2601      	movs	r6, #1
 80016aa:	9b02      	ldr	r3, [sp, #8]
 80016ac:	4252      	negs	r2, r2
 80016ae:	1b1c      	subs	r4, r3, r4
 80016b0:	4688      	mov	r8, r1
 80016b2:	1aa4      	subs	r4, r4, r2
 80016b4:	400e      	ands	r6, r1
 80016b6:	e5c6      	b.n	8001246 <__aeabi_dsub+0xce>
 80016b8:	4663      	mov	r3, ip
 80016ba:	18c5      	adds	r5, r0, r3
 80016bc:	9b02      	ldr	r3, [sp, #8]
 80016be:	4285      	cmp	r5, r0
 80016c0:	4180      	sbcs	r0, r0
 80016c2:	469c      	mov	ip, r3
 80016c4:	4240      	negs	r0, r0
 80016c6:	4464      	add	r4, ip
 80016c8:	1824      	adds	r4, r4, r0
 80016ca:	2701      	movs	r7, #1
 80016cc:	0223      	lsls	r3, r4, #8
 80016ce:	d400      	bmi.n	80016d2 <__aeabi_dsub+0x55a>
 80016d0:	e6f5      	b.n	80014be <__aeabi_dsub+0x346>
 80016d2:	2702      	movs	r7, #2
 80016d4:	e641      	b.n	800135a <__aeabi_dsub+0x1e2>
 80016d6:	4663      	mov	r3, ip
 80016d8:	1ac5      	subs	r5, r0, r3
 80016da:	42a8      	cmp	r0, r5
 80016dc:	4180      	sbcs	r0, r0
 80016de:	9b02      	ldr	r3, [sp, #8]
 80016e0:	4240      	negs	r0, r0
 80016e2:	1ae4      	subs	r4, r4, r3
 80016e4:	2701      	movs	r7, #1
 80016e6:	1a24      	subs	r4, r4, r0
 80016e8:	e5a8      	b.n	800123c <__aeabi_dsub+0xc4>
 80016ea:	9d02      	ldr	r5, [sp, #8]
 80016ec:	4652      	mov	r2, sl
 80016ee:	002b      	movs	r3, r5
 80016f0:	3a20      	subs	r2, #32
 80016f2:	40d3      	lsrs	r3, r2
 80016f4:	0019      	movs	r1, r3
 80016f6:	4653      	mov	r3, sl
 80016f8:	2b20      	cmp	r3, #32
 80016fa:	d006      	beq.n	800170a <__aeabi_dsub+0x592>
 80016fc:	2240      	movs	r2, #64	@ 0x40
 80016fe:	1ad2      	subs	r2, r2, r3
 8001700:	002b      	movs	r3, r5
 8001702:	4093      	lsls	r3, r2
 8001704:	4662      	mov	r2, ip
 8001706:	431a      	orrs	r2, r3
 8001708:	4693      	mov	fp, r2
 800170a:	465d      	mov	r5, fp
 800170c:	1e6b      	subs	r3, r5, #1
 800170e:	419d      	sbcs	r5, r3
 8001710:	430d      	orrs	r5, r1
 8001712:	e615      	b.n	8001340 <__aeabi_dsub+0x1c8>
 8001714:	0762      	lsls	r2, r4, #29
 8001716:	08c0      	lsrs	r0, r0, #3
 8001718:	4302      	orrs	r2, r0
 800171a:	08e4      	lsrs	r4, r4, #3
 800171c:	e70d      	b.n	800153a <__aeabi_dsub+0x3c2>
 800171e:	0011      	movs	r1, r2
 8001720:	0027      	movs	r7, r4
 8001722:	3920      	subs	r1, #32
 8001724:	40cf      	lsrs	r7, r1
 8001726:	2a20      	cmp	r2, #32
 8001728:	d005      	beq.n	8001736 <__aeabi_dsub+0x5be>
 800172a:	2140      	movs	r1, #64	@ 0x40
 800172c:	1a8a      	subs	r2, r1, r2
 800172e:	4094      	lsls	r4, r2
 8001730:	0025      	movs	r5, r4
 8001732:	4305      	orrs	r5, r0
 8001734:	9503      	str	r5, [sp, #12]
 8001736:	9d03      	ldr	r5, [sp, #12]
 8001738:	1e6a      	subs	r2, r5, #1
 800173a:	4195      	sbcs	r5, r2
 800173c:	433d      	orrs	r5, r7
 800173e:	e77d      	b.n	800163c <__aeabi_dsub+0x4c4>
 8001740:	2a00      	cmp	r2, #0
 8001742:	d100      	bne.n	8001746 <__aeabi_dsub+0x5ce>
 8001744:	e744      	b.n	80015d0 <__aeabi_dsub+0x458>
 8001746:	2601      	movs	r6, #1
 8001748:	400e      	ands	r6, r1
 800174a:	4663      	mov	r3, ip
 800174c:	08d9      	lsrs	r1, r3, #3
 800174e:	9b02      	ldr	r3, [sp, #8]
 8001750:	075a      	lsls	r2, r3, #29
 8001752:	430a      	orrs	r2, r1
 8001754:	08dc      	lsrs	r4, r3, #3
 8001756:	e6f0      	b.n	800153a <__aeabi_dsub+0x3c2>
 8001758:	2a00      	cmp	r2, #0
 800175a:	d028      	beq.n	80017ae <__aeabi_dsub+0x636>
 800175c:	4662      	mov	r2, ip
 800175e:	9f02      	ldr	r7, [sp, #8]
 8001760:	08c0      	lsrs	r0, r0, #3
 8001762:	433a      	orrs	r2, r7
 8001764:	d100      	bne.n	8001768 <__aeabi_dsub+0x5f0>
 8001766:	e6dc      	b.n	8001522 <__aeabi_dsub+0x3aa>
 8001768:	0762      	lsls	r2, r4, #29
 800176a:	4310      	orrs	r0, r2
 800176c:	2280      	movs	r2, #128	@ 0x80
 800176e:	08e4      	lsrs	r4, r4, #3
 8001770:	0312      	lsls	r2, r2, #12
 8001772:	4214      	tst	r4, r2
 8001774:	d009      	beq.n	800178a <__aeabi_dsub+0x612>
 8001776:	08fd      	lsrs	r5, r7, #3
 8001778:	4215      	tst	r5, r2
 800177a:	d106      	bne.n	800178a <__aeabi_dsub+0x612>
 800177c:	4663      	mov	r3, ip
 800177e:	2601      	movs	r6, #1
 8001780:	002c      	movs	r4, r5
 8001782:	08d8      	lsrs	r0, r3, #3
 8001784:	077b      	lsls	r3, r7, #29
 8001786:	4318      	orrs	r0, r3
 8001788:	400e      	ands	r6, r1
 800178a:	0f42      	lsrs	r2, r0, #29
 800178c:	00c0      	lsls	r0, r0, #3
 800178e:	08c0      	lsrs	r0, r0, #3
 8001790:	0752      	lsls	r2, r2, #29
 8001792:	4302      	orrs	r2, r0
 8001794:	e601      	b.n	800139a <__aeabi_dsub+0x222>
 8001796:	4663      	mov	r3, ip
 8001798:	1a1d      	subs	r5, r3, r0
 800179a:	45ac      	cmp	ip, r5
 800179c:	4192      	sbcs	r2, r2
 800179e:	9b02      	ldr	r3, [sp, #8]
 80017a0:	4252      	negs	r2, r2
 80017a2:	1b1c      	subs	r4, r3, r4
 80017a4:	000e      	movs	r6, r1
 80017a6:	4688      	mov	r8, r1
 80017a8:	2701      	movs	r7, #1
 80017aa:	1aa4      	subs	r4, r4, r2
 80017ac:	e546      	b.n	800123c <__aeabi_dsub+0xc4>
 80017ae:	4663      	mov	r3, ip
 80017b0:	08d9      	lsrs	r1, r3, #3
 80017b2:	9b02      	ldr	r3, [sp, #8]
 80017b4:	075a      	lsls	r2, r3, #29
 80017b6:	430a      	orrs	r2, r1
 80017b8:	08dc      	lsrs	r4, r3, #3
 80017ba:	e5ee      	b.n	800139a <__aeabi_dsub+0x222>
 80017bc:	4663      	mov	r3, ip
 80017be:	9c02      	ldr	r4, [sp, #8]
 80017c0:	9303      	str	r3, [sp, #12]
 80017c2:	e6c7      	b.n	8001554 <__aeabi_dsub+0x3dc>
 80017c4:	08c0      	lsrs	r0, r0, #3
 80017c6:	2a00      	cmp	r2, #0
 80017c8:	d100      	bne.n	80017cc <__aeabi_dsub+0x654>
 80017ca:	e6aa      	b.n	8001522 <__aeabi_dsub+0x3aa>
 80017cc:	0762      	lsls	r2, r4, #29
 80017ce:	4310      	orrs	r0, r2
 80017d0:	2280      	movs	r2, #128	@ 0x80
 80017d2:	08e4      	lsrs	r4, r4, #3
 80017d4:	0312      	lsls	r2, r2, #12
 80017d6:	4214      	tst	r4, r2
 80017d8:	d0d7      	beq.n	800178a <__aeabi_dsub+0x612>
 80017da:	9f02      	ldr	r7, [sp, #8]
 80017dc:	08fd      	lsrs	r5, r7, #3
 80017de:	4215      	tst	r5, r2
 80017e0:	d1d3      	bne.n	800178a <__aeabi_dsub+0x612>
 80017e2:	4663      	mov	r3, ip
 80017e4:	2601      	movs	r6, #1
 80017e6:	08d8      	lsrs	r0, r3, #3
 80017e8:	077b      	lsls	r3, r7, #29
 80017ea:	002c      	movs	r4, r5
 80017ec:	4318      	orrs	r0, r3
 80017ee:	400e      	ands	r6, r1
 80017f0:	e7cb      	b.n	800178a <__aeabi_dsub+0x612>
 80017f2:	000a      	movs	r2, r1
 80017f4:	0027      	movs	r7, r4
 80017f6:	3a20      	subs	r2, #32
 80017f8:	40d7      	lsrs	r7, r2
 80017fa:	2920      	cmp	r1, #32
 80017fc:	d005      	beq.n	800180a <__aeabi_dsub+0x692>
 80017fe:	2240      	movs	r2, #64	@ 0x40
 8001800:	1a52      	subs	r2, r2, r1
 8001802:	4094      	lsls	r4, r2
 8001804:	0025      	movs	r5, r4
 8001806:	4305      	orrs	r5, r0
 8001808:	9503      	str	r5, [sp, #12]
 800180a:	9d03      	ldr	r5, [sp, #12]
 800180c:	1e6a      	subs	r2, r5, #1
 800180e:	4195      	sbcs	r5, r2
 8001810:	432f      	orrs	r7, r5
 8001812:	e610      	b.n	8001436 <__aeabi_dsub+0x2be>
 8001814:	0014      	movs	r4, r2
 8001816:	2500      	movs	r5, #0
 8001818:	2200      	movs	r2, #0
 800181a:	e556      	b.n	80012ca <__aeabi_dsub+0x152>
 800181c:	9b02      	ldr	r3, [sp, #8]
 800181e:	4460      	add	r0, ip
 8001820:	4699      	mov	r9, r3
 8001822:	4560      	cmp	r0, ip
 8001824:	4192      	sbcs	r2, r2
 8001826:	444c      	add	r4, r9
 8001828:	4252      	negs	r2, r2
 800182a:	0005      	movs	r5, r0
 800182c:	18a4      	adds	r4, r4, r2
 800182e:	e74c      	b.n	80016ca <__aeabi_dsub+0x552>
 8001830:	001a      	movs	r2, r3
 8001832:	001c      	movs	r4, r3
 8001834:	432a      	orrs	r2, r5
 8001836:	d000      	beq.n	800183a <__aeabi_dsub+0x6c2>
 8001838:	e6b3      	b.n	80015a2 <__aeabi_dsub+0x42a>
 800183a:	e6c9      	b.n	80015d0 <__aeabi_dsub+0x458>
 800183c:	2480      	movs	r4, #128	@ 0x80
 800183e:	2600      	movs	r6, #0
 8001840:	0324      	lsls	r4, r4, #12
 8001842:	e5ae      	b.n	80013a2 <__aeabi_dsub+0x22a>
 8001844:	2120      	movs	r1, #32
 8001846:	2500      	movs	r5, #0
 8001848:	1a09      	subs	r1, r1, r0
 800184a:	e517      	b.n	800127c <__aeabi_dsub+0x104>
 800184c:	2200      	movs	r2, #0
 800184e:	2500      	movs	r5, #0
 8001850:	4c0b      	ldr	r4, [pc, #44]	@ (8001880 <__aeabi_dsub+0x708>)
 8001852:	e53a      	b.n	80012ca <__aeabi_dsub+0x152>
 8001854:	2d00      	cmp	r5, #0
 8001856:	d100      	bne.n	800185a <__aeabi_dsub+0x6e2>
 8001858:	e5f6      	b.n	8001448 <__aeabi_dsub+0x2d0>
 800185a:	464b      	mov	r3, r9
 800185c:	1bda      	subs	r2, r3, r7
 800185e:	4692      	mov	sl, r2
 8001860:	2f00      	cmp	r7, #0
 8001862:	d100      	bne.n	8001866 <__aeabi_dsub+0x6ee>
 8001864:	e66f      	b.n	8001546 <__aeabi_dsub+0x3ce>
 8001866:	2a38      	cmp	r2, #56	@ 0x38
 8001868:	dc05      	bgt.n	8001876 <__aeabi_dsub+0x6fe>
 800186a:	2680      	movs	r6, #128	@ 0x80
 800186c:	0436      	lsls	r6, r6, #16
 800186e:	4334      	orrs	r4, r6
 8001870:	4688      	mov	r8, r1
 8001872:	000e      	movs	r6, r1
 8001874:	e6d1      	b.n	800161a <__aeabi_dsub+0x4a2>
 8001876:	4688      	mov	r8, r1
 8001878:	000e      	movs	r6, r1
 800187a:	2501      	movs	r5, #1
 800187c:	e6de      	b.n	800163c <__aeabi_dsub+0x4c4>
 800187e:	46c0      	nop			@ (mov r8, r8)
 8001880:	000007ff 	.word	0x000007ff
 8001884:	ff7fffff 	.word	0xff7fffff
 8001888:	000007fe 	.word	0x000007fe
 800188c:	2d00      	cmp	r5, #0
 800188e:	d100      	bne.n	8001892 <__aeabi_dsub+0x71a>
 8001890:	e668      	b.n	8001564 <__aeabi_dsub+0x3ec>
 8001892:	464b      	mov	r3, r9
 8001894:	1bd9      	subs	r1, r3, r7
 8001896:	2f00      	cmp	r7, #0
 8001898:	d101      	bne.n	800189e <__aeabi_dsub+0x726>
 800189a:	468a      	mov	sl, r1
 800189c:	e5a7      	b.n	80013ee <__aeabi_dsub+0x276>
 800189e:	2701      	movs	r7, #1
 80018a0:	2938      	cmp	r1, #56	@ 0x38
 80018a2:	dd00      	ble.n	80018a6 <__aeabi_dsub+0x72e>
 80018a4:	e5c7      	b.n	8001436 <__aeabi_dsub+0x2be>
 80018a6:	2280      	movs	r2, #128	@ 0x80
 80018a8:	0412      	lsls	r2, r2, #16
 80018aa:	4314      	orrs	r4, r2
 80018ac:	e5af      	b.n	800140e <__aeabi_dsub+0x296>
 80018ae:	46c0      	nop			@ (mov r8, r8)

080018b0 <__aeabi_d2iz>:
 80018b0:	000b      	movs	r3, r1
 80018b2:	0002      	movs	r2, r0
 80018b4:	b570      	push	{r4, r5, r6, lr}
 80018b6:	4d16      	ldr	r5, [pc, #88]	@ (8001910 <__aeabi_d2iz+0x60>)
 80018b8:	030c      	lsls	r4, r1, #12
 80018ba:	b082      	sub	sp, #8
 80018bc:	0049      	lsls	r1, r1, #1
 80018be:	2000      	movs	r0, #0
 80018c0:	9200      	str	r2, [sp, #0]
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	0b24      	lsrs	r4, r4, #12
 80018c6:	0d49      	lsrs	r1, r1, #21
 80018c8:	0fde      	lsrs	r6, r3, #31
 80018ca:	42a9      	cmp	r1, r5
 80018cc:	dd04      	ble.n	80018d8 <__aeabi_d2iz+0x28>
 80018ce:	4811      	ldr	r0, [pc, #68]	@ (8001914 <__aeabi_d2iz+0x64>)
 80018d0:	4281      	cmp	r1, r0
 80018d2:	dd03      	ble.n	80018dc <__aeabi_d2iz+0x2c>
 80018d4:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <__aeabi_d2iz+0x68>)
 80018d6:	18f0      	adds	r0, r6, r3
 80018d8:	b002      	add	sp, #8
 80018da:	bd70      	pop	{r4, r5, r6, pc}
 80018dc:	2080      	movs	r0, #128	@ 0x80
 80018de:	0340      	lsls	r0, r0, #13
 80018e0:	4320      	orrs	r0, r4
 80018e2:	4c0e      	ldr	r4, [pc, #56]	@ (800191c <__aeabi_d2iz+0x6c>)
 80018e4:	1a64      	subs	r4, r4, r1
 80018e6:	2c1f      	cmp	r4, #31
 80018e8:	dd08      	ble.n	80018fc <__aeabi_d2iz+0x4c>
 80018ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001920 <__aeabi_d2iz+0x70>)
 80018ec:	1a5b      	subs	r3, r3, r1
 80018ee:	40d8      	lsrs	r0, r3
 80018f0:	0003      	movs	r3, r0
 80018f2:	4258      	negs	r0, r3
 80018f4:	2e00      	cmp	r6, #0
 80018f6:	d1ef      	bne.n	80018d8 <__aeabi_d2iz+0x28>
 80018f8:	0018      	movs	r0, r3
 80018fa:	e7ed      	b.n	80018d8 <__aeabi_d2iz+0x28>
 80018fc:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <__aeabi_d2iz+0x74>)
 80018fe:	9a00      	ldr	r2, [sp, #0]
 8001900:	469c      	mov	ip, r3
 8001902:	0003      	movs	r3, r0
 8001904:	4461      	add	r1, ip
 8001906:	408b      	lsls	r3, r1
 8001908:	40e2      	lsrs	r2, r4
 800190a:	4313      	orrs	r3, r2
 800190c:	e7f1      	b.n	80018f2 <__aeabi_d2iz+0x42>
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	000003fe 	.word	0x000003fe
 8001914:	0000041d 	.word	0x0000041d
 8001918:	7fffffff 	.word	0x7fffffff
 800191c:	00000433 	.word	0x00000433
 8001920:	00000413 	.word	0x00000413
 8001924:	fffffbed 	.word	0xfffffbed

08001928 <__aeabi_f2d>:
 8001928:	b570      	push	{r4, r5, r6, lr}
 800192a:	0242      	lsls	r2, r0, #9
 800192c:	0043      	lsls	r3, r0, #1
 800192e:	0fc4      	lsrs	r4, r0, #31
 8001930:	20fe      	movs	r0, #254	@ 0xfe
 8001932:	0e1b      	lsrs	r3, r3, #24
 8001934:	1c59      	adds	r1, r3, #1
 8001936:	0a55      	lsrs	r5, r2, #9
 8001938:	4208      	tst	r0, r1
 800193a:	d00c      	beq.n	8001956 <__aeabi_f2d+0x2e>
 800193c:	21e0      	movs	r1, #224	@ 0xe0
 800193e:	0089      	lsls	r1, r1, #2
 8001940:	468c      	mov	ip, r1
 8001942:	076d      	lsls	r5, r5, #29
 8001944:	0b12      	lsrs	r2, r2, #12
 8001946:	4463      	add	r3, ip
 8001948:	051b      	lsls	r3, r3, #20
 800194a:	4313      	orrs	r3, r2
 800194c:	07e4      	lsls	r4, r4, #31
 800194e:	4323      	orrs	r3, r4
 8001950:	0028      	movs	r0, r5
 8001952:	0019      	movs	r1, r3
 8001954:	bd70      	pop	{r4, r5, r6, pc}
 8001956:	2b00      	cmp	r3, #0
 8001958:	d114      	bne.n	8001984 <__aeabi_f2d+0x5c>
 800195a:	2d00      	cmp	r5, #0
 800195c:	d01b      	beq.n	8001996 <__aeabi_f2d+0x6e>
 800195e:	0028      	movs	r0, r5
 8001960:	f000 f868 	bl	8001a34 <__clzsi2>
 8001964:	280a      	cmp	r0, #10
 8001966:	dc1c      	bgt.n	80019a2 <__aeabi_f2d+0x7a>
 8001968:	230b      	movs	r3, #11
 800196a:	002a      	movs	r2, r5
 800196c:	1a1b      	subs	r3, r3, r0
 800196e:	40da      	lsrs	r2, r3
 8001970:	0003      	movs	r3, r0
 8001972:	3315      	adds	r3, #21
 8001974:	409d      	lsls	r5, r3
 8001976:	4b0e      	ldr	r3, [pc, #56]	@ (80019b0 <__aeabi_f2d+0x88>)
 8001978:	0312      	lsls	r2, r2, #12
 800197a:	1a1b      	subs	r3, r3, r0
 800197c:	055b      	lsls	r3, r3, #21
 800197e:	0b12      	lsrs	r2, r2, #12
 8001980:	0d5b      	lsrs	r3, r3, #21
 8001982:	e7e1      	b.n	8001948 <__aeabi_f2d+0x20>
 8001984:	2d00      	cmp	r5, #0
 8001986:	d009      	beq.n	800199c <__aeabi_f2d+0x74>
 8001988:	0b13      	lsrs	r3, r2, #12
 800198a:	2280      	movs	r2, #128	@ 0x80
 800198c:	0312      	lsls	r2, r2, #12
 800198e:	431a      	orrs	r2, r3
 8001990:	076d      	lsls	r5, r5, #29
 8001992:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <__aeabi_f2d+0x8c>)
 8001994:	e7d8      	b.n	8001948 <__aeabi_f2d+0x20>
 8001996:	2300      	movs	r3, #0
 8001998:	2200      	movs	r2, #0
 800199a:	e7d5      	b.n	8001948 <__aeabi_f2d+0x20>
 800199c:	2200      	movs	r2, #0
 800199e:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <__aeabi_f2d+0x8c>)
 80019a0:	e7d2      	b.n	8001948 <__aeabi_f2d+0x20>
 80019a2:	0003      	movs	r3, r0
 80019a4:	002a      	movs	r2, r5
 80019a6:	3b0b      	subs	r3, #11
 80019a8:	409a      	lsls	r2, r3
 80019aa:	2500      	movs	r5, #0
 80019ac:	e7e3      	b.n	8001976 <__aeabi_f2d+0x4e>
 80019ae:	46c0      	nop			@ (mov r8, r8)
 80019b0:	00000389 	.word	0x00000389
 80019b4:	000007ff 	.word	0x000007ff

080019b8 <__aeabi_cdrcmple>:
 80019b8:	4684      	mov	ip, r0
 80019ba:	0010      	movs	r0, r2
 80019bc:	4662      	mov	r2, ip
 80019be:	468c      	mov	ip, r1
 80019c0:	0019      	movs	r1, r3
 80019c2:	4663      	mov	r3, ip
 80019c4:	e000      	b.n	80019c8 <__aeabi_cdcmpeq>
 80019c6:	46c0      	nop			@ (mov r8, r8)

080019c8 <__aeabi_cdcmpeq>:
 80019c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80019ca:	f000 f909 	bl	8001be0 <__ledf2>
 80019ce:	2800      	cmp	r0, #0
 80019d0:	d401      	bmi.n	80019d6 <__aeabi_cdcmpeq+0xe>
 80019d2:	2100      	movs	r1, #0
 80019d4:	42c8      	cmn	r0, r1
 80019d6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080019d8 <__aeabi_dcmpeq>:
 80019d8:	b510      	push	{r4, lr}
 80019da:	f000 f849 	bl	8001a70 <__eqdf2>
 80019de:	4240      	negs	r0, r0
 80019e0:	3001      	adds	r0, #1
 80019e2:	bd10      	pop	{r4, pc}

080019e4 <__aeabi_dcmplt>:
 80019e4:	b510      	push	{r4, lr}
 80019e6:	f000 f8fb 	bl	8001be0 <__ledf2>
 80019ea:	2800      	cmp	r0, #0
 80019ec:	db01      	blt.n	80019f2 <__aeabi_dcmplt+0xe>
 80019ee:	2000      	movs	r0, #0
 80019f0:	bd10      	pop	{r4, pc}
 80019f2:	2001      	movs	r0, #1
 80019f4:	bd10      	pop	{r4, pc}
 80019f6:	46c0      	nop			@ (mov r8, r8)

080019f8 <__aeabi_dcmple>:
 80019f8:	b510      	push	{r4, lr}
 80019fa:	f000 f8f1 	bl	8001be0 <__ledf2>
 80019fe:	2800      	cmp	r0, #0
 8001a00:	dd01      	ble.n	8001a06 <__aeabi_dcmple+0xe>
 8001a02:	2000      	movs	r0, #0
 8001a04:	bd10      	pop	{r4, pc}
 8001a06:	2001      	movs	r0, #1
 8001a08:	bd10      	pop	{r4, pc}
 8001a0a:	46c0      	nop			@ (mov r8, r8)

08001a0c <__aeabi_dcmpgt>:
 8001a0c:	b510      	push	{r4, lr}
 8001a0e:	f000 f873 	bl	8001af8 <__gedf2>
 8001a12:	2800      	cmp	r0, #0
 8001a14:	dc01      	bgt.n	8001a1a <__aeabi_dcmpgt+0xe>
 8001a16:	2000      	movs	r0, #0
 8001a18:	bd10      	pop	{r4, pc}
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	bd10      	pop	{r4, pc}
 8001a1e:	46c0      	nop			@ (mov r8, r8)

08001a20 <__aeabi_dcmpge>:
 8001a20:	b510      	push	{r4, lr}
 8001a22:	f000 f869 	bl	8001af8 <__gedf2>
 8001a26:	2800      	cmp	r0, #0
 8001a28:	da01      	bge.n	8001a2e <__aeabi_dcmpge+0xe>
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	bd10      	pop	{r4, pc}
 8001a2e:	2001      	movs	r0, #1
 8001a30:	bd10      	pop	{r4, pc}
 8001a32:	46c0      	nop			@ (mov r8, r8)

08001a34 <__clzsi2>:
 8001a34:	211c      	movs	r1, #28
 8001a36:	2301      	movs	r3, #1
 8001a38:	041b      	lsls	r3, r3, #16
 8001a3a:	4298      	cmp	r0, r3
 8001a3c:	d301      	bcc.n	8001a42 <__clzsi2+0xe>
 8001a3e:	0c00      	lsrs	r0, r0, #16
 8001a40:	3910      	subs	r1, #16
 8001a42:	0a1b      	lsrs	r3, r3, #8
 8001a44:	4298      	cmp	r0, r3
 8001a46:	d301      	bcc.n	8001a4c <__clzsi2+0x18>
 8001a48:	0a00      	lsrs	r0, r0, #8
 8001a4a:	3908      	subs	r1, #8
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	4298      	cmp	r0, r3
 8001a50:	d301      	bcc.n	8001a56 <__clzsi2+0x22>
 8001a52:	0900      	lsrs	r0, r0, #4
 8001a54:	3904      	subs	r1, #4
 8001a56:	a202      	add	r2, pc, #8	@ (adr r2, 8001a60 <__clzsi2+0x2c>)
 8001a58:	5c10      	ldrb	r0, [r2, r0]
 8001a5a:	1840      	adds	r0, r0, r1
 8001a5c:	4770      	bx	lr
 8001a5e:	46c0      	nop			@ (mov r8, r8)
 8001a60:	02020304 	.word	0x02020304
 8001a64:	01010101 	.word	0x01010101
	...

08001a70 <__eqdf2>:
 8001a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a72:	4657      	mov	r7, sl
 8001a74:	46de      	mov	lr, fp
 8001a76:	464e      	mov	r6, r9
 8001a78:	4645      	mov	r5, r8
 8001a7a:	b5e0      	push	{r5, r6, r7, lr}
 8001a7c:	000d      	movs	r5, r1
 8001a7e:	0004      	movs	r4, r0
 8001a80:	0fe8      	lsrs	r0, r5, #31
 8001a82:	4683      	mov	fp, r0
 8001a84:	0309      	lsls	r1, r1, #12
 8001a86:	0fd8      	lsrs	r0, r3, #31
 8001a88:	0b09      	lsrs	r1, r1, #12
 8001a8a:	4682      	mov	sl, r0
 8001a8c:	4819      	ldr	r0, [pc, #100]	@ (8001af4 <__eqdf2+0x84>)
 8001a8e:	468c      	mov	ip, r1
 8001a90:	031f      	lsls	r7, r3, #12
 8001a92:	0069      	lsls	r1, r5, #1
 8001a94:	005e      	lsls	r6, r3, #1
 8001a96:	0d49      	lsrs	r1, r1, #21
 8001a98:	0b3f      	lsrs	r7, r7, #12
 8001a9a:	0d76      	lsrs	r6, r6, #21
 8001a9c:	4281      	cmp	r1, r0
 8001a9e:	d018      	beq.n	8001ad2 <__eqdf2+0x62>
 8001aa0:	4286      	cmp	r6, r0
 8001aa2:	d00f      	beq.n	8001ac4 <__eqdf2+0x54>
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	42b1      	cmp	r1, r6
 8001aa8:	d10d      	bne.n	8001ac6 <__eqdf2+0x56>
 8001aaa:	45bc      	cmp	ip, r7
 8001aac:	d10b      	bne.n	8001ac6 <__eqdf2+0x56>
 8001aae:	4294      	cmp	r4, r2
 8001ab0:	d109      	bne.n	8001ac6 <__eqdf2+0x56>
 8001ab2:	45d3      	cmp	fp, sl
 8001ab4:	d01c      	beq.n	8001af0 <__eqdf2+0x80>
 8001ab6:	2900      	cmp	r1, #0
 8001ab8:	d105      	bne.n	8001ac6 <__eqdf2+0x56>
 8001aba:	4660      	mov	r0, ip
 8001abc:	4320      	orrs	r0, r4
 8001abe:	1e43      	subs	r3, r0, #1
 8001ac0:	4198      	sbcs	r0, r3
 8001ac2:	e000      	b.n	8001ac6 <__eqdf2+0x56>
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ac8:	46bb      	mov	fp, r7
 8001aca:	46b2      	mov	sl, r6
 8001acc:	46a9      	mov	r9, r5
 8001ace:	46a0      	mov	r8, r4
 8001ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	428e      	cmp	r6, r1
 8001ad6:	d1f6      	bne.n	8001ac6 <__eqdf2+0x56>
 8001ad8:	4661      	mov	r1, ip
 8001ada:	4339      	orrs	r1, r7
 8001adc:	000f      	movs	r7, r1
 8001ade:	4317      	orrs	r7, r2
 8001ae0:	4327      	orrs	r7, r4
 8001ae2:	d1f0      	bne.n	8001ac6 <__eqdf2+0x56>
 8001ae4:	465b      	mov	r3, fp
 8001ae6:	4652      	mov	r2, sl
 8001ae8:	1a98      	subs	r0, r3, r2
 8001aea:	1e43      	subs	r3, r0, #1
 8001aec:	4198      	sbcs	r0, r3
 8001aee:	e7ea      	b.n	8001ac6 <__eqdf2+0x56>
 8001af0:	2000      	movs	r0, #0
 8001af2:	e7e8      	b.n	8001ac6 <__eqdf2+0x56>
 8001af4:	000007ff 	.word	0x000007ff

08001af8 <__gedf2>:
 8001af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001afa:	4657      	mov	r7, sl
 8001afc:	464e      	mov	r6, r9
 8001afe:	4645      	mov	r5, r8
 8001b00:	46de      	mov	lr, fp
 8001b02:	b5e0      	push	{r5, r6, r7, lr}
 8001b04:	000d      	movs	r5, r1
 8001b06:	030f      	lsls	r7, r1, #12
 8001b08:	0b39      	lsrs	r1, r7, #12
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	0004      	movs	r4, r0
 8001b0e:	4680      	mov	r8, r0
 8001b10:	9101      	str	r1, [sp, #4]
 8001b12:	0058      	lsls	r0, r3, #1
 8001b14:	0fe9      	lsrs	r1, r5, #31
 8001b16:	4f31      	ldr	r7, [pc, #196]	@ (8001bdc <__gedf2+0xe4>)
 8001b18:	0d40      	lsrs	r0, r0, #21
 8001b1a:	468c      	mov	ip, r1
 8001b1c:	006e      	lsls	r6, r5, #1
 8001b1e:	0319      	lsls	r1, r3, #12
 8001b20:	4682      	mov	sl, r0
 8001b22:	4691      	mov	r9, r2
 8001b24:	0d76      	lsrs	r6, r6, #21
 8001b26:	0b09      	lsrs	r1, r1, #12
 8001b28:	0fd8      	lsrs	r0, r3, #31
 8001b2a:	42be      	cmp	r6, r7
 8001b2c:	d01f      	beq.n	8001b6e <__gedf2+0x76>
 8001b2e:	45ba      	cmp	sl, r7
 8001b30:	d00f      	beq.n	8001b52 <__gedf2+0x5a>
 8001b32:	2e00      	cmp	r6, #0
 8001b34:	d12f      	bne.n	8001b96 <__gedf2+0x9e>
 8001b36:	4655      	mov	r5, sl
 8001b38:	9e01      	ldr	r6, [sp, #4]
 8001b3a:	4334      	orrs	r4, r6
 8001b3c:	2d00      	cmp	r5, #0
 8001b3e:	d127      	bne.n	8001b90 <__gedf2+0x98>
 8001b40:	430a      	orrs	r2, r1
 8001b42:	d03a      	beq.n	8001bba <__gedf2+0xc2>
 8001b44:	2c00      	cmp	r4, #0
 8001b46:	d145      	bne.n	8001bd4 <__gedf2+0xdc>
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d11a      	bne.n	8001b82 <__gedf2+0x8a>
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	4240      	negs	r0, r0
 8001b50:	e017      	b.n	8001b82 <__gedf2+0x8a>
 8001b52:	4311      	orrs	r1, r2
 8001b54:	d13b      	bne.n	8001bce <__gedf2+0xd6>
 8001b56:	2e00      	cmp	r6, #0
 8001b58:	d102      	bne.n	8001b60 <__gedf2+0x68>
 8001b5a:	9f01      	ldr	r7, [sp, #4]
 8001b5c:	4327      	orrs	r7, r4
 8001b5e:	d0f3      	beq.n	8001b48 <__gedf2+0x50>
 8001b60:	4584      	cmp	ip, r0
 8001b62:	d109      	bne.n	8001b78 <__gedf2+0x80>
 8001b64:	4663      	mov	r3, ip
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <__gedf2+0x54>
 8001b6a:	4660      	mov	r0, ip
 8001b6c:	e009      	b.n	8001b82 <__gedf2+0x8a>
 8001b6e:	9f01      	ldr	r7, [sp, #4]
 8001b70:	4327      	orrs	r7, r4
 8001b72:	d12c      	bne.n	8001bce <__gedf2+0xd6>
 8001b74:	45b2      	cmp	sl, r6
 8001b76:	d024      	beq.n	8001bc2 <__gedf2+0xca>
 8001b78:	4663      	mov	r3, ip
 8001b7a:	2002      	movs	r0, #2
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	4018      	ands	r0, r3
 8001b80:	3801      	subs	r0, #1
 8001b82:	b003      	add	sp, #12
 8001b84:	bcf0      	pop	{r4, r5, r6, r7}
 8001b86:	46bb      	mov	fp, r7
 8001b88:	46b2      	mov	sl, r6
 8001b8a:	46a9      	mov	r9, r5
 8001b8c:	46a0      	mov	r8, r4
 8001b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b90:	2c00      	cmp	r4, #0
 8001b92:	d0d9      	beq.n	8001b48 <__gedf2+0x50>
 8001b94:	e7e4      	b.n	8001b60 <__gedf2+0x68>
 8001b96:	4654      	mov	r4, sl
 8001b98:	2c00      	cmp	r4, #0
 8001b9a:	d0ed      	beq.n	8001b78 <__gedf2+0x80>
 8001b9c:	4584      	cmp	ip, r0
 8001b9e:	d1eb      	bne.n	8001b78 <__gedf2+0x80>
 8001ba0:	4556      	cmp	r6, sl
 8001ba2:	dce9      	bgt.n	8001b78 <__gedf2+0x80>
 8001ba4:	dbde      	blt.n	8001b64 <__gedf2+0x6c>
 8001ba6:	9b01      	ldr	r3, [sp, #4]
 8001ba8:	428b      	cmp	r3, r1
 8001baa:	d8e5      	bhi.n	8001b78 <__gedf2+0x80>
 8001bac:	d1da      	bne.n	8001b64 <__gedf2+0x6c>
 8001bae:	45c8      	cmp	r8, r9
 8001bb0:	d8e2      	bhi.n	8001b78 <__gedf2+0x80>
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	45c8      	cmp	r8, r9
 8001bb6:	d2e4      	bcs.n	8001b82 <__gedf2+0x8a>
 8001bb8:	e7d4      	b.n	8001b64 <__gedf2+0x6c>
 8001bba:	2000      	movs	r0, #0
 8001bbc:	2c00      	cmp	r4, #0
 8001bbe:	d0e0      	beq.n	8001b82 <__gedf2+0x8a>
 8001bc0:	e7da      	b.n	8001b78 <__gedf2+0x80>
 8001bc2:	4311      	orrs	r1, r2
 8001bc4:	d103      	bne.n	8001bce <__gedf2+0xd6>
 8001bc6:	4584      	cmp	ip, r0
 8001bc8:	d1d6      	bne.n	8001b78 <__gedf2+0x80>
 8001bca:	2000      	movs	r0, #0
 8001bcc:	e7d9      	b.n	8001b82 <__gedf2+0x8a>
 8001bce:	2002      	movs	r0, #2
 8001bd0:	4240      	negs	r0, r0
 8001bd2:	e7d6      	b.n	8001b82 <__gedf2+0x8a>
 8001bd4:	4584      	cmp	ip, r0
 8001bd6:	d0e6      	beq.n	8001ba6 <__gedf2+0xae>
 8001bd8:	e7ce      	b.n	8001b78 <__gedf2+0x80>
 8001bda:	46c0      	nop			@ (mov r8, r8)
 8001bdc:	000007ff 	.word	0x000007ff

08001be0 <__ledf2>:
 8001be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be2:	4657      	mov	r7, sl
 8001be4:	464e      	mov	r6, r9
 8001be6:	4645      	mov	r5, r8
 8001be8:	46de      	mov	lr, fp
 8001bea:	b5e0      	push	{r5, r6, r7, lr}
 8001bec:	000d      	movs	r5, r1
 8001bee:	030f      	lsls	r7, r1, #12
 8001bf0:	0004      	movs	r4, r0
 8001bf2:	4680      	mov	r8, r0
 8001bf4:	0fe8      	lsrs	r0, r5, #31
 8001bf6:	0b39      	lsrs	r1, r7, #12
 8001bf8:	4684      	mov	ip, r0
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	0058      	lsls	r0, r3, #1
 8001bfe:	4f30      	ldr	r7, [pc, #192]	@ (8001cc0 <__ledf2+0xe0>)
 8001c00:	0d40      	lsrs	r0, r0, #21
 8001c02:	9101      	str	r1, [sp, #4]
 8001c04:	031e      	lsls	r6, r3, #12
 8001c06:	0069      	lsls	r1, r5, #1
 8001c08:	4682      	mov	sl, r0
 8001c0a:	4691      	mov	r9, r2
 8001c0c:	0d49      	lsrs	r1, r1, #21
 8001c0e:	0b36      	lsrs	r6, r6, #12
 8001c10:	0fd8      	lsrs	r0, r3, #31
 8001c12:	42b9      	cmp	r1, r7
 8001c14:	d020      	beq.n	8001c58 <__ledf2+0x78>
 8001c16:	45ba      	cmp	sl, r7
 8001c18:	d00f      	beq.n	8001c3a <__ledf2+0x5a>
 8001c1a:	2900      	cmp	r1, #0
 8001c1c:	d12b      	bne.n	8001c76 <__ledf2+0x96>
 8001c1e:	9901      	ldr	r1, [sp, #4]
 8001c20:	430c      	orrs	r4, r1
 8001c22:	4651      	mov	r1, sl
 8001c24:	2900      	cmp	r1, #0
 8001c26:	d137      	bne.n	8001c98 <__ledf2+0xb8>
 8001c28:	4332      	orrs	r2, r6
 8001c2a:	d038      	beq.n	8001c9e <__ledf2+0xbe>
 8001c2c:	2c00      	cmp	r4, #0
 8001c2e:	d144      	bne.n	8001cba <__ledf2+0xda>
 8001c30:	2800      	cmp	r0, #0
 8001c32:	d119      	bne.n	8001c68 <__ledf2+0x88>
 8001c34:	2001      	movs	r0, #1
 8001c36:	4240      	negs	r0, r0
 8001c38:	e016      	b.n	8001c68 <__ledf2+0x88>
 8001c3a:	4316      	orrs	r6, r2
 8001c3c:	d113      	bne.n	8001c66 <__ledf2+0x86>
 8001c3e:	2900      	cmp	r1, #0
 8001c40:	d102      	bne.n	8001c48 <__ledf2+0x68>
 8001c42:	9f01      	ldr	r7, [sp, #4]
 8001c44:	4327      	orrs	r7, r4
 8001c46:	d0f3      	beq.n	8001c30 <__ledf2+0x50>
 8001c48:	4584      	cmp	ip, r0
 8001c4a:	d020      	beq.n	8001c8e <__ledf2+0xae>
 8001c4c:	4663      	mov	r3, ip
 8001c4e:	2002      	movs	r0, #2
 8001c50:	3b01      	subs	r3, #1
 8001c52:	4018      	ands	r0, r3
 8001c54:	3801      	subs	r0, #1
 8001c56:	e007      	b.n	8001c68 <__ledf2+0x88>
 8001c58:	9f01      	ldr	r7, [sp, #4]
 8001c5a:	4327      	orrs	r7, r4
 8001c5c:	d103      	bne.n	8001c66 <__ledf2+0x86>
 8001c5e:	458a      	cmp	sl, r1
 8001c60:	d1f4      	bne.n	8001c4c <__ledf2+0x6c>
 8001c62:	4316      	orrs	r6, r2
 8001c64:	d01f      	beq.n	8001ca6 <__ledf2+0xc6>
 8001c66:	2002      	movs	r0, #2
 8001c68:	b003      	add	sp, #12
 8001c6a:	bcf0      	pop	{r4, r5, r6, r7}
 8001c6c:	46bb      	mov	fp, r7
 8001c6e:	46b2      	mov	sl, r6
 8001c70:	46a9      	mov	r9, r5
 8001c72:	46a0      	mov	r8, r4
 8001c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c76:	4654      	mov	r4, sl
 8001c78:	2c00      	cmp	r4, #0
 8001c7a:	d0e7      	beq.n	8001c4c <__ledf2+0x6c>
 8001c7c:	4584      	cmp	ip, r0
 8001c7e:	d1e5      	bne.n	8001c4c <__ledf2+0x6c>
 8001c80:	4551      	cmp	r1, sl
 8001c82:	dce3      	bgt.n	8001c4c <__ledf2+0x6c>
 8001c84:	db03      	blt.n	8001c8e <__ledf2+0xae>
 8001c86:	9b01      	ldr	r3, [sp, #4]
 8001c88:	42b3      	cmp	r3, r6
 8001c8a:	d8df      	bhi.n	8001c4c <__ledf2+0x6c>
 8001c8c:	d00f      	beq.n	8001cae <__ledf2+0xce>
 8001c8e:	4663      	mov	r3, ip
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0cf      	beq.n	8001c34 <__ledf2+0x54>
 8001c94:	4660      	mov	r0, ip
 8001c96:	e7e7      	b.n	8001c68 <__ledf2+0x88>
 8001c98:	2c00      	cmp	r4, #0
 8001c9a:	d0c9      	beq.n	8001c30 <__ledf2+0x50>
 8001c9c:	e7d4      	b.n	8001c48 <__ledf2+0x68>
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	2c00      	cmp	r4, #0
 8001ca2:	d0e1      	beq.n	8001c68 <__ledf2+0x88>
 8001ca4:	e7d2      	b.n	8001c4c <__ledf2+0x6c>
 8001ca6:	4584      	cmp	ip, r0
 8001ca8:	d1d0      	bne.n	8001c4c <__ledf2+0x6c>
 8001caa:	2000      	movs	r0, #0
 8001cac:	e7dc      	b.n	8001c68 <__ledf2+0x88>
 8001cae:	45c8      	cmp	r8, r9
 8001cb0:	d8cc      	bhi.n	8001c4c <__ledf2+0x6c>
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	45c8      	cmp	r8, r9
 8001cb6:	d2d7      	bcs.n	8001c68 <__ledf2+0x88>
 8001cb8:	e7e9      	b.n	8001c8e <__ledf2+0xae>
 8001cba:	4584      	cmp	ip, r0
 8001cbc:	d0e3      	beq.n	8001c86 <__ledf2+0xa6>
 8001cbe:	e7c5      	b.n	8001c4c <__ledf2+0x6c>
 8001cc0:	000007ff 	.word	0x000007ff

08001cc4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b08b      	sub	sp, #44	@ 0x2c
 8001cc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cca:	2414      	movs	r4, #20
 8001ccc:	193b      	adds	r3, r7, r4
 8001cce:	0018      	movs	r0, r3
 8001cd0:	2314      	movs	r3, #20
 8001cd2:	001a      	movs	r2, r3
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	f003 fb05 	bl	80052e4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cda:	4b41      	ldr	r3, [pc, #260]	@ (8001de0 <MX_GPIO_Init+0x11c>)
 8001cdc:	695a      	ldr	r2, [r3, #20]
 8001cde:	4b40      	ldr	r3, [pc, #256]	@ (8001de0 <MX_GPIO_Init+0x11c>)
 8001ce0:	2180      	movs	r1, #128	@ 0x80
 8001ce2:	0309      	lsls	r1, r1, #12
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	615a      	str	r2, [r3, #20]
 8001ce8:	4b3d      	ldr	r3, [pc, #244]	@ (8001de0 <MX_GPIO_Init+0x11c>)
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	2380      	movs	r3, #128	@ 0x80
 8001cee:	031b      	lsls	r3, r3, #12
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cf6:	4b3a      	ldr	r3, [pc, #232]	@ (8001de0 <MX_GPIO_Init+0x11c>)
 8001cf8:	695a      	ldr	r2, [r3, #20]
 8001cfa:	4b39      	ldr	r3, [pc, #228]	@ (8001de0 <MX_GPIO_Init+0x11c>)
 8001cfc:	2180      	movs	r1, #128	@ 0x80
 8001cfe:	03c9      	lsls	r1, r1, #15
 8001d00:	430a      	orrs	r2, r1
 8001d02:	615a      	str	r2, [r3, #20]
 8001d04:	4b36      	ldr	r3, [pc, #216]	@ (8001de0 <MX_GPIO_Init+0x11c>)
 8001d06:	695a      	ldr	r2, [r3, #20]
 8001d08:	2380      	movs	r3, #128	@ 0x80
 8001d0a:	03db      	lsls	r3, r3, #15
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	4b33      	ldr	r3, [pc, #204]	@ (8001de0 <MX_GPIO_Init+0x11c>)
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	4b32      	ldr	r3, [pc, #200]	@ (8001de0 <MX_GPIO_Init+0x11c>)
 8001d18:	2180      	movs	r1, #128	@ 0x80
 8001d1a:	0289      	lsls	r1, r1, #10
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	615a      	str	r2, [r3, #20]
 8001d20:	4b2f      	ldr	r3, [pc, #188]	@ (8001de0 <MX_GPIO_Init+0x11c>)
 8001d22:	695a      	ldr	r2, [r3, #20]
 8001d24:	2380      	movs	r3, #128	@ 0x80
 8001d26:	029b      	lsls	r3, r3, #10
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001de0 <MX_GPIO_Init+0x11c>)
 8001d30:	695a      	ldr	r2, [r3, #20]
 8001d32:	4b2b      	ldr	r3, [pc, #172]	@ (8001de0 <MX_GPIO_Init+0x11c>)
 8001d34:	2180      	movs	r1, #128	@ 0x80
 8001d36:	02c9      	lsls	r1, r1, #11
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	615a      	str	r2, [r3, #20]
 8001d3c:	4b28      	ldr	r3, [pc, #160]	@ (8001de0 <MX_GPIO_Init+0x11c>)
 8001d3e:	695a      	ldr	r2, [r3, #20]
 8001d40:	2380      	movs	r3, #128	@ 0x80
 8001d42:	02db      	lsls	r3, r3, #11
 8001d44:	4013      	ands	r3, r2
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d4a:	2390      	movs	r3, #144	@ 0x90
 8001d4c:	05db      	lsls	r3, r3, #23
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2120      	movs	r1, #32
 8001d52:	0018      	movs	r0, r3
 8001d54:	f000 fe8e 	bl	8002a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001d58:	2380      	movs	r3, #128	@ 0x80
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4821      	ldr	r0, [pc, #132]	@ (8001de4 <MX_GPIO_Init+0x120>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	0019      	movs	r1, r3
 8001d62:	f000 fe87 	bl	8002a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d66:	193b      	adds	r3, r7, r4
 8001d68:	2280      	movs	r2, #128	@ 0x80
 8001d6a:	0192      	lsls	r2, r2, #6
 8001d6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d6e:	193b      	adds	r3, r7, r4
 8001d70:	2284      	movs	r2, #132	@ 0x84
 8001d72:	0392      	lsls	r2, r2, #14
 8001d74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	193b      	adds	r3, r7, r4
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d7c:	193b      	adds	r3, r7, r4
 8001d7e:	4a1a      	ldr	r2, [pc, #104]	@ (8001de8 <MX_GPIO_Init+0x124>)
 8001d80:	0019      	movs	r1, r3
 8001d82:	0010      	movs	r0, r2
 8001d84:	f000 fcfe 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d88:	193b      	adds	r3, r7, r4
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8e:	193b      	adds	r3, r7, r4
 8001d90:	2201      	movs	r2, #1
 8001d92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	193b      	adds	r3, r7, r4
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	193b      	adds	r3, r7, r4
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001da0:	193a      	adds	r2, r7, r4
 8001da2:	2390      	movs	r3, #144	@ 0x90
 8001da4:	05db      	lsls	r3, r3, #23
 8001da6:	0011      	movs	r1, r2
 8001da8:	0018      	movs	r0, r3
 8001daa:	f000 fceb 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001dae:	0021      	movs	r1, r4
 8001db0:	187b      	adds	r3, r7, r1
 8001db2:	2280      	movs	r2, #128	@ 0x80
 8001db4:	0052      	lsls	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db8:	187b      	adds	r3, r7, r1
 8001dba:	2201      	movs	r2, #1
 8001dbc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	187b      	adds	r3, r7, r1
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	187b      	adds	r3, r7, r1
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001dca:	187b      	adds	r3, r7, r1
 8001dcc:	4a05      	ldr	r2, [pc, #20]	@ (8001de4 <MX_GPIO_Init+0x120>)
 8001dce:	0019      	movs	r1, r3
 8001dd0:	0010      	movs	r0, r2
 8001dd2:	f000 fcd7 	bl	8002784 <HAL_GPIO_Init>

}
 8001dd6:	46c0      	nop			@ (mov r8, r8)
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b00b      	add	sp, #44	@ 0x2c
 8001ddc:	bd90      	pop	{r4, r7, pc}
 8001dde:	46c0      	nop			@ (mov r8, r8)
 8001de0:	40021000 	.word	0x40021000
 8001de4:	48000400 	.word	0x48000400
 8001de8:	48000800 	.word	0x48000800

08001dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dec:	b5b0      	push	{r4, r5, r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001df2:	f000 fb8b 	bl	800250c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001df6:	f000 f87f 	bl	8001ef8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dfa:	f7ff ff63 	bl	8001cc4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001dfe:	f000 fadf 	bl	80023c0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001e02:	f000 f8d3 	bl	8001fac <MX_SPI1_Init>
  MX_TIM1_Init();
 8001e06:	f000 f9c3 	bl	8002190 <MX_TIM1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* receive data from the ADC */
	  uint8_t tx_buf[ADC_BUF_SIZE] = {0};
 8001e0a:	2408      	movs	r4, #8
 8001e0c:	193b      	adds	r3, r7, r4
 8001e0e:	4a34      	ldr	r2, [pc, #208]	@ (8001ee0 <main+0xf4>)
 8001e10:	8812      	ldrh	r2, [r2, #0]
 8001e12:	801a      	strh	r2, [r3, #0]
 8001e14:	2202      	movs	r2, #2
 8001e16:	2100      	movs	r1, #0
 8001e18:	5499      	strb	r1, [r3, r2]
	  tx_buf[0] = 0x01; // start bit
 8001e1a:	193b      	adds	r3, r7, r4
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	701a      	strb	r2, [r3, #0]
	  tx_buf[1] = ADC_SINGLE | ADC_CH0; // channel select byte
 8001e20:	193b      	adds	r3, r7, r4
 8001e22:	2208      	movs	r2, #8
 8001e24:	705a      	strb	r2, [r3, #1]

	  uint8_t rx_buf[ADC_BUF_SIZE] = {0};
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	4a2d      	ldr	r2, [pc, #180]	@ (8001ee0 <main+0xf4>)
 8001e2a:	8812      	ldrh	r2, [r2, #0]
 8001e2c:	801a      	strh	r2, [r3, #0]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	2100      	movs	r1, #0
 8001e32:	5499      	strb	r1, [r3, r2]

	  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); // reset CS pin to latch
 8001e34:	2380      	movs	r3, #128	@ 0x80
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	482a      	ldr	r0, [pc, #168]	@ (8001ee4 <main+0xf8>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	0019      	movs	r1, r3
 8001e3e:	f000 fe19 	bl	8002a74 <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, tx_buf, rx_buf, ADC_BUF_SIZE * sizeof(uint8_t), HAL_MAX_DELAY); // NOTE: will block indefinitely until successful
 8001e42:	1d3a      	adds	r2, r7, #4
 8001e44:	1939      	adds	r1, r7, r4
 8001e46:	4828      	ldr	r0, [pc, #160]	@ (8001ee8 <main+0xfc>)
 8001e48:	2301      	movs	r3, #1
 8001e4a:	425b      	negs	r3, r3
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	2303      	movs	r3, #3
 8001e50:	f001 fcd6 	bl	8003800 <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); // set CS pin to unlatch
 8001e54:	2380      	movs	r3, #128	@ 0x80
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4822      	ldr	r0, [pc, #136]	@ (8001ee4 <main+0xf8>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	0019      	movs	r1, r3
 8001e5e:	f000 fe09 	bl	8002a74 <HAL_GPIO_WritePin>

	  /* convert ADC data to a PWM signal */
	  uint16_t adc_data = ( (rx_buf[1] & 0x03) << 0x08 ) | rx_buf[2]; //save buffer contents to a 10-bit uint
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	785b      	ldrb	r3, [r3, #1]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	b21a      	sxth	r2, r3
 8001e6a:	23c0      	movs	r3, #192	@ 0xc0
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4013      	ands	r3, r2
 8001e70:	b21a      	sxth	r2, r3
 8001e72:	1d3b      	adds	r3, r7, #4
 8001e74:	789b      	ldrb	r3, [r3, #2]
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	b21a      	sxth	r2, r3
 8001e7c:	2116      	movs	r1, #22
 8001e7e:	187b      	adds	r3, r7, r1
 8001e80:	801a      	strh	r2, [r3, #0]

	  float adc_data_norm = (float) adc_data / ADC_MAX; // normalize ADC data range to (0, 1)
 8001e82:	187b      	adds	r3, r7, r1
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	0018      	movs	r0, r3
 8001e88:	f7fe fb08 	bl	800049c <__aeabi_ui2f>
 8001e8c:	1c03      	adds	r3, r0, #0
 8001e8e:	4917      	ldr	r1, [pc, #92]	@ (8001eec <main+0x100>)
 8001e90:	1c18      	adds	r0, r3, #0
 8001e92:	f7fe f9e3 	bl	800025c <__aeabi_fdiv>
 8001e96:	1c03      	adds	r3, r0, #0
 8001e98:	613b      	str	r3, [r7, #16]
	  uint16_t cmp = (uint16_t) (adc_data_norm * (PWM_MAX_SET - PWM_MIN_SET) + PWM_MIN_SET);
 8001e9a:	6938      	ldr	r0, [r7, #16]
 8001e9c:	f7ff fd44 	bl	8001928 <__aeabi_f2d>
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	4b13      	ldr	r3, [pc, #76]	@ (8001ef0 <main+0x104>)
 8001ea4:	f7fe fea0 	bl	8000be8 <__aeabi_dmul>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	000b      	movs	r3, r1
 8001eac:	0010      	movs	r0, r2
 8001eae:	0019      	movs	r1, r3
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef0 <main+0x104>)
 8001eb4:	f7fe fb34 	bl	8000520 <__aeabi_dadd>
 8001eb8:	0002      	movs	r2, r0
 8001eba:	000b      	movs	r3, r1
 8001ebc:	250e      	movs	r5, #14
 8001ebe:	197c      	adds	r4, r7, r5
 8001ec0:	0010      	movs	r0, r2
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	f7fe f9ac 	bl	8000220 <__aeabi_d2uiz>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	8023      	strh	r3, [r4, #0]

	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, cmp);
 8001ecc:	4b09      	ldr	r3, [pc, #36]	@ (8001ef4 <main+0x108>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	197a      	adds	r2, r7, r5
 8001ed2:	8812      	ldrh	r2, [r2, #0]
 8001ed4:	635a      	str	r2, [r3, #52]	@ 0x34

	  HAL_Delay(10);
 8001ed6:	200a      	movs	r0, #10
 8001ed8:	f000 fb7c 	bl	80025d4 <HAL_Delay>
  {
 8001edc:	46c0      	nop			@ (mov r8, r8)
 8001ede:	e794      	b.n	8001e0a <main+0x1e>
 8001ee0:	08005354 	.word	0x08005354
 8001ee4:	48000400 	.word	0x48000400
 8001ee8:	20000028 	.word	0x20000028
 8001eec:	447fc000 	.word	0x447fc000
 8001ef0:	40a77000 	.word	0x40a77000
 8001ef4:	2000008c 	.word	0x2000008c

08001ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ef8:	b590      	push	{r4, r7, lr}
 8001efa:	b099      	sub	sp, #100	@ 0x64
 8001efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001efe:	242c      	movs	r4, #44	@ 0x2c
 8001f00:	193b      	adds	r3, r7, r4
 8001f02:	0018      	movs	r0, r3
 8001f04:	2334      	movs	r3, #52	@ 0x34
 8001f06:	001a      	movs	r2, r3
 8001f08:	2100      	movs	r1, #0
 8001f0a:	f003 f9eb 	bl	80052e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f0e:	231c      	movs	r3, #28
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	0018      	movs	r0, r3
 8001f14:	2310      	movs	r3, #16
 8001f16:	001a      	movs	r2, r3
 8001f18:	2100      	movs	r1, #0
 8001f1a:	f003 f9e3 	bl	80052e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f1e:	003b      	movs	r3, r7
 8001f20:	0018      	movs	r0, r3
 8001f22:	231c      	movs	r3, #28
 8001f24:	001a      	movs	r2, r3
 8001f26:	2100      	movs	r1, #0
 8001f28:	f003 f9dc 	bl	80052e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8001f2c:	193b      	adds	r3, r7, r4
 8001f2e:	2220      	movs	r2, #32
 8001f30:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001f32:	193b      	adds	r3, r7, r4
 8001f34:	2201      	movs	r2, #1
 8001f36:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f38:	193b      	adds	r3, r7, r4
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f3e:	193b      	adds	r3, r7, r4
 8001f40:	0018      	movs	r0, r3
 8001f42:	f000 fdb5 	bl	8002ab0 <HAL_RCC_OscConfig>
 8001f46:	1e03      	subs	r3, r0, #0
 8001f48:	d001      	beq.n	8001f4e <SystemClock_Config+0x56>
  {
    Error_Handler();
 8001f4a:	f000 f828 	bl	8001f9e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f4e:	211c      	movs	r1, #28
 8001f50:	187b      	adds	r3, r7, r1
 8001f52:	2207      	movs	r2, #7
 8001f54:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001f56:	187b      	adds	r3, r7, r1
 8001f58:	2203      	movs	r2, #3
 8001f5a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f5c:	187b      	adds	r3, r7, r1
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f62:	187b      	adds	r3, r7, r1
 8001f64:	2200      	movs	r2, #0
 8001f66:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f68:	187b      	adds	r3, r7, r1
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f001 f925 	bl	80031bc <HAL_RCC_ClockConfig>
 8001f72:	1e03      	subs	r3, r0, #0
 8001f74:	d001      	beq.n	8001f7a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001f76:	f000 f812 	bl	8001f9e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f7a:	003b      	movs	r3, r7
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f80:	003b      	movs	r3, r7
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f86:	003b      	movs	r3, r7
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f001 fa83 	bl	8003494 <HAL_RCCEx_PeriphCLKConfig>
 8001f8e:	1e03      	subs	r3, r0, #0
 8001f90:	d001      	beq.n	8001f96 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001f92:	f000 f804 	bl	8001f9e <Error_Handler>
  }
}
 8001f96:	46c0      	nop			@ (mov r8, r8)
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b019      	add	sp, #100	@ 0x64
 8001f9c:	bd90      	pop	{r4, r7, pc}

08001f9e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa2:	b672      	cpsid	i
}
 8001fa4:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fa6:	46c0      	nop			@ (mov r8, r8)
 8001fa8:	e7fd      	b.n	8001fa6 <Error_Handler+0x8>
	...

08001fac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002020 <MX_SPI1_Init+0x74>)
 8001fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8002024 <MX_SPI1_Init+0x78>)
 8001fb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8002020 <MX_SPI1_Init+0x74>)
 8001fb8:	2282      	movs	r2, #130	@ 0x82
 8001fba:	0052      	lsls	r2, r2, #1
 8001fbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fbe:	4b18      	ldr	r3, [pc, #96]	@ (8002020 <MX_SPI1_Init+0x74>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fc4:	4b16      	ldr	r3, [pc, #88]	@ (8002020 <MX_SPI1_Init+0x74>)
 8001fc6:	22e0      	movs	r2, #224	@ 0xe0
 8001fc8:	00d2      	lsls	r2, r2, #3
 8001fca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fcc:	4b14      	ldr	r3, [pc, #80]	@ (8002020 <MX_SPI1_Init+0x74>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fd2:	4b13      	ldr	r3, [pc, #76]	@ (8002020 <MX_SPI1_Init+0x74>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	@ (8002020 <MX_SPI1_Init+0x74>)
 8001fda:	2280      	movs	r2, #128	@ 0x80
 8001fdc:	0092      	lsls	r2, r2, #2
 8001fde:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8002020 <MX_SPI1_Init+0x74>)
 8001fe2:	2218      	movs	r2, #24
 8001fe4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8002020 <MX_SPI1_Init+0x74>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fec:	4b0c      	ldr	r3, [pc, #48]	@ (8002020 <MX_SPI1_Init+0x74>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8002020 <MX_SPI1_Init+0x74>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ff8:	4b09      	ldr	r3, [pc, #36]	@ (8002020 <MX_SPI1_Init+0x74>)
 8001ffa:	2207      	movs	r2, #7
 8001ffc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ffe:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <MX_SPI1_Init+0x74>)
 8002000:	2200      	movs	r2, #0
 8002002:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002004:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <MX_SPI1_Init+0x74>)
 8002006:	2208      	movs	r2, #8
 8002008:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800200a:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <MX_SPI1_Init+0x74>)
 800200c:	0018      	movs	r0, r3
 800200e:	f001 fb3f 	bl	8003690 <HAL_SPI_Init>
 8002012:	1e03      	subs	r3, r0, #0
 8002014:	d001      	beq.n	800201a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002016:	f7ff ffc2 	bl	8001f9e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800201a:	46c0      	nop			@ (mov r8, r8)
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20000028 	.word	0x20000028
 8002024:	40013000 	.word	0x40013000

08002028 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002028:	b590      	push	{r4, r7, lr}
 800202a:	b08b      	sub	sp, #44	@ 0x2c
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	2414      	movs	r4, #20
 8002032:	193b      	adds	r3, r7, r4
 8002034:	0018      	movs	r0, r3
 8002036:	2314      	movs	r3, #20
 8002038:	001a      	movs	r2, r3
 800203a:	2100      	movs	r1, #0
 800203c:	f003 f952 	bl	80052e4 <memset>
  if(spiHandle->Instance==SPI1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a2e      	ldr	r2, [pc, #184]	@ (8002100 <HAL_SPI_MspInit+0xd8>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d155      	bne.n	80020f6 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800204a:	4b2e      	ldr	r3, [pc, #184]	@ (8002104 <HAL_SPI_MspInit+0xdc>)
 800204c:	699a      	ldr	r2, [r3, #24]
 800204e:	4b2d      	ldr	r3, [pc, #180]	@ (8002104 <HAL_SPI_MspInit+0xdc>)
 8002050:	2180      	movs	r1, #128	@ 0x80
 8002052:	0149      	lsls	r1, r1, #5
 8002054:	430a      	orrs	r2, r1
 8002056:	619a      	str	r2, [r3, #24]
 8002058:	4b2a      	ldr	r3, [pc, #168]	@ (8002104 <HAL_SPI_MspInit+0xdc>)
 800205a:	699a      	ldr	r2, [r3, #24]
 800205c:	2380      	movs	r3, #128	@ 0x80
 800205e:	015b      	lsls	r3, r3, #5
 8002060:	4013      	ands	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002066:	4b27      	ldr	r3, [pc, #156]	@ (8002104 <HAL_SPI_MspInit+0xdc>)
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	4b26      	ldr	r3, [pc, #152]	@ (8002104 <HAL_SPI_MspInit+0xdc>)
 800206c:	2180      	movs	r1, #128	@ 0x80
 800206e:	0289      	lsls	r1, r1, #10
 8002070:	430a      	orrs	r2, r1
 8002072:	615a      	str	r2, [r3, #20]
 8002074:	4b23      	ldr	r3, [pc, #140]	@ (8002104 <HAL_SPI_MspInit+0xdc>)
 8002076:	695a      	ldr	r2, [r3, #20]
 8002078:	2380      	movs	r3, #128	@ 0x80
 800207a:	029b      	lsls	r3, r3, #10
 800207c:	4013      	ands	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002082:	4b20      	ldr	r3, [pc, #128]	@ (8002104 <HAL_SPI_MspInit+0xdc>)
 8002084:	695a      	ldr	r2, [r3, #20]
 8002086:	4b1f      	ldr	r3, [pc, #124]	@ (8002104 <HAL_SPI_MspInit+0xdc>)
 8002088:	2180      	movs	r1, #128	@ 0x80
 800208a:	02c9      	lsls	r1, r1, #11
 800208c:	430a      	orrs	r2, r1
 800208e:	615a      	str	r2, [r3, #20]
 8002090:	4b1c      	ldr	r3, [pc, #112]	@ (8002104 <HAL_SPI_MspInit+0xdc>)
 8002092:	695a      	ldr	r2, [r3, #20]
 8002094:	2380      	movs	r3, #128	@ 0x80
 8002096:	02db      	lsls	r3, r3, #11
 8002098:	4013      	ands	r3, r2
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800209e:	193b      	adds	r3, r7, r4
 80020a0:	22c0      	movs	r2, #192	@ 0xc0
 80020a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	193b      	adds	r3, r7, r4
 80020a6:	2202      	movs	r2, #2
 80020a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	193b      	adds	r3, r7, r4
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020b0:	193b      	adds	r3, r7, r4
 80020b2:	2203      	movs	r2, #3
 80020b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80020b6:	193b      	adds	r3, r7, r4
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020bc:	193a      	adds	r2, r7, r4
 80020be:	2390      	movs	r3, #144	@ 0x90
 80020c0:	05db      	lsls	r3, r3, #23
 80020c2:	0011      	movs	r1, r2
 80020c4:	0018      	movs	r0, r3
 80020c6:	f000 fb5d 	bl	8002784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020ca:	0021      	movs	r1, r4
 80020cc:	187b      	adds	r3, r7, r1
 80020ce:	2208      	movs	r2, #8
 80020d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d2:	187b      	adds	r3, r7, r1
 80020d4:	2202      	movs	r2, #2
 80020d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	187b      	adds	r3, r7, r1
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020de:	187b      	adds	r3, r7, r1
 80020e0:	2203      	movs	r2, #3
 80020e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80020e4:	187b      	adds	r3, r7, r1
 80020e6:	2200      	movs	r2, #0
 80020e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ea:	187b      	adds	r3, r7, r1
 80020ec:	4a06      	ldr	r2, [pc, #24]	@ (8002108 <HAL_SPI_MspInit+0xe0>)
 80020ee:	0019      	movs	r1, r3
 80020f0:	0010      	movs	r0, r2
 80020f2:	f000 fb47 	bl	8002784 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80020f6:	46c0      	nop			@ (mov r8, r8)
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b00b      	add	sp, #44	@ 0x2c
 80020fc:	bd90      	pop	{r4, r7, pc}
 80020fe:	46c0      	nop			@ (mov r8, r8)
 8002100:	40013000 	.word	0x40013000
 8002104:	40021000 	.word	0x40021000
 8002108:	48000400 	.word	0x48000400

0800210c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002112:	4b0f      	ldr	r3, [pc, #60]	@ (8002150 <HAL_MspInit+0x44>)
 8002114:	699a      	ldr	r2, [r3, #24]
 8002116:	4b0e      	ldr	r3, [pc, #56]	@ (8002150 <HAL_MspInit+0x44>)
 8002118:	2101      	movs	r1, #1
 800211a:	430a      	orrs	r2, r1
 800211c:	619a      	str	r2, [r3, #24]
 800211e:	4b0c      	ldr	r3, [pc, #48]	@ (8002150 <HAL_MspInit+0x44>)
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2201      	movs	r2, #1
 8002124:	4013      	ands	r3, r2
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800212a:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <HAL_MspInit+0x44>)
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	4b08      	ldr	r3, [pc, #32]	@ (8002150 <HAL_MspInit+0x44>)
 8002130:	2180      	movs	r1, #128	@ 0x80
 8002132:	0549      	lsls	r1, r1, #21
 8002134:	430a      	orrs	r2, r1
 8002136:	61da      	str	r2, [r3, #28]
 8002138:	4b05      	ldr	r3, [pc, #20]	@ (8002150 <HAL_MspInit+0x44>)
 800213a:	69da      	ldr	r2, [r3, #28]
 800213c:	2380      	movs	r3, #128	@ 0x80
 800213e:	055b      	lsls	r3, r3, #21
 8002140:	4013      	ands	r3, r2
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002146:	46c0      	nop			@ (mov r8, r8)
 8002148:	46bd      	mov	sp, r7
 800214a:	b002      	add	sp, #8
 800214c:	bd80      	pop	{r7, pc}
 800214e:	46c0      	nop			@ (mov r8, r8)
 8002150:	40021000 	.word	0x40021000

08002154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002158:	46c0      	nop			@ (mov r8, r8)
 800215a:	e7fd      	b.n	8002158 <NMI_Handler+0x4>

0800215c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002160:	46c0      	nop			@ (mov r8, r8)
 8002162:	e7fd      	b.n	8002160 <HardFault_Handler+0x4>

08002164 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002168:	46c0      	nop			@ (mov r8, r8)
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002172:	46c0      	nop			@ (mov r8, r8)
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800217c:	f000 fa0e 	bl	800259c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002180:	46c0      	nop			@ (mov r8, r8)
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800218a:	46c0      	nop			@ (mov r8, r8)
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b096      	sub	sp, #88	@ 0x58
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002196:	2348      	movs	r3, #72	@ 0x48
 8002198:	18fb      	adds	r3, r7, r3
 800219a:	0018      	movs	r0, r3
 800219c:	2310      	movs	r3, #16
 800219e:	001a      	movs	r2, r3
 80021a0:	2100      	movs	r1, #0
 80021a2:	f003 f89f 	bl	80052e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a6:	2340      	movs	r3, #64	@ 0x40
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	0018      	movs	r0, r3
 80021ac:	2308      	movs	r3, #8
 80021ae:	001a      	movs	r2, r3
 80021b0:	2100      	movs	r1, #0
 80021b2:	f003 f897 	bl	80052e4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021b6:	2324      	movs	r3, #36	@ 0x24
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	0018      	movs	r0, r3
 80021bc:	231c      	movs	r3, #28
 80021be:	001a      	movs	r2, r3
 80021c0:	2100      	movs	r1, #0
 80021c2:	f003 f88f 	bl	80052e4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	0018      	movs	r0, r3
 80021ca:	2320      	movs	r3, #32
 80021cc:	001a      	movs	r2, r3
 80021ce:	2100      	movs	r1, #0
 80021d0:	f003 f888 	bl	80052e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021d4:	4b46      	ldr	r3, [pc, #280]	@ (80022f0 <MX_TIM1_Init+0x160>)
 80021d6:	4a47      	ldr	r2, [pc, #284]	@ (80022f4 <MX_TIM1_Init+0x164>)
 80021d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80021da:	4b45      	ldr	r3, [pc, #276]	@ (80022f0 <MX_TIM1_Init+0x160>)
 80021dc:	220f      	movs	r2, #15
 80021de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e0:	4b43      	ldr	r3, [pc, #268]	@ (80022f0 <MX_TIM1_Init+0x160>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 80021e6:	4b42      	ldr	r3, [pc, #264]	@ (80022f0 <MX_TIM1_Init+0x160>)
 80021e8:	4a43      	ldr	r2, [pc, #268]	@ (80022f8 <MX_TIM1_Init+0x168>)
 80021ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ec:	4b40      	ldr	r3, [pc, #256]	@ (80022f0 <MX_TIM1_Init+0x160>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021f2:	4b3f      	ldr	r3, [pc, #252]	@ (80022f0 <MX_TIM1_Init+0x160>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f8:	4b3d      	ldr	r3, [pc, #244]	@ (80022f0 <MX_TIM1_Init+0x160>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021fe:	4b3c      	ldr	r3, [pc, #240]	@ (80022f0 <MX_TIM1_Init+0x160>)
 8002200:	0018      	movs	r0, r3
 8002202:	f001 fe55 	bl	8003eb0 <HAL_TIM_Base_Init>
 8002206:	1e03      	subs	r3, r0, #0
 8002208:	d001      	beq.n	800220e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800220a:	f7ff fec8 	bl	8001f9e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800220e:	2148      	movs	r1, #72	@ 0x48
 8002210:	187b      	adds	r3, r7, r1
 8002212:	2280      	movs	r2, #128	@ 0x80
 8002214:	0152      	lsls	r2, r2, #5
 8002216:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002218:	187a      	adds	r2, r7, r1
 800221a:	4b35      	ldr	r3, [pc, #212]	@ (80022f0 <MX_TIM1_Init+0x160>)
 800221c:	0011      	movs	r1, r2
 800221e:	0018      	movs	r0, r3
 8002220:	f001 ffb4 	bl	800418c <HAL_TIM_ConfigClockSource>
 8002224:	1e03      	subs	r3, r0, #0
 8002226:	d001      	beq.n	800222c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002228:	f7ff feb9 	bl	8001f9e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800222c:	4b30      	ldr	r3, [pc, #192]	@ (80022f0 <MX_TIM1_Init+0x160>)
 800222e:	0018      	movs	r0, r3
 8002230:	f001 fe8e 	bl	8003f50 <HAL_TIM_PWM_Init>
 8002234:	1e03      	subs	r3, r0, #0
 8002236:	d001      	beq.n	800223c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8002238:	f7ff feb1 	bl	8001f9e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800223c:	2140      	movs	r1, #64	@ 0x40
 800223e:	187b      	adds	r3, r7, r1
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002244:	187b      	adds	r3, r7, r1
 8002246:	2200      	movs	r2, #0
 8002248:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800224a:	187a      	adds	r2, r7, r1
 800224c:	4b28      	ldr	r3, [pc, #160]	@ (80022f0 <MX_TIM1_Init+0x160>)
 800224e:	0011      	movs	r1, r2
 8002250:	0018      	movs	r0, r3
 8002252:	f002 fb85 	bl	8004960 <HAL_TIMEx_MasterConfigSynchronization>
 8002256:	1e03      	subs	r3, r0, #0
 8002258:	d001      	beq.n	800225e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800225a:	f7ff fea0 	bl	8001f9e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800225e:	2124      	movs	r1, #36	@ 0x24
 8002260:	187b      	adds	r3, r7, r1
 8002262:	2260      	movs	r2, #96	@ 0x60
 8002264:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 3000;
 8002266:	187b      	adds	r3, r7, r1
 8002268:	4a24      	ldr	r2, [pc, #144]	@ (80022fc <MX_TIM1_Init+0x16c>)
 800226a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800226c:	187b      	adds	r3, r7, r1
 800226e:	2200      	movs	r2, #0
 8002270:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002272:	187b      	adds	r3, r7, r1
 8002274:	2200      	movs	r2, #0
 8002276:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002278:	187b      	adds	r3, r7, r1
 800227a:	2200      	movs	r2, #0
 800227c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800227e:	187b      	adds	r3, r7, r1
 8002280:	2200      	movs	r2, #0
 8002282:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002284:	187b      	adds	r3, r7, r1
 8002286:	2200      	movs	r2, #0
 8002288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800228a:	1879      	adds	r1, r7, r1
 800228c:	4b18      	ldr	r3, [pc, #96]	@ (80022f0 <MX_TIM1_Init+0x160>)
 800228e:	2200      	movs	r2, #0
 8002290:	0018      	movs	r0, r3
 8002292:	f001 feb5 	bl	8004000 <HAL_TIM_PWM_ConfigChannel>
 8002296:	1e03      	subs	r3, r0, #0
 8002298:	d001      	beq.n	800229e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800229a:	f7ff fe80 	bl	8001f9e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800229e:	1d3b      	adds	r3, r7, #4
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	2200      	movs	r2, #0
 80022a8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	2200      	movs	r2, #0
 80022b4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022b6:	1d3b      	adds	r3, r7, #4
 80022b8:	2200      	movs	r2, #0
 80022ba:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022bc:	1d3b      	adds	r3, r7, #4
 80022be:	2280      	movs	r2, #128	@ 0x80
 80022c0:	0192      	lsls	r2, r2, #6
 80022c2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022c4:	1d3b      	adds	r3, r7, #4
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022ca:	1d3a      	adds	r2, r7, #4
 80022cc:	4b08      	ldr	r3, [pc, #32]	@ (80022f0 <MX_TIM1_Init+0x160>)
 80022ce:	0011      	movs	r1, r2
 80022d0:	0018      	movs	r0, r3
 80022d2:	f002 fba3 	bl	8004a1c <HAL_TIMEx_ConfigBreakDeadTime>
 80022d6:	1e03      	subs	r3, r0, #0
 80022d8:	d001      	beq.n	80022de <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80022da:	f7ff fe60 	bl	8001f9e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80022de:	4b04      	ldr	r3, [pc, #16]	@ (80022f0 <MX_TIM1_Init+0x160>)
 80022e0:	0018      	movs	r0, r3
 80022e2:	f000 f82d 	bl	8002340 <HAL_TIM_MspPostInit>

}
 80022e6:	46c0      	nop			@ (mov r8, r8)
 80022e8:	46bd      	mov	sp, r7
 80022ea:	b016      	add	sp, #88	@ 0x58
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	46c0      	nop			@ (mov r8, r8)
 80022f0:	2000008c 	.word	0x2000008c
 80022f4:	40012c00 	.word	0x40012c00
 80022f8:	0000ea60 	.word	0x0000ea60
 80022fc:	00000bb8 	.word	0x00000bb8

08002300 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0a      	ldr	r2, [pc, #40]	@ (8002338 <HAL_TIM_Base_MspInit+0x38>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d10d      	bne.n	800232e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002312:	4b0a      	ldr	r3, [pc, #40]	@ (800233c <HAL_TIM_Base_MspInit+0x3c>)
 8002314:	699a      	ldr	r2, [r3, #24]
 8002316:	4b09      	ldr	r3, [pc, #36]	@ (800233c <HAL_TIM_Base_MspInit+0x3c>)
 8002318:	2180      	movs	r1, #128	@ 0x80
 800231a:	0109      	lsls	r1, r1, #4
 800231c:	430a      	orrs	r2, r1
 800231e:	619a      	str	r2, [r3, #24]
 8002320:	4b06      	ldr	r3, [pc, #24]	@ (800233c <HAL_TIM_Base_MspInit+0x3c>)
 8002322:	699a      	ldr	r2, [r3, #24]
 8002324:	2380      	movs	r3, #128	@ 0x80
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	4013      	ands	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800232e:	46c0      	nop			@ (mov r8, r8)
 8002330:	46bd      	mov	sp, r7
 8002332:	b004      	add	sp, #16
 8002334:	bd80      	pop	{r7, pc}
 8002336:	46c0      	nop			@ (mov r8, r8)
 8002338:	40012c00 	.word	0x40012c00
 800233c:	40021000 	.word	0x40021000

08002340 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b089      	sub	sp, #36	@ 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	240c      	movs	r4, #12
 800234a:	193b      	adds	r3, r7, r4
 800234c:	0018      	movs	r0, r3
 800234e:	2314      	movs	r3, #20
 8002350:	001a      	movs	r2, r3
 8002352:	2100      	movs	r1, #0
 8002354:	f002 ffc6 	bl	80052e4 <memset>
  if(timHandle->Instance==TIM1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a16      	ldr	r2, [pc, #88]	@ (80023b8 <HAL_TIM_MspPostInit+0x78>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d125      	bne.n	80023ae <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002362:	4b16      	ldr	r3, [pc, #88]	@ (80023bc <HAL_TIM_MspPostInit+0x7c>)
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	4b15      	ldr	r3, [pc, #84]	@ (80023bc <HAL_TIM_MspPostInit+0x7c>)
 8002368:	2180      	movs	r1, #128	@ 0x80
 800236a:	0289      	lsls	r1, r1, #10
 800236c:	430a      	orrs	r2, r1
 800236e:	615a      	str	r2, [r3, #20]
 8002370:	4b12      	ldr	r3, [pc, #72]	@ (80023bc <HAL_TIM_MspPostInit+0x7c>)
 8002372:	695a      	ldr	r2, [r3, #20]
 8002374:	2380      	movs	r3, #128	@ 0x80
 8002376:	029b      	lsls	r3, r3, #10
 8002378:	4013      	ands	r3, r2
 800237a:	60bb      	str	r3, [r7, #8]
 800237c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800237e:	193b      	adds	r3, r7, r4
 8002380:	2280      	movs	r2, #128	@ 0x80
 8002382:	0052      	lsls	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	0021      	movs	r1, r4
 8002388:	187b      	adds	r3, r7, r1
 800238a:	2202      	movs	r2, #2
 800238c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	187b      	adds	r3, r7, r1
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	187b      	adds	r3, r7, r1
 8002396:	2200      	movs	r2, #0
 8002398:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800239a:	187b      	adds	r3, r7, r1
 800239c:	2202      	movs	r2, #2
 800239e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a0:	187a      	adds	r2, r7, r1
 80023a2:	2390      	movs	r3, #144	@ 0x90
 80023a4:	05db      	lsls	r3, r3, #23
 80023a6:	0011      	movs	r1, r2
 80023a8:	0018      	movs	r0, r3
 80023aa:	f000 f9eb 	bl	8002784 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80023ae:	46c0      	nop			@ (mov r8, r8)
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b009      	add	sp, #36	@ 0x24
 80023b4:	bd90      	pop	{r4, r7, pc}
 80023b6:	46c0      	nop			@ (mov r8, r8)
 80023b8:	40012c00 	.word	0x40012c00
 80023bc:	40021000 	.word	0x40021000

080023c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023c4:	4b14      	ldr	r3, [pc, #80]	@ (8002418 <MX_USART2_UART_Init+0x58>)
 80023c6:	4a15      	ldr	r2, [pc, #84]	@ (800241c <MX_USART2_UART_Init+0x5c>)
 80023c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80023ca:	4b13      	ldr	r3, [pc, #76]	@ (8002418 <MX_USART2_UART_Init+0x58>)
 80023cc:	2296      	movs	r2, #150	@ 0x96
 80023ce:	0212      	lsls	r2, r2, #8
 80023d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023d2:	4b11      	ldr	r3, [pc, #68]	@ (8002418 <MX_USART2_UART_Init+0x58>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002418 <MX_USART2_UART_Init+0x58>)
 80023da:	2200      	movs	r2, #0
 80023dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023de:	4b0e      	ldr	r3, [pc, #56]	@ (8002418 <MX_USART2_UART_Init+0x58>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002418 <MX_USART2_UART_Init+0x58>)
 80023e6:	220c      	movs	r2, #12
 80023e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <MX_USART2_UART_Init+0x58>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f0:	4b09      	ldr	r3, [pc, #36]	@ (8002418 <MX_USART2_UART_Init+0x58>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023f6:	4b08      	ldr	r3, [pc, #32]	@ (8002418 <MX_USART2_UART_Init+0x58>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023fc:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <MX_USART2_UART_Init+0x58>)
 80023fe:	2200      	movs	r2, #0
 8002400:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002402:	4b05      	ldr	r3, [pc, #20]	@ (8002418 <MX_USART2_UART_Init+0x58>)
 8002404:	0018      	movs	r0, r3
 8002406:	f002 fb67 	bl	8004ad8 <HAL_UART_Init>
 800240a:	1e03      	subs	r3, r0, #0
 800240c:	d001      	beq.n	8002412 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800240e:	f7ff fdc6 	bl	8001f9e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002412:	46c0      	nop			@ (mov r8, r8)
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	200000d4 	.word	0x200000d4
 800241c:	40004400 	.word	0x40004400

08002420 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b08b      	sub	sp, #44	@ 0x2c
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	2414      	movs	r4, #20
 800242a:	193b      	adds	r3, r7, r4
 800242c:	0018      	movs	r0, r3
 800242e:	2314      	movs	r3, #20
 8002430:	001a      	movs	r2, r3
 8002432:	2100      	movs	r1, #0
 8002434:	f002 ff56 	bl	80052e4 <memset>
  if(uartHandle->Instance==USART2)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a1c      	ldr	r2, [pc, #112]	@ (80024b0 <HAL_UART_MspInit+0x90>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d132      	bne.n	80024a8 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002442:	4b1c      	ldr	r3, [pc, #112]	@ (80024b4 <HAL_UART_MspInit+0x94>)
 8002444:	69da      	ldr	r2, [r3, #28]
 8002446:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <HAL_UART_MspInit+0x94>)
 8002448:	2180      	movs	r1, #128	@ 0x80
 800244a:	0289      	lsls	r1, r1, #10
 800244c:	430a      	orrs	r2, r1
 800244e:	61da      	str	r2, [r3, #28]
 8002450:	4b18      	ldr	r3, [pc, #96]	@ (80024b4 <HAL_UART_MspInit+0x94>)
 8002452:	69da      	ldr	r2, [r3, #28]
 8002454:	2380      	movs	r3, #128	@ 0x80
 8002456:	029b      	lsls	r3, r3, #10
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245e:	4b15      	ldr	r3, [pc, #84]	@ (80024b4 <HAL_UART_MspInit+0x94>)
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	4b14      	ldr	r3, [pc, #80]	@ (80024b4 <HAL_UART_MspInit+0x94>)
 8002464:	2180      	movs	r1, #128	@ 0x80
 8002466:	0289      	lsls	r1, r1, #10
 8002468:	430a      	orrs	r2, r1
 800246a:	615a      	str	r2, [r3, #20]
 800246c:	4b11      	ldr	r3, [pc, #68]	@ (80024b4 <HAL_UART_MspInit+0x94>)
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	2380      	movs	r3, #128	@ 0x80
 8002472:	029b      	lsls	r3, r3, #10
 8002474:	4013      	ands	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800247a:	0021      	movs	r1, r4
 800247c:	187b      	adds	r3, r7, r1
 800247e:	220c      	movs	r2, #12
 8002480:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	187b      	adds	r3, r7, r1
 8002484:	2202      	movs	r2, #2
 8002486:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	187b      	adds	r3, r7, r1
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248e:	187b      	adds	r3, r7, r1
 8002490:	2200      	movs	r2, #0
 8002492:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002494:	187b      	adds	r3, r7, r1
 8002496:	2201      	movs	r2, #1
 8002498:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249a:	187a      	adds	r2, r7, r1
 800249c:	2390      	movs	r3, #144	@ 0x90
 800249e:	05db      	lsls	r3, r3, #23
 80024a0:	0011      	movs	r1, r2
 80024a2:	0018      	movs	r0, r3
 80024a4:	f000 f96e 	bl	8002784 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80024a8:	46c0      	nop			@ (mov r8, r8)
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b00b      	add	sp, #44	@ 0x2c
 80024ae:	bd90      	pop	{r4, r7, pc}
 80024b0:	40004400 	.word	0x40004400
 80024b4:	40021000 	.word	0x40021000

080024b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024b8:	480d      	ldr	r0, [pc, #52]	@ (80024f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024bc:	480d      	ldr	r0, [pc, #52]	@ (80024f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80024be:	490e      	ldr	r1, [pc, #56]	@ (80024f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024c0:	4a0e      	ldr	r2, [pc, #56]	@ (80024fc <LoopForever+0xe>)
  movs r3, #0
 80024c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c4:	e002      	b.n	80024cc <LoopCopyDataInit>

080024c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ca:	3304      	adds	r3, #4

080024cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d0:	d3f9      	bcc.n	80024c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024d2:	4a0b      	ldr	r2, [pc, #44]	@ (8002500 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024d4:	4c0b      	ldr	r4, [pc, #44]	@ (8002504 <LoopForever+0x16>)
  movs r3, #0
 80024d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d8:	e001      	b.n	80024de <LoopFillZerobss>

080024da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024dc:	3204      	adds	r2, #4

080024de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e0:	d3fb      	bcc.n	80024da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80024e2:	f7ff fe50 	bl	8002186 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80024e6:	f002 ff05 	bl	80052f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024ea:	f7ff fc7f 	bl	8001dec <main>

080024ee <LoopForever>:

LoopForever:
    b LoopForever
 80024ee:	e7fe      	b.n	80024ee <LoopForever>
  ldr   r0, =_estack
 80024f0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80024f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80024fc:	08005414 	.word	0x08005414
  ldr r2, =_sbss
 8002500:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002504:	20000160 	.word	0x20000160

08002508 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002508:	e7fe      	b.n	8002508 <ADC1_COMP_IRQHandler>
	...

0800250c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002510:	4b07      	ldr	r3, [pc, #28]	@ (8002530 <HAL_Init+0x24>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <HAL_Init+0x24>)
 8002516:	2110      	movs	r1, #16
 8002518:	430a      	orrs	r2, r1
 800251a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800251c:	2000      	movs	r0, #0
 800251e:	f000 f809 	bl	8002534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002522:	f7ff fdf3 	bl	800210c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	46c0      	nop			@ (mov r8, r8)
 8002530:	40022000 	.word	0x40022000

08002534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800253c:	4b14      	ldr	r3, [pc, #80]	@ (8002590 <HAL_InitTick+0x5c>)
 800253e:	681c      	ldr	r4, [r3, #0]
 8002540:	4b14      	ldr	r3, [pc, #80]	@ (8002594 <HAL_InitTick+0x60>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	0019      	movs	r1, r3
 8002546:	23fa      	movs	r3, #250	@ 0xfa
 8002548:	0098      	lsls	r0, r3, #2
 800254a:	f7fd fddd 	bl	8000108 <__udivsi3>
 800254e:	0003      	movs	r3, r0
 8002550:	0019      	movs	r1, r3
 8002552:	0020      	movs	r0, r4
 8002554:	f7fd fdd8 	bl	8000108 <__udivsi3>
 8002558:	0003      	movs	r3, r0
 800255a:	0018      	movs	r0, r3
 800255c:	f000 f905 	bl	800276a <HAL_SYSTICK_Config>
 8002560:	1e03      	subs	r3, r0, #0
 8002562:	d001      	beq.n	8002568 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e00f      	b.n	8002588 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b03      	cmp	r3, #3
 800256c:	d80b      	bhi.n	8002586 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	2301      	movs	r3, #1
 8002572:	425b      	negs	r3, r3
 8002574:	2200      	movs	r2, #0
 8002576:	0018      	movs	r0, r3
 8002578:	f000 f8e2 	bl	8002740 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800257c:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <HAL_InitTick+0x64>)
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	e000      	b.n	8002588 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
}
 8002588:	0018      	movs	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	b003      	add	sp, #12
 800258e:	bd90      	pop	{r4, r7, pc}
 8002590:	20000000 	.word	0x20000000
 8002594:	20000008 	.word	0x20000008
 8002598:	20000004 	.word	0x20000004

0800259c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025a0:	4b05      	ldr	r3, [pc, #20]	@ (80025b8 <HAL_IncTick+0x1c>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	001a      	movs	r2, r3
 80025a6:	4b05      	ldr	r3, [pc, #20]	@ (80025bc <HAL_IncTick+0x20>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	18d2      	adds	r2, r2, r3
 80025ac:	4b03      	ldr	r3, [pc, #12]	@ (80025bc <HAL_IncTick+0x20>)
 80025ae:	601a      	str	r2, [r3, #0]
}
 80025b0:	46c0      	nop			@ (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	46c0      	nop			@ (mov r8, r8)
 80025b8:	20000008 	.word	0x20000008
 80025bc:	2000015c 	.word	0x2000015c

080025c0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  return uwTick;
 80025c4:	4b02      	ldr	r3, [pc, #8]	@ (80025d0 <HAL_GetTick+0x10>)
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	0018      	movs	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	46c0      	nop			@ (mov r8, r8)
 80025d0:	2000015c 	.word	0x2000015c

080025d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025dc:	f7ff fff0 	bl	80025c0 <HAL_GetTick>
 80025e0:	0003      	movs	r3, r0
 80025e2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3301      	adds	r3, #1
 80025ec:	d005      	beq.n	80025fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002618 <HAL_Delay+0x44>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	001a      	movs	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	189b      	adds	r3, r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80025fa:	46c0      	nop			@ (mov r8, r8)
 80025fc:	f7ff ffe0 	bl	80025c0 <HAL_GetTick>
 8002600:	0002      	movs	r2, r0
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	429a      	cmp	r2, r3
 800260a:	d8f7      	bhi.n	80025fc <HAL_Delay+0x28>
  {
  }
}
 800260c:	46c0      	nop			@ (mov r8, r8)
 800260e:	46c0      	nop			@ (mov r8, r8)
 8002610:	46bd      	mov	sp, r7
 8002612:	b004      	add	sp, #16
 8002614:	bd80      	pop	{r7, pc}
 8002616:	46c0      	nop			@ (mov r8, r8)
 8002618:	20000008 	.word	0x20000008

0800261c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800261c:	b590      	push	{r4, r7, lr}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	0002      	movs	r2, r0
 8002624:	6039      	str	r1, [r7, #0]
 8002626:	1dfb      	adds	r3, r7, #7
 8002628:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800262a:	1dfb      	adds	r3, r7, #7
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002630:	d828      	bhi.n	8002684 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002632:	4a2f      	ldr	r2, [pc, #188]	@ (80026f0 <__NVIC_SetPriority+0xd4>)
 8002634:	1dfb      	adds	r3, r7, #7
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	b25b      	sxtb	r3, r3
 800263a:	089b      	lsrs	r3, r3, #2
 800263c:	33c0      	adds	r3, #192	@ 0xc0
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	589b      	ldr	r3, [r3, r2]
 8002642:	1dfa      	adds	r2, r7, #7
 8002644:	7812      	ldrb	r2, [r2, #0]
 8002646:	0011      	movs	r1, r2
 8002648:	2203      	movs	r2, #3
 800264a:	400a      	ands	r2, r1
 800264c:	00d2      	lsls	r2, r2, #3
 800264e:	21ff      	movs	r1, #255	@ 0xff
 8002650:	4091      	lsls	r1, r2
 8002652:	000a      	movs	r2, r1
 8002654:	43d2      	mvns	r2, r2
 8002656:	401a      	ands	r2, r3
 8002658:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	019b      	lsls	r3, r3, #6
 800265e:	22ff      	movs	r2, #255	@ 0xff
 8002660:	401a      	ands	r2, r3
 8002662:	1dfb      	adds	r3, r7, #7
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	0018      	movs	r0, r3
 8002668:	2303      	movs	r3, #3
 800266a:	4003      	ands	r3, r0
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002670:	481f      	ldr	r0, [pc, #124]	@ (80026f0 <__NVIC_SetPriority+0xd4>)
 8002672:	1dfb      	adds	r3, r7, #7
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	b25b      	sxtb	r3, r3
 8002678:	089b      	lsrs	r3, r3, #2
 800267a:	430a      	orrs	r2, r1
 800267c:	33c0      	adds	r3, #192	@ 0xc0
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002682:	e031      	b.n	80026e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002684:	4a1b      	ldr	r2, [pc, #108]	@ (80026f4 <__NVIC_SetPriority+0xd8>)
 8002686:	1dfb      	adds	r3, r7, #7
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	0019      	movs	r1, r3
 800268c:	230f      	movs	r3, #15
 800268e:	400b      	ands	r3, r1
 8002690:	3b08      	subs	r3, #8
 8002692:	089b      	lsrs	r3, r3, #2
 8002694:	3306      	adds	r3, #6
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	18d3      	adds	r3, r2, r3
 800269a:	3304      	adds	r3, #4
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	1dfa      	adds	r2, r7, #7
 80026a0:	7812      	ldrb	r2, [r2, #0]
 80026a2:	0011      	movs	r1, r2
 80026a4:	2203      	movs	r2, #3
 80026a6:	400a      	ands	r2, r1
 80026a8:	00d2      	lsls	r2, r2, #3
 80026aa:	21ff      	movs	r1, #255	@ 0xff
 80026ac:	4091      	lsls	r1, r2
 80026ae:	000a      	movs	r2, r1
 80026b0:	43d2      	mvns	r2, r2
 80026b2:	401a      	ands	r2, r3
 80026b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	019b      	lsls	r3, r3, #6
 80026ba:	22ff      	movs	r2, #255	@ 0xff
 80026bc:	401a      	ands	r2, r3
 80026be:	1dfb      	adds	r3, r7, #7
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	0018      	movs	r0, r3
 80026c4:	2303      	movs	r3, #3
 80026c6:	4003      	ands	r3, r0
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026cc:	4809      	ldr	r0, [pc, #36]	@ (80026f4 <__NVIC_SetPriority+0xd8>)
 80026ce:	1dfb      	adds	r3, r7, #7
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	001c      	movs	r4, r3
 80026d4:	230f      	movs	r3, #15
 80026d6:	4023      	ands	r3, r4
 80026d8:	3b08      	subs	r3, #8
 80026da:	089b      	lsrs	r3, r3, #2
 80026dc:	430a      	orrs	r2, r1
 80026de:	3306      	adds	r3, #6
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	18c3      	adds	r3, r0, r3
 80026e4:	3304      	adds	r3, #4
 80026e6:	601a      	str	r2, [r3, #0]
}
 80026e8:	46c0      	nop			@ (mov r8, r8)
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b003      	add	sp, #12
 80026ee:	bd90      	pop	{r4, r7, pc}
 80026f0:	e000e100 	.word	0xe000e100
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	1e5a      	subs	r2, r3, #1
 8002704:	2380      	movs	r3, #128	@ 0x80
 8002706:	045b      	lsls	r3, r3, #17
 8002708:	429a      	cmp	r2, r3
 800270a:	d301      	bcc.n	8002710 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800270c:	2301      	movs	r3, #1
 800270e:	e010      	b.n	8002732 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002710:	4b0a      	ldr	r3, [pc, #40]	@ (800273c <SysTick_Config+0x44>)
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	3a01      	subs	r2, #1
 8002716:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002718:	2301      	movs	r3, #1
 800271a:	425b      	negs	r3, r3
 800271c:	2103      	movs	r1, #3
 800271e:	0018      	movs	r0, r3
 8002720:	f7ff ff7c 	bl	800261c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002724:	4b05      	ldr	r3, [pc, #20]	@ (800273c <SysTick_Config+0x44>)
 8002726:	2200      	movs	r2, #0
 8002728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800272a:	4b04      	ldr	r3, [pc, #16]	@ (800273c <SysTick_Config+0x44>)
 800272c:	2207      	movs	r2, #7
 800272e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002730:	2300      	movs	r3, #0
}
 8002732:	0018      	movs	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	b002      	add	sp, #8
 8002738:	bd80      	pop	{r7, pc}
 800273a:	46c0      	nop			@ (mov r8, r8)
 800273c:	e000e010 	.word	0xe000e010

08002740 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
 800274a:	210f      	movs	r1, #15
 800274c:	187b      	adds	r3, r7, r1
 800274e:	1c02      	adds	r2, r0, #0
 8002750:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	187b      	adds	r3, r7, r1
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	b25b      	sxtb	r3, r3
 800275a:	0011      	movs	r1, r2
 800275c:	0018      	movs	r0, r3
 800275e:	f7ff ff5d 	bl	800261c <__NVIC_SetPriority>
}
 8002762:	46c0      	nop			@ (mov r8, r8)
 8002764:	46bd      	mov	sp, r7
 8002766:	b004      	add	sp, #16
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	0018      	movs	r0, r3
 8002776:	f7ff ffbf 	bl	80026f8 <SysTick_Config>
 800277a:	0003      	movs	r3, r0
}
 800277c:	0018      	movs	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	b002      	add	sp, #8
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002792:	e155      	b.n	8002a40 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2101      	movs	r1, #1
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4091      	lsls	r1, r2
 800279e:	000a      	movs	r2, r1
 80027a0:	4013      	ands	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d100      	bne.n	80027ac <HAL_GPIO_Init+0x28>
 80027aa:	e146      	b.n	8002a3a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2203      	movs	r2, #3
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d005      	beq.n	80027c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2203      	movs	r2, #3
 80027be:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d130      	bne.n	8002826 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	2203      	movs	r2, #3
 80027d0:	409a      	lsls	r2, r3
 80027d2:	0013      	movs	r3, r2
 80027d4:	43da      	mvns	r2, r3
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4013      	ands	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	409a      	lsls	r2, r3
 80027e6:	0013      	movs	r3, r2
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027fa:	2201      	movs	r2, #1
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	409a      	lsls	r2, r3
 8002800:	0013      	movs	r3, r2
 8002802:	43da      	mvns	r2, r3
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4013      	ands	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	091b      	lsrs	r3, r3, #4
 8002810:	2201      	movs	r2, #1
 8002812:	401a      	ands	r2, r3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	409a      	lsls	r2, r3
 8002818:	0013      	movs	r3, r2
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2203      	movs	r2, #3
 800282c:	4013      	ands	r3, r2
 800282e:	2b03      	cmp	r3, #3
 8002830:	d017      	beq.n	8002862 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	2203      	movs	r2, #3
 800283e:	409a      	lsls	r2, r3
 8002840:	0013      	movs	r3, r2
 8002842:	43da      	mvns	r2, r3
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4013      	ands	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	409a      	lsls	r2, r3
 8002854:	0013      	movs	r3, r2
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2203      	movs	r2, #3
 8002868:	4013      	ands	r3, r2
 800286a:	2b02      	cmp	r3, #2
 800286c:	d123      	bne.n	80028b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	08da      	lsrs	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3208      	adds	r2, #8
 8002876:	0092      	lsls	r2, r2, #2
 8002878:	58d3      	ldr	r3, [r2, r3]
 800287a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2207      	movs	r2, #7
 8002880:	4013      	ands	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	220f      	movs	r2, #15
 8002886:	409a      	lsls	r2, r3
 8002888:	0013      	movs	r3, r2
 800288a:	43da      	mvns	r2, r3
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4013      	ands	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2107      	movs	r1, #7
 800289a:	400b      	ands	r3, r1
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	409a      	lsls	r2, r3
 80028a0:	0013      	movs	r3, r2
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	08da      	lsrs	r2, r3, #3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3208      	adds	r2, #8
 80028b0:	0092      	lsls	r2, r2, #2
 80028b2:	6939      	ldr	r1, [r7, #16]
 80028b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	2203      	movs	r2, #3
 80028c2:	409a      	lsls	r2, r3
 80028c4:	0013      	movs	r3, r2
 80028c6:	43da      	mvns	r2, r3
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4013      	ands	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2203      	movs	r2, #3
 80028d4:	401a      	ands	r2, r3
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	409a      	lsls	r2, r3
 80028dc:	0013      	movs	r3, r2
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	23c0      	movs	r3, #192	@ 0xc0
 80028f0:	029b      	lsls	r3, r3, #10
 80028f2:	4013      	ands	r3, r2
 80028f4:	d100      	bne.n	80028f8 <HAL_GPIO_Init+0x174>
 80028f6:	e0a0      	b.n	8002a3a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f8:	4b57      	ldr	r3, [pc, #348]	@ (8002a58 <HAL_GPIO_Init+0x2d4>)
 80028fa:	699a      	ldr	r2, [r3, #24]
 80028fc:	4b56      	ldr	r3, [pc, #344]	@ (8002a58 <HAL_GPIO_Init+0x2d4>)
 80028fe:	2101      	movs	r1, #1
 8002900:	430a      	orrs	r2, r1
 8002902:	619a      	str	r2, [r3, #24]
 8002904:	4b54      	ldr	r3, [pc, #336]	@ (8002a58 <HAL_GPIO_Init+0x2d4>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	2201      	movs	r2, #1
 800290a:	4013      	ands	r3, r2
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002910:	4a52      	ldr	r2, [pc, #328]	@ (8002a5c <HAL_GPIO_Init+0x2d8>)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	089b      	lsrs	r3, r3, #2
 8002916:	3302      	adds	r3, #2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	589b      	ldr	r3, [r3, r2]
 800291c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2203      	movs	r2, #3
 8002922:	4013      	ands	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	220f      	movs	r2, #15
 8002928:	409a      	lsls	r2, r3
 800292a:	0013      	movs	r3, r2
 800292c:	43da      	mvns	r2, r3
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4013      	ands	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	2390      	movs	r3, #144	@ 0x90
 8002938:	05db      	lsls	r3, r3, #23
 800293a:	429a      	cmp	r2, r3
 800293c:	d019      	beq.n	8002972 <HAL_GPIO_Init+0x1ee>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a47      	ldr	r2, [pc, #284]	@ (8002a60 <HAL_GPIO_Init+0x2dc>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d013      	beq.n	800296e <HAL_GPIO_Init+0x1ea>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a46      	ldr	r2, [pc, #280]	@ (8002a64 <HAL_GPIO_Init+0x2e0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00d      	beq.n	800296a <HAL_GPIO_Init+0x1e6>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a45      	ldr	r2, [pc, #276]	@ (8002a68 <HAL_GPIO_Init+0x2e4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d007      	beq.n	8002966 <HAL_GPIO_Init+0x1e2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a44      	ldr	r2, [pc, #272]	@ (8002a6c <HAL_GPIO_Init+0x2e8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d101      	bne.n	8002962 <HAL_GPIO_Init+0x1de>
 800295e:	2304      	movs	r3, #4
 8002960:	e008      	b.n	8002974 <HAL_GPIO_Init+0x1f0>
 8002962:	2305      	movs	r3, #5
 8002964:	e006      	b.n	8002974 <HAL_GPIO_Init+0x1f0>
 8002966:	2303      	movs	r3, #3
 8002968:	e004      	b.n	8002974 <HAL_GPIO_Init+0x1f0>
 800296a:	2302      	movs	r3, #2
 800296c:	e002      	b.n	8002974 <HAL_GPIO_Init+0x1f0>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <HAL_GPIO_Init+0x1f0>
 8002972:	2300      	movs	r3, #0
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	2103      	movs	r1, #3
 8002978:	400a      	ands	r2, r1
 800297a:	0092      	lsls	r2, r2, #2
 800297c:	4093      	lsls	r3, r2
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002984:	4935      	ldr	r1, [pc, #212]	@ (8002a5c <HAL_GPIO_Init+0x2d8>)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	3302      	adds	r3, #2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002992:	4b37      	ldr	r3, [pc, #220]	@ (8002a70 <HAL_GPIO_Init+0x2ec>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	43da      	mvns	r2, r3
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4013      	ands	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	2380      	movs	r3, #128	@ 0x80
 80029a8:	035b      	lsls	r3, r3, #13
 80029aa:	4013      	ands	r3, r2
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002a70 <HAL_GPIO_Init+0x2ec>)
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80029bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002a70 <HAL_GPIO_Init+0x2ec>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	43da      	mvns	r2, r3
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4013      	ands	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	2380      	movs	r3, #128	@ 0x80
 80029d2:	039b      	lsls	r3, r3, #14
 80029d4:	4013      	ands	r3, r2
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029e0:	4b23      	ldr	r3, [pc, #140]	@ (8002a70 <HAL_GPIO_Init+0x2ec>)
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80029e6:	4b22      	ldr	r3, [pc, #136]	@ (8002a70 <HAL_GPIO_Init+0x2ec>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	43da      	mvns	r2, r3
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4013      	ands	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	2380      	movs	r3, #128	@ 0x80
 80029fc:	029b      	lsls	r3, r3, #10
 80029fe:	4013      	ands	r3, r2
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a0a:	4b19      	ldr	r3, [pc, #100]	@ (8002a70 <HAL_GPIO_Init+0x2ec>)
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002a10:	4b17      	ldr	r3, [pc, #92]	@ (8002a70 <HAL_GPIO_Init+0x2ec>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	43da      	mvns	r2, r3
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	2380      	movs	r3, #128	@ 0x80
 8002a26:	025b      	lsls	r3, r3, #9
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a34:	4b0e      	ldr	r3, [pc, #56]	@ (8002a70 <HAL_GPIO_Init+0x2ec>)
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	40da      	lsrs	r2, r3
 8002a48:	1e13      	subs	r3, r2, #0
 8002a4a:	d000      	beq.n	8002a4e <HAL_GPIO_Init+0x2ca>
 8002a4c:	e6a2      	b.n	8002794 <HAL_GPIO_Init+0x10>
  } 
}
 8002a4e:	46c0      	nop			@ (mov r8, r8)
 8002a50:	46c0      	nop			@ (mov r8, r8)
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b006      	add	sp, #24
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40010000 	.word	0x40010000
 8002a60:	48000400 	.word	0x48000400
 8002a64:	48000800 	.word	0x48000800
 8002a68:	48000c00 	.word	0x48000c00
 8002a6c:	48001000 	.word	0x48001000
 8002a70:	40010400 	.word	0x40010400

08002a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	0008      	movs	r0, r1
 8002a7e:	0011      	movs	r1, r2
 8002a80:	1cbb      	adds	r3, r7, #2
 8002a82:	1c02      	adds	r2, r0, #0
 8002a84:	801a      	strh	r2, [r3, #0]
 8002a86:	1c7b      	adds	r3, r7, #1
 8002a88:	1c0a      	adds	r2, r1, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a8c:	1c7b      	adds	r3, r7, #1
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d004      	beq.n	8002a9e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a94:	1cbb      	adds	r3, r7, #2
 8002a96:	881a      	ldrh	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a9c:	e003      	b.n	8002aa6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a9e:	1cbb      	adds	r3, r7, #2
 8002aa0:	881a      	ldrh	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002aa6:	46c0      	nop			@ (mov r8, r8)
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b002      	add	sp, #8
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d102      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	f000 fb76 	bl	80031b0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	4013      	ands	r3, r2
 8002acc:	d100      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x20>
 8002ace:	e08e      	b.n	8002bee <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ad0:	4bc5      	ldr	r3, [pc, #788]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	220c      	movs	r2, #12
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d00e      	beq.n	8002afa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002adc:	4bc2      	ldr	r3, [pc, #776]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	220c      	movs	r2, #12
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d117      	bne.n	8002b18 <HAL_RCC_OscConfig+0x68>
 8002ae8:	4bbf      	ldr	r3, [pc, #764]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	23c0      	movs	r3, #192	@ 0xc0
 8002aee:	025b      	lsls	r3, r3, #9
 8002af0:	401a      	ands	r2, r3
 8002af2:	2380      	movs	r3, #128	@ 0x80
 8002af4:	025b      	lsls	r3, r3, #9
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d10e      	bne.n	8002b18 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afa:	4bbb      	ldr	r3, [pc, #748]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	2380      	movs	r3, #128	@ 0x80
 8002b00:	029b      	lsls	r3, r3, #10
 8002b02:	4013      	ands	r3, r2
 8002b04:	d100      	bne.n	8002b08 <HAL_RCC_OscConfig+0x58>
 8002b06:	e071      	b.n	8002bec <HAL_RCC_OscConfig+0x13c>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d000      	beq.n	8002b12 <HAL_RCC_OscConfig+0x62>
 8002b10:	e06c      	b.n	8002bec <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	f000 fb4c 	bl	80031b0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d107      	bne.n	8002b30 <HAL_RCC_OscConfig+0x80>
 8002b20:	4bb1      	ldr	r3, [pc, #708]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4bb0      	ldr	r3, [pc, #704]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002b26:	2180      	movs	r1, #128	@ 0x80
 8002b28:	0249      	lsls	r1, r1, #9
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	e02f      	b.n	8002b90 <HAL_RCC_OscConfig+0xe0>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10c      	bne.n	8002b52 <HAL_RCC_OscConfig+0xa2>
 8002b38:	4bab      	ldr	r3, [pc, #684]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4baa      	ldr	r3, [pc, #680]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002b3e:	49ab      	ldr	r1, [pc, #684]	@ (8002dec <HAL_RCC_OscConfig+0x33c>)
 8002b40:	400a      	ands	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	4ba8      	ldr	r3, [pc, #672]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4ba7      	ldr	r3, [pc, #668]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002b4a:	49a9      	ldr	r1, [pc, #676]	@ (8002df0 <HAL_RCC_OscConfig+0x340>)
 8002b4c:	400a      	ands	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	e01e      	b.n	8002b90 <HAL_RCC_OscConfig+0xe0>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b05      	cmp	r3, #5
 8002b58:	d10e      	bne.n	8002b78 <HAL_RCC_OscConfig+0xc8>
 8002b5a:	4ba3      	ldr	r3, [pc, #652]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	4ba2      	ldr	r3, [pc, #648]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002b60:	2180      	movs	r1, #128	@ 0x80
 8002b62:	02c9      	lsls	r1, r1, #11
 8002b64:	430a      	orrs	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	4b9f      	ldr	r3, [pc, #636]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4b9e      	ldr	r3, [pc, #632]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002b6e:	2180      	movs	r1, #128	@ 0x80
 8002b70:	0249      	lsls	r1, r1, #9
 8002b72:	430a      	orrs	r2, r1
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	e00b      	b.n	8002b90 <HAL_RCC_OscConfig+0xe0>
 8002b78:	4b9b      	ldr	r3, [pc, #620]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4b9a      	ldr	r3, [pc, #616]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002b7e:	499b      	ldr	r1, [pc, #620]	@ (8002dec <HAL_RCC_OscConfig+0x33c>)
 8002b80:	400a      	ands	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	4b98      	ldr	r3, [pc, #608]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4b97      	ldr	r3, [pc, #604]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002b8a:	4999      	ldr	r1, [pc, #612]	@ (8002df0 <HAL_RCC_OscConfig+0x340>)
 8002b8c:	400a      	ands	r2, r1
 8002b8e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d014      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7ff fd12 	bl	80025c0 <HAL_GetTick>
 8002b9c:	0003      	movs	r3, r0
 8002b9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ba2:	f7ff fd0d 	bl	80025c0 <HAL_GetTick>
 8002ba6:	0002      	movs	r2, r0
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b64      	cmp	r3, #100	@ 0x64
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e2fd      	b.n	80031b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb4:	4b8c      	ldr	r3, [pc, #560]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	2380      	movs	r3, #128	@ 0x80
 8002bba:	029b      	lsls	r3, r3, #10
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d0f0      	beq.n	8002ba2 <HAL_RCC_OscConfig+0xf2>
 8002bc0:	e015      	b.n	8002bee <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc2:	f7ff fcfd 	bl	80025c0 <HAL_GetTick>
 8002bc6:	0003      	movs	r3, r0
 8002bc8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bcc:	f7ff fcf8 	bl	80025c0 <HAL_GetTick>
 8002bd0:	0002      	movs	r2, r0
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b64      	cmp	r3, #100	@ 0x64
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e2e8      	b.n	80031b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bde:	4b82      	ldr	r3, [pc, #520]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	2380      	movs	r3, #128	@ 0x80
 8002be4:	029b      	lsls	r3, r3, #10
 8002be6:	4013      	ands	r3, r2
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x11c>
 8002bea:	e000      	b.n	8002bee <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bec:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d100      	bne.n	8002bfa <HAL_RCC_OscConfig+0x14a>
 8002bf8:	e06c      	b.n	8002cd4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002bfa:	4b7b      	ldr	r3, [pc, #492]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	220c      	movs	r2, #12
 8002c00:	4013      	ands	r3, r2
 8002c02:	d00e      	beq.n	8002c22 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c04:	4b78      	ldr	r3, [pc, #480]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	220c      	movs	r2, #12
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d11f      	bne.n	8002c50 <HAL_RCC_OscConfig+0x1a0>
 8002c10:	4b75      	ldr	r3, [pc, #468]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	23c0      	movs	r3, #192	@ 0xc0
 8002c16:	025b      	lsls	r3, r3, #9
 8002c18:	401a      	ands	r2, r3
 8002c1a:	2380      	movs	r3, #128	@ 0x80
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d116      	bne.n	8002c50 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c22:	4b71      	ldr	r3, [pc, #452]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2202      	movs	r2, #2
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d005      	beq.n	8002c38 <HAL_RCC_OscConfig+0x188>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e2bb      	b.n	80031b0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c38:	4b6b      	ldr	r3, [pc, #428]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	22f8      	movs	r2, #248	@ 0xf8
 8002c3e:	4393      	bics	r3, r2
 8002c40:	0019      	movs	r1, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	00da      	lsls	r2, r3, #3
 8002c48:	4b67      	ldr	r3, [pc, #412]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4e:	e041      	b.n	8002cd4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d024      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c58:	4b63      	ldr	r3, [pc, #396]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b62      	ldr	r3, [pc, #392]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002c5e:	2101      	movs	r1, #1
 8002c60:	430a      	orrs	r2, r1
 8002c62:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7ff fcac 	bl	80025c0 <HAL_GetTick>
 8002c68:	0003      	movs	r3, r0
 8002c6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c6e:	f7ff fca7 	bl	80025c0 <HAL_GetTick>
 8002c72:	0002      	movs	r2, r0
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e297      	b.n	80031b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c80:	4b59      	ldr	r3, [pc, #356]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2202      	movs	r2, #2
 8002c86:	4013      	ands	r3, r2
 8002c88:	d0f1      	beq.n	8002c6e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8a:	4b57      	ldr	r3, [pc, #348]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	22f8      	movs	r2, #248	@ 0xf8
 8002c90:	4393      	bics	r3, r2
 8002c92:	0019      	movs	r1, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	00da      	lsls	r2, r3, #3
 8002c9a:	4b53      	ldr	r3, [pc, #332]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	e018      	b.n	8002cd4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ca2:	4b51      	ldr	r3, [pc, #324]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	4b50      	ldr	r3, [pc, #320]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002ca8:	2101      	movs	r1, #1
 8002caa:	438a      	bics	r2, r1
 8002cac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cae:	f7ff fc87 	bl	80025c0 <HAL_GetTick>
 8002cb2:	0003      	movs	r3, r0
 8002cb4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb8:	f7ff fc82 	bl	80025c0 <HAL_GetTick>
 8002cbc:	0002      	movs	r2, r0
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e272      	b.n	80031b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cca:	4b47      	ldr	r3, [pc, #284]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d1f1      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2208      	movs	r2, #8
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d036      	beq.n	8002d4c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d019      	beq.n	8002d1a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ce6:	4b40      	ldr	r3, [pc, #256]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002ce8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cea:	4b3f      	ldr	r3, [pc, #252]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002cec:	2101      	movs	r1, #1
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf2:	f7ff fc65 	bl	80025c0 <HAL_GetTick>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cfc:	f7ff fc60 	bl	80025c0 <HAL_GetTick>
 8002d00:	0002      	movs	r2, r0
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e250      	b.n	80031b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0e:	4b36      	ldr	r3, [pc, #216]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d12:	2202      	movs	r2, #2
 8002d14:	4013      	ands	r3, r2
 8002d16:	d0f1      	beq.n	8002cfc <HAL_RCC_OscConfig+0x24c>
 8002d18:	e018      	b.n	8002d4c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d1a:	4b33      	ldr	r3, [pc, #204]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002d1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d1e:	4b32      	ldr	r3, [pc, #200]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002d20:	2101      	movs	r1, #1
 8002d22:	438a      	bics	r2, r1
 8002d24:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d26:	f7ff fc4b 	bl	80025c0 <HAL_GetTick>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d30:	f7ff fc46 	bl	80025c0 <HAL_GetTick>
 8002d34:	0002      	movs	r2, r0
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e236      	b.n	80031b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d42:	4b29      	ldr	r3, [pc, #164]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d46:	2202      	movs	r2, #2
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d1f1      	bne.n	8002d30 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2204      	movs	r2, #4
 8002d52:	4013      	ands	r3, r2
 8002d54:	d100      	bne.n	8002d58 <HAL_RCC_OscConfig+0x2a8>
 8002d56:	e0b5      	b.n	8002ec4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d58:	201f      	movs	r0, #31
 8002d5a:	183b      	adds	r3, r7, r0
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d60:	4b21      	ldr	r3, [pc, #132]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002d62:	69da      	ldr	r2, [r3, #28]
 8002d64:	2380      	movs	r3, #128	@ 0x80
 8002d66:	055b      	lsls	r3, r3, #21
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d110      	bne.n	8002d8e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002d6e:	69da      	ldr	r2, [r3, #28]
 8002d70:	4b1d      	ldr	r3, [pc, #116]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002d72:	2180      	movs	r1, #128	@ 0x80
 8002d74:	0549      	lsls	r1, r1, #21
 8002d76:	430a      	orrs	r2, r1
 8002d78:	61da      	str	r2, [r3, #28]
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002d7c:	69da      	ldr	r2, [r3, #28]
 8002d7e:	2380      	movs	r3, #128	@ 0x80
 8002d80:	055b      	lsls	r3, r3, #21
 8002d82:	4013      	ands	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d88:	183b      	adds	r3, r7, r0
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8e:	4b19      	ldr	r3, [pc, #100]	@ (8002df4 <HAL_RCC_OscConfig+0x344>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	2380      	movs	r3, #128	@ 0x80
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4013      	ands	r3, r2
 8002d98:	d11a      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d9a:	4b16      	ldr	r3, [pc, #88]	@ (8002df4 <HAL_RCC_OscConfig+0x344>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	4b15      	ldr	r3, [pc, #84]	@ (8002df4 <HAL_RCC_OscConfig+0x344>)
 8002da0:	2180      	movs	r1, #128	@ 0x80
 8002da2:	0049      	lsls	r1, r1, #1
 8002da4:	430a      	orrs	r2, r1
 8002da6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da8:	f7ff fc0a 	bl	80025c0 <HAL_GetTick>
 8002dac:	0003      	movs	r3, r0
 8002dae:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002db2:	f7ff fc05 	bl	80025c0 <HAL_GetTick>
 8002db6:	0002      	movs	r2, r0
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b64      	cmp	r3, #100	@ 0x64
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e1f5      	b.n	80031b0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002df4 <HAL_RCC_OscConfig+0x344>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	2380      	movs	r3, #128	@ 0x80
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d10f      	bne.n	8002df8 <HAL_RCC_OscConfig+0x348>
 8002dd8:	4b03      	ldr	r3, [pc, #12]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002dda:	6a1a      	ldr	r2, [r3, #32]
 8002ddc:	4b02      	ldr	r3, [pc, #8]	@ (8002de8 <HAL_RCC_OscConfig+0x338>)
 8002dde:	2101      	movs	r1, #1
 8002de0:	430a      	orrs	r2, r1
 8002de2:	621a      	str	r2, [r3, #32]
 8002de4:	e036      	b.n	8002e54 <HAL_RCC_OscConfig+0x3a4>
 8002de6:	46c0      	nop			@ (mov r8, r8)
 8002de8:	40021000 	.word	0x40021000
 8002dec:	fffeffff 	.word	0xfffeffff
 8002df0:	fffbffff 	.word	0xfffbffff
 8002df4:	40007000 	.word	0x40007000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10c      	bne.n	8002e1a <HAL_RCC_OscConfig+0x36a>
 8002e00:	4bca      	ldr	r3, [pc, #808]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002e02:	6a1a      	ldr	r2, [r3, #32]
 8002e04:	4bc9      	ldr	r3, [pc, #804]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002e06:	2101      	movs	r1, #1
 8002e08:	438a      	bics	r2, r1
 8002e0a:	621a      	str	r2, [r3, #32]
 8002e0c:	4bc7      	ldr	r3, [pc, #796]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002e0e:	6a1a      	ldr	r2, [r3, #32]
 8002e10:	4bc6      	ldr	r3, [pc, #792]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002e12:	2104      	movs	r1, #4
 8002e14:	438a      	bics	r2, r1
 8002e16:	621a      	str	r2, [r3, #32]
 8002e18:	e01c      	b.n	8002e54 <HAL_RCC_OscConfig+0x3a4>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	2b05      	cmp	r3, #5
 8002e20:	d10c      	bne.n	8002e3c <HAL_RCC_OscConfig+0x38c>
 8002e22:	4bc2      	ldr	r3, [pc, #776]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002e24:	6a1a      	ldr	r2, [r3, #32]
 8002e26:	4bc1      	ldr	r3, [pc, #772]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002e28:	2104      	movs	r1, #4
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	621a      	str	r2, [r3, #32]
 8002e2e:	4bbf      	ldr	r3, [pc, #764]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002e30:	6a1a      	ldr	r2, [r3, #32]
 8002e32:	4bbe      	ldr	r3, [pc, #760]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002e34:	2101      	movs	r1, #1
 8002e36:	430a      	orrs	r2, r1
 8002e38:	621a      	str	r2, [r3, #32]
 8002e3a:	e00b      	b.n	8002e54 <HAL_RCC_OscConfig+0x3a4>
 8002e3c:	4bbb      	ldr	r3, [pc, #748]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002e3e:	6a1a      	ldr	r2, [r3, #32]
 8002e40:	4bba      	ldr	r3, [pc, #744]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002e42:	2101      	movs	r1, #1
 8002e44:	438a      	bics	r2, r1
 8002e46:	621a      	str	r2, [r3, #32]
 8002e48:	4bb8      	ldr	r3, [pc, #736]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002e4a:	6a1a      	ldr	r2, [r3, #32]
 8002e4c:	4bb7      	ldr	r3, [pc, #732]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002e4e:	2104      	movs	r1, #4
 8002e50:	438a      	bics	r2, r1
 8002e52:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d014      	beq.n	8002e86 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e5c:	f7ff fbb0 	bl	80025c0 <HAL_GetTick>
 8002e60:	0003      	movs	r3, r0
 8002e62:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e64:	e009      	b.n	8002e7a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e66:	f7ff fbab 	bl	80025c0 <HAL_GetTick>
 8002e6a:	0002      	movs	r2, r0
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	4aaf      	ldr	r2, [pc, #700]	@ (8003130 <HAL_RCC_OscConfig+0x680>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e19a      	b.n	80031b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7a:	4bac      	ldr	r3, [pc, #688]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	4013      	ands	r3, r2
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x3b6>
 8002e84:	e013      	b.n	8002eae <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e86:	f7ff fb9b 	bl	80025c0 <HAL_GetTick>
 8002e8a:	0003      	movs	r3, r0
 8002e8c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8e:	e009      	b.n	8002ea4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e90:	f7ff fb96 	bl	80025c0 <HAL_GetTick>
 8002e94:	0002      	movs	r2, r0
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	4aa5      	ldr	r2, [pc, #660]	@ (8003130 <HAL_RCC_OscConfig+0x680>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e185      	b.n	80031b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea4:	4ba1      	ldr	r3, [pc, #644]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002eae:	231f      	movs	r3, #31
 8002eb0:	18fb      	adds	r3, r7, r3
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d105      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb8:	4b9c      	ldr	r3, [pc, #624]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002eba:	69da      	ldr	r2, [r3, #28]
 8002ebc:	4b9b      	ldr	r3, [pc, #620]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002ebe:	499d      	ldr	r1, [pc, #628]	@ (8003134 <HAL_RCC_OscConfig+0x684>)
 8002ec0:	400a      	ands	r2, r1
 8002ec2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2210      	movs	r2, #16
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d063      	beq.n	8002f96 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d12a      	bne.n	8002f2c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ed6:	4b95      	ldr	r3, [pc, #596]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002ed8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002eda:	4b94      	ldr	r3, [pc, #592]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002edc:	2104      	movs	r1, #4
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002ee2:	4b92      	ldr	r3, [pc, #584]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002ee4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ee6:	4b91      	ldr	r3, [pc, #580]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002ee8:	2101      	movs	r1, #1
 8002eea:	430a      	orrs	r2, r1
 8002eec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eee:	f7ff fb67 	bl	80025c0 <HAL_GetTick>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ef8:	f7ff fb62 	bl	80025c0 <HAL_GetTick>
 8002efc:	0002      	movs	r2, r0
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e152      	b.n	80031b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002f0a:	4b88      	ldr	r3, [pc, #544]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f0e:	2202      	movs	r2, #2
 8002f10:	4013      	ands	r3, r2
 8002f12:	d0f1      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002f14:	4b85      	ldr	r3, [pc, #532]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f18:	22f8      	movs	r2, #248	@ 0xf8
 8002f1a:	4393      	bics	r3, r2
 8002f1c:	0019      	movs	r1, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	00da      	lsls	r2, r3, #3
 8002f24:	4b81      	ldr	r3, [pc, #516]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002f26:	430a      	orrs	r2, r1
 8002f28:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f2a:	e034      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	3305      	adds	r3, #5
 8002f32:	d111      	bne.n	8002f58 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002f34:	4b7d      	ldr	r3, [pc, #500]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002f36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f38:	4b7c      	ldr	r3, [pc, #496]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002f3a:	2104      	movs	r1, #4
 8002f3c:	438a      	bics	r2, r1
 8002f3e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002f40:	4b7a      	ldr	r3, [pc, #488]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f44:	22f8      	movs	r2, #248	@ 0xf8
 8002f46:	4393      	bics	r3, r2
 8002f48:	0019      	movs	r1, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	00da      	lsls	r2, r3, #3
 8002f50:	4b76      	ldr	r3, [pc, #472]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002f52:	430a      	orrs	r2, r1
 8002f54:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f56:	e01e      	b.n	8002f96 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002f58:	4b74      	ldr	r3, [pc, #464]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002f5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f5c:	4b73      	ldr	r3, [pc, #460]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002f5e:	2104      	movs	r1, #4
 8002f60:	430a      	orrs	r2, r1
 8002f62:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002f64:	4b71      	ldr	r3, [pc, #452]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002f66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f68:	4b70      	ldr	r3, [pc, #448]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	438a      	bics	r2, r1
 8002f6e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f70:	f7ff fb26 	bl	80025c0 <HAL_GetTick>
 8002f74:	0003      	movs	r3, r0
 8002f76:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002f7a:	f7ff fb21 	bl	80025c0 <HAL_GetTick>
 8002f7e:	0002      	movs	r2, r0
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e111      	b.n	80031b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f8c:	4b67      	ldr	r3, [pc, #412]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f90:	2202      	movs	r2, #2
 8002f92:	4013      	ands	r3, r2
 8002f94:	d1f1      	bne.n	8002f7a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d05c      	beq.n	800305a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002fa0:	4b62      	ldr	r3, [pc, #392]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	220c      	movs	r2, #12
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b0c      	cmp	r3, #12
 8002faa:	d00e      	beq.n	8002fca <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002fac:	4b5f      	ldr	r3, [pc, #380]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	220c      	movs	r2, #12
 8002fb2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d114      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002fb8:	4b5c      	ldr	r3, [pc, #368]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	23c0      	movs	r3, #192	@ 0xc0
 8002fbe:	025b      	lsls	r3, r3, #9
 8002fc0:	401a      	ands	r2, r3
 8002fc2:	23c0      	movs	r3, #192	@ 0xc0
 8002fc4:	025b      	lsls	r3, r3, #9
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d10b      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002fca:	4b58      	ldr	r3, [pc, #352]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002fcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fce:	2380      	movs	r3, #128	@ 0x80
 8002fd0:	029b      	lsls	r3, r3, #10
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d040      	beq.n	8003058 <HAL_RCC_OscConfig+0x5a8>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d03c      	beq.n	8003058 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e0e6      	b.n	80031b0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d01b      	beq.n	8003022 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002fea:	4b50      	ldr	r3, [pc, #320]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002fec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fee:	4b4f      	ldr	r3, [pc, #316]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8002ff0:	2180      	movs	r1, #128	@ 0x80
 8002ff2:	0249      	lsls	r1, r1, #9
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff8:	f7ff fae2 	bl	80025c0 <HAL_GetTick>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003002:	f7ff fadd 	bl	80025c0 <HAL_GetTick>
 8003006:	0002      	movs	r2, r0
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e0cd      	b.n	80031b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003014:	4b45      	ldr	r3, [pc, #276]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8003016:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003018:	2380      	movs	r3, #128	@ 0x80
 800301a:	029b      	lsls	r3, r3, #10
 800301c:	4013      	ands	r3, r2
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x552>
 8003020:	e01b      	b.n	800305a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003022:	4b42      	ldr	r3, [pc, #264]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8003024:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003026:	4b41      	ldr	r3, [pc, #260]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8003028:	4943      	ldr	r1, [pc, #268]	@ (8003138 <HAL_RCC_OscConfig+0x688>)
 800302a:	400a      	ands	r2, r1
 800302c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302e:	f7ff fac7 	bl	80025c0 <HAL_GetTick>
 8003032:	0003      	movs	r3, r0
 8003034:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003038:	f7ff fac2 	bl	80025c0 <HAL_GetTick>
 800303c:	0002      	movs	r2, r0
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e0b2      	b.n	80031b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800304a:	4b38      	ldr	r3, [pc, #224]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 800304c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800304e:	2380      	movs	r3, #128	@ 0x80
 8003050:	029b      	lsls	r3, r3, #10
 8003052:	4013      	ands	r3, r2
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x588>
 8003056:	e000      	b.n	800305a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003058:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	2b00      	cmp	r3, #0
 8003060:	d100      	bne.n	8003064 <HAL_RCC_OscConfig+0x5b4>
 8003062:	e0a4      	b.n	80031ae <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003064:	4b31      	ldr	r3, [pc, #196]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	220c      	movs	r2, #12
 800306a:	4013      	ands	r3, r2
 800306c:	2b08      	cmp	r3, #8
 800306e:	d100      	bne.n	8003072 <HAL_RCC_OscConfig+0x5c2>
 8003070:	e078      	b.n	8003164 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003076:	2b02      	cmp	r3, #2
 8003078:	d14c      	bne.n	8003114 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307a:	4b2c      	ldr	r3, [pc, #176]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	4b2b      	ldr	r3, [pc, #172]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8003080:	492e      	ldr	r1, [pc, #184]	@ (800313c <HAL_RCC_OscConfig+0x68c>)
 8003082:	400a      	ands	r2, r1
 8003084:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003086:	f7ff fa9b 	bl	80025c0 <HAL_GetTick>
 800308a:	0003      	movs	r3, r0
 800308c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003090:	f7ff fa96 	bl	80025c0 <HAL_GetTick>
 8003094:	0002      	movs	r2, r0
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e086      	b.n	80031b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a2:	4b22      	ldr	r3, [pc, #136]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	2380      	movs	r3, #128	@ 0x80
 80030a8:	049b      	lsls	r3, r3, #18
 80030aa:	4013      	ands	r3, r2
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ae:	4b1f      	ldr	r3, [pc, #124]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 80030b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b2:	220f      	movs	r2, #15
 80030b4:	4393      	bics	r3, r2
 80030b6:	0019      	movs	r1, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030bc:	4b1b      	ldr	r3, [pc, #108]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 80030be:	430a      	orrs	r2, r1
 80030c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80030c2:	4b1a      	ldr	r3, [pc, #104]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003140 <HAL_RCC_OscConfig+0x690>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	0019      	movs	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d4:	431a      	orrs	r2, r3
 80030d6:	4b15      	ldr	r3, [pc, #84]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 80030d8:	430a      	orrs	r2, r1
 80030da:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030dc:	4b13      	ldr	r3, [pc, #76]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4b12      	ldr	r3, [pc, #72]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 80030e2:	2180      	movs	r1, #128	@ 0x80
 80030e4:	0449      	lsls	r1, r1, #17
 80030e6:	430a      	orrs	r2, r1
 80030e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ea:	f7ff fa69 	bl	80025c0 <HAL_GetTick>
 80030ee:	0003      	movs	r3, r0
 80030f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f4:	f7ff fa64 	bl	80025c0 <HAL_GetTick>
 80030f8:	0002      	movs	r2, r0
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e054      	b.n	80031b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003106:	4b09      	ldr	r3, [pc, #36]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	2380      	movs	r3, #128	@ 0x80
 800310c:	049b      	lsls	r3, r3, #18
 800310e:	4013      	ands	r3, r2
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0x644>
 8003112:	e04c      	b.n	80031ae <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003114:	4b05      	ldr	r3, [pc, #20]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4b04      	ldr	r3, [pc, #16]	@ (800312c <HAL_RCC_OscConfig+0x67c>)
 800311a:	4908      	ldr	r1, [pc, #32]	@ (800313c <HAL_RCC_OscConfig+0x68c>)
 800311c:	400a      	ands	r2, r1
 800311e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7ff fa4e 	bl	80025c0 <HAL_GetTick>
 8003124:	0003      	movs	r3, r0
 8003126:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003128:	e015      	b.n	8003156 <HAL_RCC_OscConfig+0x6a6>
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	40021000 	.word	0x40021000
 8003130:	00001388 	.word	0x00001388
 8003134:	efffffff 	.word	0xefffffff
 8003138:	fffeffff 	.word	0xfffeffff
 800313c:	feffffff 	.word	0xfeffffff
 8003140:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003144:	f7ff fa3c 	bl	80025c0 <HAL_GetTick>
 8003148:	0002      	movs	r2, r0
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e02c      	b.n	80031b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003156:	4b18      	ldr	r3, [pc, #96]	@ (80031b8 <HAL_RCC_OscConfig+0x708>)
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	2380      	movs	r3, #128	@ 0x80
 800315c:	049b      	lsls	r3, r3, #18
 800315e:	4013      	ands	r3, r2
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x694>
 8003162:	e024      	b.n	80031ae <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e01f      	b.n	80031b0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003170:	4b11      	ldr	r3, [pc, #68]	@ (80031b8 <HAL_RCC_OscConfig+0x708>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003176:	4b10      	ldr	r3, [pc, #64]	@ (80031b8 <HAL_RCC_OscConfig+0x708>)
 8003178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	23c0      	movs	r3, #192	@ 0xc0
 8003180:	025b      	lsls	r3, r3, #9
 8003182:	401a      	ands	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003188:	429a      	cmp	r2, r3
 800318a:	d10e      	bne.n	80031aa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	220f      	movs	r2, #15
 8003190:	401a      	ands	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003196:	429a      	cmp	r2, r3
 8003198:	d107      	bne.n	80031aa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	23f0      	movs	r3, #240	@ 0xf0
 800319e:	039b      	lsls	r3, r3, #14
 80031a0:	401a      	ands	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d001      	beq.n	80031ae <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	0018      	movs	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b008      	add	sp, #32
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40021000 	.word	0x40021000

080031bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0bf      	b.n	8003350 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031d0:	4b61      	ldr	r3, [pc, #388]	@ (8003358 <HAL_RCC_ClockConfig+0x19c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2201      	movs	r2, #1
 80031d6:	4013      	ands	r3, r2
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d911      	bls.n	8003202 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031de:	4b5e      	ldr	r3, [pc, #376]	@ (8003358 <HAL_RCC_ClockConfig+0x19c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2201      	movs	r2, #1
 80031e4:	4393      	bics	r3, r2
 80031e6:	0019      	movs	r1, r3
 80031e8:	4b5b      	ldr	r3, [pc, #364]	@ (8003358 <HAL_RCC_ClockConfig+0x19c>)
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f0:	4b59      	ldr	r3, [pc, #356]	@ (8003358 <HAL_RCC_ClockConfig+0x19c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2201      	movs	r2, #1
 80031f6:	4013      	ands	r3, r2
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d001      	beq.n	8003202 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e0a6      	b.n	8003350 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2202      	movs	r2, #2
 8003208:	4013      	ands	r3, r2
 800320a:	d015      	beq.n	8003238 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2204      	movs	r2, #4
 8003212:	4013      	ands	r3, r2
 8003214:	d006      	beq.n	8003224 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003216:	4b51      	ldr	r3, [pc, #324]	@ (800335c <HAL_RCC_ClockConfig+0x1a0>)
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	4b50      	ldr	r3, [pc, #320]	@ (800335c <HAL_RCC_ClockConfig+0x1a0>)
 800321c:	21e0      	movs	r1, #224	@ 0xe0
 800321e:	00c9      	lsls	r1, r1, #3
 8003220:	430a      	orrs	r2, r1
 8003222:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003224:	4b4d      	ldr	r3, [pc, #308]	@ (800335c <HAL_RCC_ClockConfig+0x1a0>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	22f0      	movs	r2, #240	@ 0xf0
 800322a:	4393      	bics	r3, r2
 800322c:	0019      	movs	r1, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	4b4a      	ldr	r3, [pc, #296]	@ (800335c <HAL_RCC_ClockConfig+0x1a0>)
 8003234:	430a      	orrs	r2, r1
 8003236:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2201      	movs	r2, #1
 800323e:	4013      	ands	r3, r2
 8003240:	d04c      	beq.n	80032dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	4b44      	ldr	r3, [pc, #272]	@ (800335c <HAL_RCC_ClockConfig+0x1a0>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	2380      	movs	r3, #128	@ 0x80
 8003250:	029b      	lsls	r3, r3, #10
 8003252:	4013      	ands	r3, r2
 8003254:	d120      	bne.n	8003298 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e07a      	b.n	8003350 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d107      	bne.n	8003272 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003262:	4b3e      	ldr	r3, [pc, #248]	@ (800335c <HAL_RCC_ClockConfig+0x1a0>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	2380      	movs	r3, #128	@ 0x80
 8003268:	049b      	lsls	r3, r3, #18
 800326a:	4013      	ands	r3, r2
 800326c:	d114      	bne.n	8003298 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e06e      	b.n	8003350 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b03      	cmp	r3, #3
 8003278:	d107      	bne.n	800328a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800327a:	4b38      	ldr	r3, [pc, #224]	@ (800335c <HAL_RCC_ClockConfig+0x1a0>)
 800327c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800327e:	2380      	movs	r3, #128	@ 0x80
 8003280:	029b      	lsls	r3, r3, #10
 8003282:	4013      	ands	r3, r2
 8003284:	d108      	bne.n	8003298 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e062      	b.n	8003350 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328a:	4b34      	ldr	r3, [pc, #208]	@ (800335c <HAL_RCC_ClockConfig+0x1a0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2202      	movs	r2, #2
 8003290:	4013      	ands	r3, r2
 8003292:	d101      	bne.n	8003298 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e05b      	b.n	8003350 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003298:	4b30      	ldr	r3, [pc, #192]	@ (800335c <HAL_RCC_ClockConfig+0x1a0>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2203      	movs	r2, #3
 800329e:	4393      	bics	r3, r2
 80032a0:	0019      	movs	r1, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	4b2d      	ldr	r3, [pc, #180]	@ (800335c <HAL_RCC_ClockConfig+0x1a0>)
 80032a8:	430a      	orrs	r2, r1
 80032aa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032ac:	f7ff f988 	bl	80025c0 <HAL_GetTick>
 80032b0:	0003      	movs	r3, r0
 80032b2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b4:	e009      	b.n	80032ca <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b6:	f7ff f983 	bl	80025c0 <HAL_GetTick>
 80032ba:	0002      	movs	r2, r0
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	4a27      	ldr	r2, [pc, #156]	@ (8003360 <HAL_RCC_ClockConfig+0x1a4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e042      	b.n	8003350 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ca:	4b24      	ldr	r3, [pc, #144]	@ (800335c <HAL_RCC_ClockConfig+0x1a0>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	220c      	movs	r2, #12
 80032d0:	401a      	ands	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	429a      	cmp	r2, r3
 80032da:	d1ec      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032dc:	4b1e      	ldr	r3, [pc, #120]	@ (8003358 <HAL_RCC_ClockConfig+0x19c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2201      	movs	r2, #1
 80032e2:	4013      	ands	r3, r2
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d211      	bcs.n	800330e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003358 <HAL_RCC_ClockConfig+0x19c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2201      	movs	r2, #1
 80032f0:	4393      	bics	r3, r2
 80032f2:	0019      	movs	r1, r3
 80032f4:	4b18      	ldr	r3, [pc, #96]	@ (8003358 <HAL_RCC_ClockConfig+0x19c>)
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fc:	4b16      	ldr	r3, [pc, #88]	@ (8003358 <HAL_RCC_ClockConfig+0x19c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2201      	movs	r2, #1
 8003302:	4013      	ands	r3, r2
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d001      	beq.n	800330e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e020      	b.n	8003350 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2204      	movs	r2, #4
 8003314:	4013      	ands	r3, r2
 8003316:	d009      	beq.n	800332c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003318:	4b10      	ldr	r3, [pc, #64]	@ (800335c <HAL_RCC_ClockConfig+0x1a0>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	4a11      	ldr	r2, [pc, #68]	@ (8003364 <HAL_RCC_ClockConfig+0x1a8>)
 800331e:	4013      	ands	r3, r2
 8003320:	0019      	movs	r1, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	4b0d      	ldr	r3, [pc, #52]	@ (800335c <HAL_RCC_ClockConfig+0x1a0>)
 8003328:	430a      	orrs	r2, r1
 800332a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800332c:	f000 f820 	bl	8003370 <HAL_RCC_GetSysClockFreq>
 8003330:	0001      	movs	r1, r0
 8003332:	4b0a      	ldr	r3, [pc, #40]	@ (800335c <HAL_RCC_ClockConfig+0x1a0>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	091b      	lsrs	r3, r3, #4
 8003338:	220f      	movs	r2, #15
 800333a:	4013      	ands	r3, r2
 800333c:	4a0a      	ldr	r2, [pc, #40]	@ (8003368 <HAL_RCC_ClockConfig+0x1ac>)
 800333e:	5cd3      	ldrb	r3, [r2, r3]
 8003340:	000a      	movs	r2, r1
 8003342:	40da      	lsrs	r2, r3
 8003344:	4b09      	ldr	r3, [pc, #36]	@ (800336c <HAL_RCC_ClockConfig+0x1b0>)
 8003346:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003348:	2000      	movs	r0, #0
 800334a:	f7ff f8f3 	bl	8002534 <HAL_InitTick>
  
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	0018      	movs	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	b004      	add	sp, #16
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40022000 	.word	0x40022000
 800335c:	40021000 	.word	0x40021000
 8003360:	00001388 	.word	0x00001388
 8003364:	fffff8ff 	.word	0xfffff8ff
 8003368:	080053d4 	.word	0x080053d4
 800336c:	20000000 	.word	0x20000000

08003370 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	2300      	movs	r3, #0
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
 8003382:	2300      	movs	r3, #0
 8003384:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800338a:	4b2d      	ldr	r3, [pc, #180]	@ (8003440 <HAL_RCC_GetSysClockFreq+0xd0>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	220c      	movs	r2, #12
 8003394:	4013      	ands	r3, r2
 8003396:	2b0c      	cmp	r3, #12
 8003398:	d046      	beq.n	8003428 <HAL_RCC_GetSysClockFreq+0xb8>
 800339a:	d848      	bhi.n	800342e <HAL_RCC_GetSysClockFreq+0xbe>
 800339c:	2b04      	cmp	r3, #4
 800339e:	d002      	beq.n	80033a6 <HAL_RCC_GetSysClockFreq+0x36>
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d003      	beq.n	80033ac <HAL_RCC_GetSysClockFreq+0x3c>
 80033a4:	e043      	b.n	800342e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033a6:	4b27      	ldr	r3, [pc, #156]	@ (8003444 <HAL_RCC_GetSysClockFreq+0xd4>)
 80033a8:	613b      	str	r3, [r7, #16]
      break;
 80033aa:	e043      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	0c9b      	lsrs	r3, r3, #18
 80033b0:	220f      	movs	r2, #15
 80033b2:	4013      	ands	r3, r2
 80033b4:	4a24      	ldr	r2, [pc, #144]	@ (8003448 <HAL_RCC_GetSysClockFreq+0xd8>)
 80033b6:	5cd3      	ldrb	r3, [r2, r3]
 80033b8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80033ba:	4b21      	ldr	r3, [pc, #132]	@ (8003440 <HAL_RCC_GetSysClockFreq+0xd0>)
 80033bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033be:	220f      	movs	r2, #15
 80033c0:	4013      	ands	r3, r2
 80033c2:	4a22      	ldr	r2, [pc, #136]	@ (800344c <HAL_RCC_GetSysClockFreq+0xdc>)
 80033c4:	5cd3      	ldrb	r3, [r2, r3]
 80033c6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	23c0      	movs	r3, #192	@ 0xc0
 80033cc:	025b      	lsls	r3, r3, #9
 80033ce:	401a      	ands	r2, r3
 80033d0:	2380      	movs	r3, #128	@ 0x80
 80033d2:	025b      	lsls	r3, r3, #9
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d109      	bne.n	80033ec <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	481a      	ldr	r0, [pc, #104]	@ (8003444 <HAL_RCC_GetSysClockFreq+0xd4>)
 80033dc:	f7fc fe94 	bl	8000108 <__udivsi3>
 80033e0:	0003      	movs	r3, r0
 80033e2:	001a      	movs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4353      	muls	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	e01a      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	23c0      	movs	r3, #192	@ 0xc0
 80033f0:	025b      	lsls	r3, r3, #9
 80033f2:	401a      	ands	r2, r3
 80033f4:	23c0      	movs	r3, #192	@ 0xc0
 80033f6:	025b      	lsls	r3, r3, #9
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d109      	bne.n	8003410 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	4814      	ldr	r0, [pc, #80]	@ (8003450 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003400:	f7fc fe82 	bl	8000108 <__udivsi3>
 8003404:	0003      	movs	r3, r0
 8003406:	001a      	movs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4353      	muls	r3, r2
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	e008      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	480c      	ldr	r0, [pc, #48]	@ (8003444 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003414:	f7fc fe78 	bl	8000108 <__udivsi3>
 8003418:	0003      	movs	r3, r0
 800341a:	001a      	movs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4353      	muls	r3, r2
 8003420:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	613b      	str	r3, [r7, #16]
      break;
 8003426:	e005      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003428:	4b09      	ldr	r3, [pc, #36]	@ (8003450 <HAL_RCC_GetSysClockFreq+0xe0>)
 800342a:	613b      	str	r3, [r7, #16]
      break;
 800342c:	e002      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800342e:	4b05      	ldr	r3, [pc, #20]	@ (8003444 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003430:	613b      	str	r3, [r7, #16]
      break;
 8003432:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003434:	693b      	ldr	r3, [r7, #16]
}
 8003436:	0018      	movs	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	b006      	add	sp, #24
 800343c:	bd80      	pop	{r7, pc}
 800343e:	46c0      	nop			@ (mov r8, r8)
 8003440:	40021000 	.word	0x40021000
 8003444:	007a1200 	.word	0x007a1200
 8003448:	080053ec 	.word	0x080053ec
 800344c:	080053fc 	.word	0x080053fc
 8003450:	02dc6c00 	.word	0x02dc6c00

08003454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003458:	4b02      	ldr	r3, [pc, #8]	@ (8003464 <HAL_RCC_GetHCLKFreq+0x10>)
 800345a:	681b      	ldr	r3, [r3, #0]
}
 800345c:	0018      	movs	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	46c0      	nop			@ (mov r8, r8)
 8003464:	20000000 	.word	0x20000000

08003468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800346c:	f7ff fff2 	bl	8003454 <HAL_RCC_GetHCLKFreq>
 8003470:	0001      	movs	r1, r0
 8003472:	4b06      	ldr	r3, [pc, #24]	@ (800348c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	0a1b      	lsrs	r3, r3, #8
 8003478:	2207      	movs	r2, #7
 800347a:	4013      	ands	r3, r2
 800347c:	4a04      	ldr	r2, [pc, #16]	@ (8003490 <HAL_RCC_GetPCLK1Freq+0x28>)
 800347e:	5cd3      	ldrb	r3, [r2, r3]
 8003480:	40d9      	lsrs	r1, r3
 8003482:	000b      	movs	r3, r1
}    
 8003484:	0018      	movs	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	46c0      	nop			@ (mov r8, r8)
 800348c:	40021000 	.word	0x40021000
 8003490:	080053e4 	.word	0x080053e4

08003494 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	2380      	movs	r3, #128	@ 0x80
 80034aa:	025b      	lsls	r3, r3, #9
 80034ac:	4013      	ands	r3, r2
 80034ae:	d100      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80034b0:	e08e      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80034b2:	2017      	movs	r0, #23
 80034b4:	183b      	adds	r3, r7, r0
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ba:	4b6e      	ldr	r3, [pc, #440]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034bc:	69da      	ldr	r2, [r3, #28]
 80034be:	2380      	movs	r3, #128	@ 0x80
 80034c0:	055b      	lsls	r3, r3, #21
 80034c2:	4013      	ands	r3, r2
 80034c4:	d110      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034c6:	4b6b      	ldr	r3, [pc, #428]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034c8:	69da      	ldr	r2, [r3, #28]
 80034ca:	4b6a      	ldr	r3, [pc, #424]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034cc:	2180      	movs	r1, #128	@ 0x80
 80034ce:	0549      	lsls	r1, r1, #21
 80034d0:	430a      	orrs	r2, r1
 80034d2:	61da      	str	r2, [r3, #28]
 80034d4:	4b67      	ldr	r3, [pc, #412]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80034d6:	69da      	ldr	r2, [r3, #28]
 80034d8:	2380      	movs	r3, #128	@ 0x80
 80034da:	055b      	lsls	r3, r3, #21
 80034dc:	4013      	ands	r3, r2
 80034de:	60bb      	str	r3, [r7, #8]
 80034e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034e2:	183b      	adds	r3, r7, r0
 80034e4:	2201      	movs	r2, #1
 80034e6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e8:	4b63      	ldr	r3, [pc, #396]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	2380      	movs	r3, #128	@ 0x80
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	4013      	ands	r3, r2
 80034f2:	d11a      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034f4:	4b60      	ldr	r3, [pc, #384]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4b5f      	ldr	r3, [pc, #380]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80034fa:	2180      	movs	r1, #128	@ 0x80
 80034fc:	0049      	lsls	r1, r1, #1
 80034fe:	430a      	orrs	r2, r1
 8003500:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003502:	f7ff f85d 	bl	80025c0 <HAL_GetTick>
 8003506:	0003      	movs	r3, r0
 8003508:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350a:	e008      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350c:	f7ff f858 	bl	80025c0 <HAL_GetTick>
 8003510:	0002      	movs	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b64      	cmp	r3, #100	@ 0x64
 8003518:	d901      	bls.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e0a6      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351e:	4b56      	ldr	r3, [pc, #344]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	2380      	movs	r3, #128	@ 0x80
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	4013      	ands	r3, r2
 8003528:	d0f0      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800352a:	4b52      	ldr	r3, [pc, #328]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800352c:	6a1a      	ldr	r2, [r3, #32]
 800352e:	23c0      	movs	r3, #192	@ 0xc0
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4013      	ands	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d034      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	23c0      	movs	r3, #192	@ 0xc0
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4013      	ands	r3, r2
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	429a      	cmp	r2, r3
 800354a:	d02c      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800354c:	4b49      	ldr	r3, [pc, #292]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	4a4a      	ldr	r2, [pc, #296]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003552:	4013      	ands	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003556:	4b47      	ldr	r3, [pc, #284]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003558:	6a1a      	ldr	r2, [r3, #32]
 800355a:	4b46      	ldr	r3, [pc, #280]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800355c:	2180      	movs	r1, #128	@ 0x80
 800355e:	0249      	lsls	r1, r1, #9
 8003560:	430a      	orrs	r2, r1
 8003562:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003564:	4b43      	ldr	r3, [pc, #268]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003566:	6a1a      	ldr	r2, [r3, #32]
 8003568:	4b42      	ldr	r3, [pc, #264]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800356a:	4945      	ldr	r1, [pc, #276]	@ (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800356c:	400a      	ands	r2, r1
 800356e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003570:	4b40      	ldr	r3, [pc, #256]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	4013      	ands	r3, r2
 800357c:	d013      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357e:	f7ff f81f 	bl	80025c0 <HAL_GetTick>
 8003582:	0003      	movs	r3, r0
 8003584:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003586:	e009      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003588:	f7ff f81a 	bl	80025c0 <HAL_GetTick>
 800358c:	0002      	movs	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	4a3c      	ldr	r2, [pc, #240]	@ (8003684 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d901      	bls.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e067      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359c:	4b35      	ldr	r3, [pc, #212]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	2202      	movs	r2, #2
 80035a2:	4013      	ands	r3, r2
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035a6:	4b33      	ldr	r3, [pc, #204]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	4a34      	ldr	r2, [pc, #208]	@ (800367c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	0019      	movs	r1, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035b6:	430a      	orrs	r2, r1
 80035b8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035ba:	2317      	movs	r3, #23
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d105      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035c6:	69da      	ldr	r2, [r3, #28]
 80035c8:	4b2a      	ldr	r3, [pc, #168]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035ca:	492f      	ldr	r1, [pc, #188]	@ (8003688 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80035cc:	400a      	ands	r2, r1
 80035ce:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2201      	movs	r2, #1
 80035d6:	4013      	ands	r3, r2
 80035d8:	d009      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035da:	4b26      	ldr	r3, [pc, #152]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035de:	2203      	movs	r2, #3
 80035e0:	4393      	bics	r3, r2
 80035e2:	0019      	movs	r1, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	4b22      	ldr	r3, [pc, #136]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035ea:	430a      	orrs	r2, r1
 80035ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2202      	movs	r2, #2
 80035f4:	4013      	ands	r3, r2
 80035f6:	d009      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80035fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fc:	4a23      	ldr	r2, [pc, #140]	@ (800368c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035fe:	4013      	ands	r3, r2
 8003600:	0019      	movs	r1, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	4b1b      	ldr	r3, [pc, #108]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003608:	430a      	orrs	r2, r1
 800360a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2220      	movs	r2, #32
 8003612:	4013      	ands	r3, r2
 8003614:	d009      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003616:	4b17      	ldr	r3, [pc, #92]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361a:	2210      	movs	r2, #16
 800361c:	4393      	bics	r3, r2
 800361e:	0019      	movs	r1, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	4b13      	ldr	r3, [pc, #76]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003626:	430a      	orrs	r2, r1
 8003628:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	2380      	movs	r3, #128	@ 0x80
 8003630:	029b      	lsls	r3, r3, #10
 8003632:	4013      	ands	r3, r2
 8003634:	d009      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003636:	4b0f      	ldr	r3, [pc, #60]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363a:	2280      	movs	r2, #128	@ 0x80
 800363c:	4393      	bics	r3, r2
 800363e:	0019      	movs	r1, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	699a      	ldr	r2, [r3, #24]
 8003644:	4b0b      	ldr	r3, [pc, #44]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003646:	430a      	orrs	r2, r1
 8003648:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	2380      	movs	r3, #128	@ 0x80
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	4013      	ands	r3, r2
 8003654:	d009      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003656:	4b07      	ldr	r3, [pc, #28]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365a:	2240      	movs	r2, #64	@ 0x40
 800365c:	4393      	bics	r3, r2
 800365e:	0019      	movs	r1, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	4b03      	ldr	r3, [pc, #12]	@ (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003666:	430a      	orrs	r2, r1
 8003668:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	0018      	movs	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	b006      	add	sp, #24
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40021000 	.word	0x40021000
 8003678:	40007000 	.word	0x40007000
 800367c:	fffffcff 	.word	0xfffffcff
 8003680:	fffeffff 	.word	0xfffeffff
 8003684:	00001388 	.word	0x00001388
 8003688:	efffffff 	.word	0xefffffff
 800368c:	fffcffff 	.word	0xfffcffff

08003690 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e0a8      	b.n	80037f4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d109      	bne.n	80036be <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	2382      	movs	r3, #130	@ 0x82
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d009      	beq.n	80036ca <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	61da      	str	r2, [r3, #28]
 80036bc:	e005      	b.n	80036ca <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	225d      	movs	r2, #93	@ 0x5d
 80036d4:	5c9b      	ldrb	r3, [r3, r2]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d107      	bne.n	80036ec <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	225c      	movs	r2, #92	@ 0x5c
 80036e0:	2100      	movs	r1, #0
 80036e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	0018      	movs	r0, r3
 80036e8:	f7fe fc9e 	bl	8002028 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	225d      	movs	r2, #93	@ 0x5d
 80036f0:	2102      	movs	r1, #2
 80036f2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2140      	movs	r1, #64	@ 0x40
 8003700:	438a      	bics	r2, r1
 8003702:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	23e0      	movs	r3, #224	@ 0xe0
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	429a      	cmp	r2, r3
 800370e:	d902      	bls.n	8003716 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	e002      	b.n	800371c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003716:	2380      	movs	r3, #128	@ 0x80
 8003718:	015b      	lsls	r3, r3, #5
 800371a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	23f0      	movs	r3, #240	@ 0xf0
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	429a      	cmp	r2, r3
 8003726:	d008      	beq.n	800373a <HAL_SPI_Init+0xaa>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	23e0      	movs	r3, #224	@ 0xe0
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	429a      	cmp	r2, r3
 8003732:	d002      	beq.n	800373a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	2382      	movs	r3, #130	@ 0x82
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	401a      	ands	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6899      	ldr	r1, [r3, #8]
 8003748:	2384      	movs	r3, #132	@ 0x84
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	400b      	ands	r3, r1
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	2102      	movs	r1, #2
 8003756:	400b      	ands	r3, r1
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	2101      	movs	r1, #1
 8003760:	400b      	ands	r3, r1
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6999      	ldr	r1, [r3, #24]
 8003768:	2380      	movs	r3, #128	@ 0x80
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	400b      	ands	r3, r1
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	2138      	movs	r1, #56	@ 0x38
 8003776:	400b      	ands	r3, r1
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	2180      	movs	r1, #128	@ 0x80
 8003780:	400b      	ands	r3, r1
 8003782:	431a      	orrs	r2, r3
 8003784:	0011      	movs	r1, r2
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800378a:	2380      	movs	r3, #128	@ 0x80
 800378c:	019b      	lsls	r3, r3, #6
 800378e:	401a      	ands	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	0c1b      	lsrs	r3, r3, #16
 800379e:	2204      	movs	r2, #4
 80037a0:	401a      	ands	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a6:	2110      	movs	r1, #16
 80037a8:	400b      	ands	r3, r1
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b0:	2108      	movs	r1, #8
 80037b2:	400b      	ands	r3, r1
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68d9      	ldr	r1, [r3, #12]
 80037ba:	23f0      	movs	r3, #240	@ 0xf0
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	400b      	ands	r3, r1
 80037c0:	431a      	orrs	r2, r3
 80037c2:	0011      	movs	r1, r2
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	2380      	movs	r3, #128	@ 0x80
 80037c8:	015b      	lsls	r3, r3, #5
 80037ca:	401a      	ands	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	69da      	ldr	r2, [r3, #28]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4907      	ldr	r1, [pc, #28]	@ (80037fc <HAL_SPI_Init+0x16c>)
 80037e0:	400a      	ands	r2, r1
 80037e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	225d      	movs	r2, #93	@ 0x5d
 80037ee:	2101      	movs	r1, #1
 80037f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	0018      	movs	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b004      	add	sp, #16
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	fffff7ff 	.word	0xfffff7ff

08003800 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	@ 0x28
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	001a      	movs	r2, r3
 800380e:	1cbb      	adds	r3, r7, #2
 8003810:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003812:	2301      	movs	r3, #1
 8003814:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003816:	2323      	movs	r3, #35	@ 0x23
 8003818:	18fb      	adds	r3, r7, r3
 800381a:	2200      	movs	r2, #0
 800381c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	225c      	movs	r2, #92	@ 0x5c
 8003822:	5c9b      	ldrb	r3, [r3, r2]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_SPI_TransmitReceive+0x2c>
 8003828:	2302      	movs	r3, #2
 800382a:	e1c4      	b.n	8003bb6 <HAL_SPI_TransmitReceive+0x3b6>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	225c      	movs	r2, #92	@ 0x5c
 8003830:	2101      	movs	r1, #1
 8003832:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003834:	f7fe fec4 	bl	80025c0 <HAL_GetTick>
 8003838:	0003      	movs	r3, r0
 800383a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800383c:	201b      	movs	r0, #27
 800383e:	183b      	adds	r3, r7, r0
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	215d      	movs	r1, #93	@ 0x5d
 8003844:	5c52      	ldrb	r2, [r2, r1]
 8003846:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800384e:	2312      	movs	r3, #18
 8003850:	18fb      	adds	r3, r7, r3
 8003852:	1cba      	adds	r2, r7, #2
 8003854:	8812      	ldrh	r2, [r2, #0]
 8003856:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003858:	183b      	adds	r3, r7, r0
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d011      	beq.n	8003884 <HAL_SPI_TransmitReceive+0x84>
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	2382      	movs	r3, #130	@ 0x82
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	429a      	cmp	r2, r3
 8003868:	d107      	bne.n	800387a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d103      	bne.n	800387a <HAL_SPI_TransmitReceive+0x7a>
 8003872:	183b      	adds	r3, r7, r0
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b04      	cmp	r3, #4
 8003878:	d004      	beq.n	8003884 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800387a:	2323      	movs	r3, #35	@ 0x23
 800387c:	18fb      	adds	r3, r7, r3
 800387e:	2202      	movs	r2, #2
 8003880:	701a      	strb	r2, [r3, #0]
    goto error;
 8003882:	e191      	b.n	8003ba8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d006      	beq.n	8003898 <HAL_SPI_TransmitReceive+0x98>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_SPI_TransmitReceive+0x98>
 8003890:	1cbb      	adds	r3, r7, #2
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d104      	bne.n	80038a2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003898:	2323      	movs	r3, #35	@ 0x23
 800389a:	18fb      	adds	r3, r7, r3
 800389c:	2201      	movs	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
    goto error;
 80038a0:	e182      	b.n	8003ba8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	225d      	movs	r2, #93	@ 0x5d
 80038a6:	5c9b      	ldrb	r3, [r3, r2]
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d003      	beq.n	80038b6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	225d      	movs	r2, #93	@ 0x5d
 80038b2:	2105      	movs	r1, #5
 80038b4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	1cba      	adds	r2, r7, #2
 80038c6:	2146      	movs	r1, #70	@ 0x46
 80038c8:	8812      	ldrh	r2, [r2, #0]
 80038ca:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	1cba      	adds	r2, r7, #2
 80038d0:	2144      	movs	r1, #68	@ 0x44
 80038d2:	8812      	ldrh	r2, [r2, #0]
 80038d4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1cba      	adds	r2, r7, #2
 80038e0:	8812      	ldrh	r2, [r2, #0]
 80038e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	1cba      	adds	r2, r7, #2
 80038e8:	8812      	ldrh	r2, [r2, #0]
 80038ea:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	23e0      	movs	r3, #224	@ 0xe0
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	429a      	cmp	r2, r3
 8003902:	d908      	bls.n	8003916 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	49ac      	ldr	r1, [pc, #688]	@ (8003bc0 <HAL_SPI_TransmitReceive+0x3c0>)
 8003910:	400a      	ands	r2, r1
 8003912:	605a      	str	r2, [r3, #4]
 8003914:	e008      	b.n	8003928 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2180      	movs	r1, #128	@ 0x80
 8003922:	0149      	lsls	r1, r1, #5
 8003924:	430a      	orrs	r2, r1
 8003926:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2240      	movs	r2, #64	@ 0x40
 8003930:	4013      	ands	r3, r2
 8003932:	2b40      	cmp	r3, #64	@ 0x40
 8003934:	d007      	beq.n	8003946 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2140      	movs	r1, #64	@ 0x40
 8003942:	430a      	orrs	r2, r1
 8003944:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	23e0      	movs	r3, #224	@ 0xe0
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	429a      	cmp	r2, r3
 8003950:	d800      	bhi.n	8003954 <HAL_SPI_TransmitReceive+0x154>
 8003952:	e083      	b.n	8003a5c <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_SPI_TransmitReceive+0x168>
 800395c:	2312      	movs	r3, #18
 800395e:	18fb      	adds	r3, r7, r3
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d000      	beq.n	8003968 <HAL_SPI_TransmitReceive+0x168>
 8003966:	e06d      	b.n	8003a44 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396c:	881a      	ldrh	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003978:	1c9a      	adds	r2, r3, #2
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800398c:	e05a      	b.n	8003a44 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2202      	movs	r2, #2
 8003996:	4013      	ands	r3, r2
 8003998:	2b02      	cmp	r3, #2
 800399a:	d11b      	bne.n	80039d4 <HAL_SPI_TransmitReceive+0x1d4>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d016      	beq.n	80039d4 <HAL_SPI_TransmitReceive+0x1d4>
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d113      	bne.n	80039d4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b0:	881a      	ldrh	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039bc:	1c9a      	adds	r2, r3, #2
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	2201      	movs	r2, #1
 80039dc:	4013      	ands	r3, r2
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d11c      	bne.n	8003a1c <HAL_SPI_TransmitReceive+0x21c>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2246      	movs	r2, #70	@ 0x46
 80039e6:	5a9b      	ldrh	r3, [r3, r2]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d016      	beq.n	8003a1c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f8:	b292      	uxth	r2, r2
 80039fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a00:	1c9a      	adds	r2, r3, #2
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2246      	movs	r2, #70	@ 0x46
 8003a0a:	5a9b      	ldrh	r3, [r3, r2]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b299      	uxth	r1, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2246      	movs	r2, #70	@ 0x46
 8003a16:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a1c:	f7fe fdd0 	bl	80025c0 <HAL_GetTick>
 8003a20:	0002      	movs	r2, r0
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d80b      	bhi.n	8003a44 <HAL_SPI_TransmitReceive+0x244>
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2e:	3301      	adds	r3, #1
 8003a30:	d008      	beq.n	8003a44 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8003a32:	2323      	movs	r3, #35	@ 0x23
 8003a34:	18fb      	adds	r3, r7, r3
 8003a36:	2203      	movs	r2, #3
 8003a38:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	225d      	movs	r2, #93	@ 0x5d
 8003a3e:	2101      	movs	r1, #1
 8003a40:	5499      	strb	r1, [r3, r2]
        goto error;
 8003a42:	e0b1      	b.n	8003ba8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d19f      	bne.n	800398e <HAL_SPI_TransmitReceive+0x18e>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2246      	movs	r2, #70	@ 0x46
 8003a52:	5a9b      	ldrh	r3, [r3, r2]
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d199      	bne.n	800398e <HAL_SPI_TransmitReceive+0x18e>
 8003a5a:	e089      	b.n	8003b70 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <HAL_SPI_TransmitReceive+0x270>
 8003a64:	2312      	movs	r3, #18
 8003a66:	18fb      	adds	r3, r7, r3
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d000      	beq.n	8003a70 <HAL_SPI_TransmitReceive+0x270>
 8003a6e:	e074      	b.n	8003b5a <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	330c      	adds	r3, #12
 8003a7a:	7812      	ldrb	r2, [r2, #0]
 8003a7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a96:	e060      	b.n	8003b5a <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d11c      	bne.n	8003ae0 <HAL_SPI_TransmitReceive+0x2e0>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d017      	beq.n	8003ae0 <HAL_SPI_TransmitReceive+0x2e0>
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d114      	bne.n	8003ae0 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	330c      	adds	r3, #12
 8003ac0:	7812      	ldrb	r2, [r2, #0]
 8003ac2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	4013      	ands	r3, r2
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d11e      	bne.n	8003b2c <HAL_SPI_TransmitReceive+0x32c>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2246      	movs	r2, #70	@ 0x46
 8003af2:	5a9b      	ldrh	r3, [r3, r2]
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d018      	beq.n	8003b2c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	330c      	adds	r3, #12
 8003b00:	001a      	movs	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	7812      	ldrb	r2, [r2, #0]
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2246      	movs	r2, #70	@ 0x46
 8003b1a:	5a9b      	ldrh	r3, [r3, r2]
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b299      	uxth	r1, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2246      	movs	r2, #70	@ 0x46
 8003b26:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b2c:	f7fe fd48 	bl	80025c0 <HAL_GetTick>
 8003b30:	0002      	movs	r2, r0
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d802      	bhi.n	8003b42 <HAL_SPI_TransmitReceive+0x342>
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b3e:	3301      	adds	r3, #1
 8003b40:	d102      	bne.n	8003b48 <HAL_SPI_TransmitReceive+0x348>
 8003b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d108      	bne.n	8003b5a <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8003b48:	2323      	movs	r3, #35	@ 0x23
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	225d      	movs	r2, #93	@ 0x5d
 8003b54:	2101      	movs	r1, #1
 8003b56:	5499      	strb	r1, [r3, r2]
        goto error;
 8003b58:	e026      	b.n	8003ba8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d199      	bne.n	8003a98 <HAL_SPI_TransmitReceive+0x298>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2246      	movs	r2, #70	@ 0x46
 8003b68:	5a9b      	ldrh	r3, [r3, r2]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d193      	bne.n	8003a98 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b70:	69fa      	ldr	r2, [r7, #28]
 8003b72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	0018      	movs	r0, r3
 8003b78:	f000 f954 	bl	8003e24 <SPI_EndRxTxTransaction>
 8003b7c:	1e03      	subs	r3, r0, #0
 8003b7e:	d006      	beq.n	8003b8e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8003b80:	2323      	movs	r3, #35	@ 0x23
 8003b82:	18fb      	adds	r3, r7, r3
 8003b84:	2201      	movs	r2, #1
 8003b86:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d004      	beq.n	8003ba0 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8003b96:	2323      	movs	r3, #35	@ 0x23
 8003b98:	18fb      	adds	r3, r7, r3
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	701a      	strb	r2, [r3, #0]
 8003b9e:	e003      	b.n	8003ba8 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	225d      	movs	r2, #93	@ 0x5d
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	225c      	movs	r2, #92	@ 0x5c
 8003bac:	2100      	movs	r1, #0
 8003bae:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003bb0:	2323      	movs	r3, #35	@ 0x23
 8003bb2:	18fb      	adds	r3, r7, r3
 8003bb4:	781b      	ldrb	r3, [r3, #0]
}
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	b00a      	add	sp, #40	@ 0x28
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	46c0      	nop			@ (mov r8, r8)
 8003bc0:	ffffefff 	.word	0xffffefff

08003bc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b088      	sub	sp, #32
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	603b      	str	r3, [r7, #0]
 8003bd0:	1dfb      	adds	r3, r7, #7
 8003bd2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bd4:	f7fe fcf4 	bl	80025c0 <HAL_GetTick>
 8003bd8:	0002      	movs	r2, r0
 8003bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	18d3      	adds	r3, r2, r3
 8003be2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003be4:	f7fe fcec 	bl	80025c0 <HAL_GetTick>
 8003be8:	0003      	movs	r3, r0
 8003bea:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bec:	4b3a      	ldr	r3, [pc, #232]	@ (8003cd8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	015b      	lsls	r3, r3, #5
 8003bf2:	0d1b      	lsrs	r3, r3, #20
 8003bf4:	69fa      	ldr	r2, [r7, #28]
 8003bf6:	4353      	muls	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bfa:	e058      	b.n	8003cae <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	d055      	beq.n	8003cae <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c02:	f7fe fcdd 	bl	80025c0 <HAL_GetTick>
 8003c06:	0002      	movs	r2, r0
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	69fa      	ldr	r2, [r7, #28]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d902      	bls.n	8003c18 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d142      	bne.n	8003c9e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	21e0      	movs	r1, #224	@ 0xe0
 8003c24:	438a      	bics	r2, r1
 8003c26:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	2382      	movs	r3, #130	@ 0x82
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d113      	bne.n	8003c5c <SPI_WaitFlagStateUntilTimeout+0x98>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	2380      	movs	r3, #128	@ 0x80
 8003c3a:	021b      	lsls	r3, r3, #8
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d005      	beq.n	8003c4c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	2380      	movs	r3, #128	@ 0x80
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d107      	bne.n	8003c5c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2140      	movs	r1, #64	@ 0x40
 8003c58:	438a      	bics	r2, r1
 8003c5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c60:	2380      	movs	r3, #128	@ 0x80
 8003c62:	019b      	lsls	r3, r3, #6
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d110      	bne.n	8003c8a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	491a      	ldr	r1, [pc, #104]	@ (8003cdc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003c74:	400a      	ands	r2, r1
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2180      	movs	r1, #128	@ 0x80
 8003c84:	0189      	lsls	r1, r1, #6
 8003c86:	430a      	orrs	r2, r1
 8003c88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	225d      	movs	r2, #93	@ 0x5d
 8003c8e:	2101      	movs	r1, #1
 8003c90:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	225c      	movs	r2, #92	@ 0x5c
 8003c96:	2100      	movs	r1, #0
 8003c98:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e017      	b.n	8003cce <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	425a      	negs	r2, r3
 8003cbe:	4153      	adcs	r3, r2
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	001a      	movs	r2, r3
 8003cc4:	1dfb      	adds	r3, r7, #7
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d197      	bne.n	8003bfc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	0018      	movs	r0, r3
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b008      	add	sp, #32
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	46c0      	nop			@ (mov r8, r8)
 8003cd8:	20000000 	.word	0x20000000
 8003cdc:	ffffdfff 	.word	0xffffdfff

08003ce0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08a      	sub	sp, #40	@ 0x28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003cee:	2317      	movs	r3, #23
 8003cf0:	18fb      	adds	r3, r7, r3
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003cf6:	f7fe fc63 	bl	80025c0 <HAL_GetTick>
 8003cfa:	0002      	movs	r2, r0
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfe:	1a9b      	subs	r3, r3, r2
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	18d3      	adds	r3, r2, r3
 8003d04:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003d06:	f7fe fc5b 	bl	80025c0 <HAL_GetTick>
 8003d0a:	0003      	movs	r3, r0
 8003d0c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	330c      	adds	r3, #12
 8003d14:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d16:	4b41      	ldr	r3, [pc, #260]	@ (8003e1c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	0013      	movs	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	189b      	adds	r3, r3, r2
 8003d20:	00da      	lsls	r2, r3, #3
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	0d1b      	lsrs	r3, r3, #20
 8003d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d28:	4353      	muls	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d2c:	e068      	b.n	8003e00 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	23c0      	movs	r3, #192	@ 0xc0
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d10a      	bne.n	8003d4e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d107      	bne.n	8003d4e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	2117      	movs	r1, #23
 8003d46:	187b      	adds	r3, r7, r1
 8003d48:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d4a:	187b      	adds	r3, r7, r1
 8003d4c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	3301      	adds	r3, #1
 8003d52:	d055      	beq.n	8003e00 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d54:	f7fe fc34 	bl	80025c0 <HAL_GetTick>
 8003d58:	0002      	movs	r2, r0
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d902      	bls.n	8003d6a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d142      	bne.n	8003df0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	21e0      	movs	r1, #224	@ 0xe0
 8003d76:	438a      	bics	r2, r1
 8003d78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	2382      	movs	r3, #130	@ 0x82
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d113      	bne.n	8003dae <SPI_WaitFifoStateUntilTimeout+0xce>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	2380      	movs	r3, #128	@ 0x80
 8003d8c:	021b      	lsls	r3, r3, #8
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d005      	beq.n	8003d9e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	2380      	movs	r3, #128	@ 0x80
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d107      	bne.n	8003dae <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2140      	movs	r1, #64	@ 0x40
 8003daa:	438a      	bics	r2, r1
 8003dac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003db2:	2380      	movs	r3, #128	@ 0x80
 8003db4:	019b      	lsls	r3, r3, #6
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d110      	bne.n	8003ddc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4916      	ldr	r1, [pc, #88]	@ (8003e20 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003dc6:	400a      	ands	r2, r1
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2180      	movs	r1, #128	@ 0x80
 8003dd6:	0189      	lsls	r1, r1, #6
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	225d      	movs	r2, #93	@ 0x5d
 8003de0:	2101      	movs	r1, #1
 8003de2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	225c      	movs	r2, #92	@ 0x5c
 8003de8:	2100      	movs	r1, #0
 8003dea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e010      	b.n	8003e12 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d18e      	bne.n	8003d2e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	0018      	movs	r0, r3
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b00a      	add	sp, #40	@ 0x28
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	46c0      	nop			@ (mov r8, r8)
 8003e1c:	20000000 	.word	0x20000000
 8003e20:	ffffdfff 	.word	0xffffdfff

08003e24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af02      	add	r7, sp, #8
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	23c0      	movs	r3, #192	@ 0xc0
 8003e34:	0159      	lsls	r1, r3, #5
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	0013      	movs	r3, r2
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f7ff ff4e 	bl	8003ce0 <SPI_WaitFifoStateUntilTimeout>
 8003e44:	1e03      	subs	r3, r0, #0
 8003e46:	d007      	beq.n	8003e58 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e027      	b.n	8003ea8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	0013      	movs	r3, r2
 8003e62:	2200      	movs	r2, #0
 8003e64:	2180      	movs	r1, #128	@ 0x80
 8003e66:	f7ff fead 	bl	8003bc4 <SPI_WaitFlagStateUntilTimeout>
 8003e6a:	1e03      	subs	r3, r0, #0
 8003e6c:	d007      	beq.n	8003e7e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e72:	2220      	movs	r2, #32
 8003e74:	431a      	orrs	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e014      	b.n	8003ea8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	23c0      	movs	r3, #192	@ 0xc0
 8003e82:	00d9      	lsls	r1, r3, #3
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	0013      	movs	r3, r2
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f7ff ff27 	bl	8003ce0 <SPI_WaitFifoStateUntilTimeout>
 8003e92:	1e03      	subs	r3, r0, #0
 8003e94:	d007      	beq.n	8003ea6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e000      	b.n	8003ea8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b004      	add	sp, #16
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e042      	b.n	8003f48 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	223d      	movs	r2, #61	@ 0x3d
 8003ec6:	5c9b      	ldrb	r3, [r3, r2]
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d107      	bne.n	8003ede <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	223c      	movs	r2, #60	@ 0x3c
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	0018      	movs	r0, r3
 8003eda:	f7fe fa11 	bl	8002300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	223d      	movs	r2, #61	@ 0x3d
 8003ee2:	2102      	movs	r1, #2
 8003ee4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3304      	adds	r3, #4
 8003eee:	0019      	movs	r1, r3
 8003ef0:	0010      	movs	r0, r2
 8003ef2:	f000 fa1f 	bl	8004334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2246      	movs	r2, #70	@ 0x46
 8003efa:	2101      	movs	r1, #1
 8003efc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	223e      	movs	r2, #62	@ 0x3e
 8003f02:	2101      	movs	r1, #1
 8003f04:	5499      	strb	r1, [r3, r2]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	223f      	movs	r2, #63	@ 0x3f
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	5499      	strb	r1, [r3, r2]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2240      	movs	r2, #64	@ 0x40
 8003f12:	2101      	movs	r1, #1
 8003f14:	5499      	strb	r1, [r3, r2]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2241      	movs	r2, #65	@ 0x41
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2242      	movs	r2, #66	@ 0x42
 8003f22:	2101      	movs	r1, #1
 8003f24:	5499      	strb	r1, [r3, r2]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2243      	movs	r2, #67	@ 0x43
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	5499      	strb	r1, [r3, r2]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2244      	movs	r2, #68	@ 0x44
 8003f32:	2101      	movs	r1, #1
 8003f34:	5499      	strb	r1, [r3, r2]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2245      	movs	r2, #69	@ 0x45
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	223d      	movs	r2, #61	@ 0x3d
 8003f42:	2101      	movs	r1, #1
 8003f44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	0018      	movs	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	b002      	add	sp, #8
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e042      	b.n	8003fe8 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	223d      	movs	r2, #61	@ 0x3d
 8003f66:	5c9b      	ldrb	r3, [r3, r2]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d107      	bne.n	8003f7e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	223c      	movs	r2, #60	@ 0x3c
 8003f72:	2100      	movs	r1, #0
 8003f74:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f000 f839 	bl	8003ff0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	223d      	movs	r2, #61	@ 0x3d
 8003f82:	2102      	movs	r1, #2
 8003f84:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	0019      	movs	r1, r3
 8003f90:	0010      	movs	r0, r2
 8003f92:	f000 f9cf 	bl	8004334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2246      	movs	r2, #70	@ 0x46
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	223e      	movs	r2, #62	@ 0x3e
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	5499      	strb	r1, [r3, r2]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	223f      	movs	r2, #63	@ 0x3f
 8003faa:	2101      	movs	r1, #1
 8003fac:	5499      	strb	r1, [r3, r2]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2240      	movs	r2, #64	@ 0x40
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	5499      	strb	r1, [r3, r2]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2241      	movs	r2, #65	@ 0x41
 8003fba:	2101      	movs	r1, #1
 8003fbc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2242      	movs	r2, #66	@ 0x42
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	5499      	strb	r1, [r3, r2]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2243      	movs	r2, #67	@ 0x43
 8003fca:	2101      	movs	r1, #1
 8003fcc:	5499      	strb	r1, [r3, r2]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2244      	movs	r2, #68	@ 0x44
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	5499      	strb	r1, [r3, r2]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2245      	movs	r2, #69	@ 0x45
 8003fda:	2101      	movs	r1, #1
 8003fdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	223d      	movs	r2, #61	@ 0x3d
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	0018      	movs	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	b002      	add	sp, #8
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ff8:	46c0      	nop			@ (mov r8, r8)
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	b002      	add	sp, #8
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800400c:	2317      	movs	r3, #23
 800400e:	18fb      	adds	r3, r7, r3
 8004010:	2200      	movs	r2, #0
 8004012:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	223c      	movs	r2, #60	@ 0x3c
 8004018:	5c9b      	ldrb	r3, [r3, r2]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d101      	bne.n	8004022 <HAL_TIM_PWM_ConfigChannel+0x22>
 800401e:	2302      	movs	r3, #2
 8004020:	e0ad      	b.n	800417e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	223c      	movs	r2, #60	@ 0x3c
 8004026:	2101      	movs	r1, #1
 8004028:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b0c      	cmp	r3, #12
 800402e:	d100      	bne.n	8004032 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004030:	e076      	b.n	8004120 <HAL_TIM_PWM_ConfigChannel+0x120>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b0c      	cmp	r3, #12
 8004036:	d900      	bls.n	800403a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004038:	e095      	b.n	8004166 <HAL_TIM_PWM_ConfigChannel+0x166>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b08      	cmp	r3, #8
 800403e:	d04e      	beq.n	80040de <HAL_TIM_PWM_ConfigChannel+0xde>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b08      	cmp	r3, #8
 8004044:	d900      	bls.n	8004048 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004046:	e08e      	b.n	8004166 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_TIM_PWM_ConfigChannel+0x56>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b04      	cmp	r3, #4
 8004052:	d021      	beq.n	8004098 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004054:	e087      	b.n	8004166 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	0011      	movs	r1, r2
 800405e:	0018      	movs	r0, r3
 8004060:	f000 f9e8 	bl	8004434 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	699a      	ldr	r2, [r3, #24]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2108      	movs	r1, #8
 8004070:	430a      	orrs	r2, r1
 8004072:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699a      	ldr	r2, [r3, #24]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2104      	movs	r1, #4
 8004080:	438a      	bics	r2, r1
 8004082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6999      	ldr	r1, [r3, #24]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	691a      	ldr	r2, [r3, #16]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	619a      	str	r2, [r3, #24]
      break;
 8004096:	e06b      	b.n	8004170 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	0011      	movs	r1, r2
 80040a0:	0018      	movs	r0, r3
 80040a2:	f000 fa4f 	bl	8004544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	699a      	ldr	r2, [r3, #24]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2180      	movs	r1, #128	@ 0x80
 80040b2:	0109      	lsls	r1, r1, #4
 80040b4:	430a      	orrs	r2, r1
 80040b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4931      	ldr	r1, [pc, #196]	@ (8004188 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80040c4:	400a      	ands	r2, r1
 80040c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6999      	ldr	r1, [r3, #24]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	021a      	lsls	r2, r3, #8
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	619a      	str	r2, [r3, #24]
      break;
 80040dc:	e048      	b.n	8004170 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	0011      	movs	r1, r2
 80040e6:	0018      	movs	r0, r3
 80040e8:	f000 fab0 	bl	800464c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	69da      	ldr	r2, [r3, #28]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2108      	movs	r1, #8
 80040f8:	430a      	orrs	r2, r1
 80040fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	69da      	ldr	r2, [r3, #28]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2104      	movs	r1, #4
 8004108:	438a      	bics	r2, r1
 800410a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	69d9      	ldr	r1, [r3, #28]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	61da      	str	r2, [r3, #28]
      break;
 800411e:	e027      	b.n	8004170 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	0011      	movs	r1, r2
 8004128:	0018      	movs	r0, r3
 800412a:	f000 fb15 	bl	8004758 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2180      	movs	r1, #128	@ 0x80
 800413a:	0109      	lsls	r1, r1, #4
 800413c:	430a      	orrs	r2, r1
 800413e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69da      	ldr	r2, [r3, #28]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	490f      	ldr	r1, [pc, #60]	@ (8004188 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800414c:	400a      	ands	r2, r1
 800414e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	69d9      	ldr	r1, [r3, #28]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	021a      	lsls	r2, r3, #8
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	61da      	str	r2, [r3, #28]
      break;
 8004164:	e004      	b.n	8004170 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004166:	2317      	movs	r3, #23
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	2201      	movs	r2, #1
 800416c:	701a      	strb	r2, [r3, #0]
      break;
 800416e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	223c      	movs	r2, #60	@ 0x3c
 8004174:	2100      	movs	r1, #0
 8004176:	5499      	strb	r1, [r3, r2]

  return status;
 8004178:	2317      	movs	r3, #23
 800417a:	18fb      	adds	r3, r7, r3
 800417c:	781b      	ldrb	r3, [r3, #0]
}
 800417e:	0018      	movs	r0, r3
 8004180:	46bd      	mov	sp, r7
 8004182:	b006      	add	sp, #24
 8004184:	bd80      	pop	{r7, pc}
 8004186:	46c0      	nop			@ (mov r8, r8)
 8004188:	fffffbff 	.word	0xfffffbff

0800418c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004196:	230f      	movs	r3, #15
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	2200      	movs	r2, #0
 800419c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	223c      	movs	r2, #60	@ 0x3c
 80041a2:	5c9b      	ldrb	r3, [r3, r2]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_TIM_ConfigClockSource+0x20>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e0bc      	b.n	8004326 <HAL_TIM_ConfigClockSource+0x19a>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	223c      	movs	r2, #60	@ 0x3c
 80041b0:	2101      	movs	r1, #1
 80041b2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	223d      	movs	r2, #61	@ 0x3d
 80041b8:	2102      	movs	r1, #2
 80041ba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2277      	movs	r2, #119	@ 0x77
 80041c8:	4393      	bics	r3, r2
 80041ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4a58      	ldr	r2, [pc, #352]	@ (8004330 <HAL_TIM_ConfigClockSource+0x1a4>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2280      	movs	r2, #128	@ 0x80
 80041e2:	0192      	lsls	r2, r2, #6
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d040      	beq.n	800426a <HAL_TIM_ConfigClockSource+0xde>
 80041e8:	2280      	movs	r2, #128	@ 0x80
 80041ea:	0192      	lsls	r2, r2, #6
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d900      	bls.n	80041f2 <HAL_TIM_ConfigClockSource+0x66>
 80041f0:	e088      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x178>
 80041f2:	2280      	movs	r2, #128	@ 0x80
 80041f4:	0152      	lsls	r2, r2, #5
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d100      	bne.n	80041fc <HAL_TIM_ConfigClockSource+0x70>
 80041fa:	e088      	b.n	800430e <HAL_TIM_ConfigClockSource+0x182>
 80041fc:	2280      	movs	r2, #128	@ 0x80
 80041fe:	0152      	lsls	r2, r2, #5
 8004200:	4293      	cmp	r3, r2
 8004202:	d900      	bls.n	8004206 <HAL_TIM_ConfigClockSource+0x7a>
 8004204:	e07e      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x178>
 8004206:	2b70      	cmp	r3, #112	@ 0x70
 8004208:	d018      	beq.n	800423c <HAL_TIM_ConfigClockSource+0xb0>
 800420a:	d900      	bls.n	800420e <HAL_TIM_ConfigClockSource+0x82>
 800420c:	e07a      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x178>
 800420e:	2b60      	cmp	r3, #96	@ 0x60
 8004210:	d04f      	beq.n	80042b2 <HAL_TIM_ConfigClockSource+0x126>
 8004212:	d900      	bls.n	8004216 <HAL_TIM_ConfigClockSource+0x8a>
 8004214:	e076      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x178>
 8004216:	2b50      	cmp	r3, #80	@ 0x50
 8004218:	d03b      	beq.n	8004292 <HAL_TIM_ConfigClockSource+0x106>
 800421a:	d900      	bls.n	800421e <HAL_TIM_ConfigClockSource+0x92>
 800421c:	e072      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x178>
 800421e:	2b40      	cmp	r3, #64	@ 0x40
 8004220:	d057      	beq.n	80042d2 <HAL_TIM_ConfigClockSource+0x146>
 8004222:	d900      	bls.n	8004226 <HAL_TIM_ConfigClockSource+0x9a>
 8004224:	e06e      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x178>
 8004226:	2b30      	cmp	r3, #48	@ 0x30
 8004228:	d063      	beq.n	80042f2 <HAL_TIM_ConfigClockSource+0x166>
 800422a:	d86b      	bhi.n	8004304 <HAL_TIM_ConfigClockSource+0x178>
 800422c:	2b20      	cmp	r3, #32
 800422e:	d060      	beq.n	80042f2 <HAL_TIM_ConfigClockSource+0x166>
 8004230:	d868      	bhi.n	8004304 <HAL_TIM_ConfigClockSource+0x178>
 8004232:	2b00      	cmp	r3, #0
 8004234:	d05d      	beq.n	80042f2 <HAL_TIM_ConfigClockSource+0x166>
 8004236:	2b10      	cmp	r3, #16
 8004238:	d05b      	beq.n	80042f2 <HAL_TIM_ConfigClockSource+0x166>
 800423a:	e063      	b.n	8004304 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800424c:	f000 fb68 	bl	8004920 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2277      	movs	r2, #119	@ 0x77
 800425c:	4313      	orrs	r3, r2
 800425e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	609a      	str	r2, [r3, #8]
      break;
 8004268:	e052      	b.n	8004310 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800427a:	f000 fb51 	bl	8004920 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2180      	movs	r1, #128	@ 0x80
 800428a:	01c9      	lsls	r1, r1, #7
 800428c:	430a      	orrs	r2, r1
 800428e:	609a      	str	r2, [r3, #8]
      break;
 8004290:	e03e      	b.n	8004310 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800429e:	001a      	movs	r2, r3
 80042a0:	f000 fac4 	bl	800482c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2150      	movs	r1, #80	@ 0x50
 80042aa:	0018      	movs	r0, r3
 80042ac:	f000 fb1e 	bl	80048ec <TIM_ITRx_SetConfig>
      break;
 80042b0:	e02e      	b.n	8004310 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042be:	001a      	movs	r2, r3
 80042c0:	f000 fae2 	bl	8004888 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2160      	movs	r1, #96	@ 0x60
 80042ca:	0018      	movs	r0, r3
 80042cc:	f000 fb0e 	bl	80048ec <TIM_ITRx_SetConfig>
      break;
 80042d0:	e01e      	b.n	8004310 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042de:	001a      	movs	r2, r3
 80042e0:	f000 faa4 	bl	800482c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2140      	movs	r1, #64	@ 0x40
 80042ea:	0018      	movs	r0, r3
 80042ec:	f000 fafe 	bl	80048ec <TIM_ITRx_SetConfig>
      break;
 80042f0:	e00e      	b.n	8004310 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	0019      	movs	r1, r3
 80042fc:	0010      	movs	r0, r2
 80042fe:	f000 faf5 	bl	80048ec <TIM_ITRx_SetConfig>
      break;
 8004302:	e005      	b.n	8004310 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004304:	230f      	movs	r3, #15
 8004306:	18fb      	adds	r3, r7, r3
 8004308:	2201      	movs	r2, #1
 800430a:	701a      	strb	r2, [r3, #0]
      break;
 800430c:	e000      	b.n	8004310 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800430e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	223d      	movs	r2, #61	@ 0x3d
 8004314:	2101      	movs	r1, #1
 8004316:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	223c      	movs	r2, #60	@ 0x3c
 800431c:	2100      	movs	r1, #0
 800431e:	5499      	strb	r1, [r3, r2]

  return status;
 8004320:	230f      	movs	r3, #15
 8004322:	18fb      	adds	r3, r7, r3
 8004324:	781b      	ldrb	r3, [r3, #0]
}
 8004326:	0018      	movs	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	b004      	add	sp, #16
 800432c:	bd80      	pop	{r7, pc}
 800432e:	46c0      	nop			@ (mov r8, r8)
 8004330:	ffff00ff 	.word	0xffff00ff

08004334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a34      	ldr	r2, [pc, #208]	@ (8004418 <TIM_Base_SetConfig+0xe4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d008      	beq.n	800435e <TIM_Base_SetConfig+0x2a>
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	2380      	movs	r3, #128	@ 0x80
 8004350:	05db      	lsls	r3, r3, #23
 8004352:	429a      	cmp	r2, r3
 8004354:	d003      	beq.n	800435e <TIM_Base_SetConfig+0x2a>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a30      	ldr	r2, [pc, #192]	@ (800441c <TIM_Base_SetConfig+0xe8>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d108      	bne.n	8004370 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2270      	movs	r2, #112	@ 0x70
 8004362:	4393      	bics	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4313      	orrs	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a29      	ldr	r2, [pc, #164]	@ (8004418 <TIM_Base_SetConfig+0xe4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d018      	beq.n	80043aa <TIM_Base_SetConfig+0x76>
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	2380      	movs	r3, #128	@ 0x80
 800437c:	05db      	lsls	r3, r3, #23
 800437e:	429a      	cmp	r2, r3
 8004380:	d013      	beq.n	80043aa <TIM_Base_SetConfig+0x76>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a25      	ldr	r2, [pc, #148]	@ (800441c <TIM_Base_SetConfig+0xe8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00f      	beq.n	80043aa <TIM_Base_SetConfig+0x76>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a24      	ldr	r2, [pc, #144]	@ (8004420 <TIM_Base_SetConfig+0xec>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00b      	beq.n	80043aa <TIM_Base_SetConfig+0x76>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a23      	ldr	r2, [pc, #140]	@ (8004424 <TIM_Base_SetConfig+0xf0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d007      	beq.n	80043aa <TIM_Base_SetConfig+0x76>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a22      	ldr	r2, [pc, #136]	@ (8004428 <TIM_Base_SetConfig+0xf4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d003      	beq.n	80043aa <TIM_Base_SetConfig+0x76>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a21      	ldr	r2, [pc, #132]	@ (800442c <TIM_Base_SetConfig+0xf8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d108      	bne.n	80043bc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4a20      	ldr	r2, [pc, #128]	@ (8004430 <TIM_Base_SetConfig+0xfc>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2280      	movs	r2, #128	@ 0x80
 80043c0:	4393      	bics	r3, r2
 80043c2:	001a      	movs	r2, r3
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a0c      	ldr	r2, [pc, #48]	@ (8004418 <TIM_Base_SetConfig+0xe4>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d00b      	beq.n	8004402 <TIM_Base_SetConfig+0xce>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a0d      	ldr	r2, [pc, #52]	@ (8004424 <TIM_Base_SetConfig+0xf0>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d007      	beq.n	8004402 <TIM_Base_SetConfig+0xce>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a0c      	ldr	r2, [pc, #48]	@ (8004428 <TIM_Base_SetConfig+0xf4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d003      	beq.n	8004402 <TIM_Base_SetConfig+0xce>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a0b      	ldr	r2, [pc, #44]	@ (800442c <TIM_Base_SetConfig+0xf8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d103      	bne.n	800440a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	615a      	str	r2, [r3, #20]
}
 8004410:	46c0      	nop			@ (mov r8, r8)
 8004412:	46bd      	mov	sp, r7
 8004414:	b004      	add	sp, #16
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40012c00 	.word	0x40012c00
 800441c:	40000400 	.word	0x40000400
 8004420:	40002000 	.word	0x40002000
 8004424:	40014000 	.word	0x40014000
 8004428:	40014400 	.word	0x40014400
 800442c:	40014800 	.word	0x40014800
 8004430:	fffffcff 	.word	0xfffffcff

08004434 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	2201      	movs	r2, #1
 8004444:	4393      	bics	r3, r2
 8004446:	001a      	movs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2270      	movs	r2, #112	@ 0x70
 8004462:	4393      	bics	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2203      	movs	r2, #3
 800446a:	4393      	bics	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4313      	orrs	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	2202      	movs	r2, #2
 800447c:	4393      	bics	r3, r2
 800447e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a27      	ldr	r2, [pc, #156]	@ (800452c <TIM_OC1_SetConfig+0xf8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00b      	beq.n	80044aa <TIM_OC1_SetConfig+0x76>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a26      	ldr	r2, [pc, #152]	@ (8004530 <TIM_OC1_SetConfig+0xfc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d007      	beq.n	80044aa <TIM_OC1_SetConfig+0x76>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a25      	ldr	r2, [pc, #148]	@ (8004534 <TIM_OC1_SetConfig+0x100>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d003      	beq.n	80044aa <TIM_OC1_SetConfig+0x76>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a24      	ldr	r2, [pc, #144]	@ (8004538 <TIM_OC1_SetConfig+0x104>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d10c      	bne.n	80044c4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2208      	movs	r2, #8
 80044ae:	4393      	bics	r3, r2
 80044b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	2204      	movs	r2, #4
 80044c0:	4393      	bics	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a19      	ldr	r2, [pc, #100]	@ (800452c <TIM_OC1_SetConfig+0xf8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d00b      	beq.n	80044e4 <TIM_OC1_SetConfig+0xb0>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a18      	ldr	r2, [pc, #96]	@ (8004530 <TIM_OC1_SetConfig+0xfc>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d007      	beq.n	80044e4 <TIM_OC1_SetConfig+0xb0>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a17      	ldr	r2, [pc, #92]	@ (8004534 <TIM_OC1_SetConfig+0x100>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d003      	beq.n	80044e4 <TIM_OC1_SetConfig+0xb0>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a16      	ldr	r2, [pc, #88]	@ (8004538 <TIM_OC1_SetConfig+0x104>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d111      	bne.n	8004508 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	4a15      	ldr	r2, [pc, #84]	@ (800453c <TIM_OC1_SetConfig+0x108>)
 80044e8:	4013      	ands	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	4a14      	ldr	r2, [pc, #80]	@ (8004540 <TIM_OC1_SetConfig+0x10c>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	621a      	str	r2, [r3, #32]
}
 8004522:	46c0      	nop			@ (mov r8, r8)
 8004524:	46bd      	mov	sp, r7
 8004526:	b006      	add	sp, #24
 8004528:	bd80      	pop	{r7, pc}
 800452a:	46c0      	nop			@ (mov r8, r8)
 800452c:	40012c00 	.word	0x40012c00
 8004530:	40014000 	.word	0x40014000
 8004534:	40014400 	.word	0x40014400
 8004538:	40014800 	.word	0x40014800
 800453c:	fffffeff 	.word	0xfffffeff
 8004540:	fffffdff 	.word	0xfffffdff

08004544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	2210      	movs	r2, #16
 8004554:	4393      	bics	r3, r2
 8004556:	001a      	movs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4a2e      	ldr	r2, [pc, #184]	@ (800462c <TIM_OC2_SetConfig+0xe8>)
 8004572:	4013      	ands	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4a2d      	ldr	r2, [pc, #180]	@ (8004630 <TIM_OC2_SetConfig+0xec>)
 800457a:	4013      	ands	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	021b      	lsls	r3, r3, #8
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2220      	movs	r2, #32
 800458e:	4393      	bics	r3, r2
 8004590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	4313      	orrs	r3, r2
 800459c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a24      	ldr	r2, [pc, #144]	@ (8004634 <TIM_OC2_SetConfig+0xf0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d10d      	bne.n	80045c2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2280      	movs	r2, #128	@ 0x80
 80045aa:	4393      	bics	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2240      	movs	r2, #64	@ 0x40
 80045be:	4393      	bics	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004634 <TIM_OC2_SetConfig+0xf0>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00b      	beq.n	80045e2 <TIM_OC2_SetConfig+0x9e>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a1a      	ldr	r2, [pc, #104]	@ (8004638 <TIM_OC2_SetConfig+0xf4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d007      	beq.n	80045e2 <TIM_OC2_SetConfig+0x9e>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a19      	ldr	r2, [pc, #100]	@ (800463c <TIM_OC2_SetConfig+0xf8>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d003      	beq.n	80045e2 <TIM_OC2_SetConfig+0x9e>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a18      	ldr	r2, [pc, #96]	@ (8004640 <TIM_OC2_SetConfig+0xfc>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d113      	bne.n	800460a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	4a17      	ldr	r2, [pc, #92]	@ (8004644 <TIM_OC2_SetConfig+0x100>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	4a16      	ldr	r2, [pc, #88]	@ (8004648 <TIM_OC2_SetConfig+0x104>)
 80045ee:	4013      	ands	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	621a      	str	r2, [r3, #32]
}
 8004624:	46c0      	nop			@ (mov r8, r8)
 8004626:	46bd      	mov	sp, r7
 8004628:	b006      	add	sp, #24
 800462a:	bd80      	pop	{r7, pc}
 800462c:	ffff8fff 	.word	0xffff8fff
 8004630:	fffffcff 	.word	0xfffffcff
 8004634:	40012c00 	.word	0x40012c00
 8004638:	40014000 	.word	0x40014000
 800463c:	40014400 	.word	0x40014400
 8004640:	40014800 	.word	0x40014800
 8004644:	fffffbff 	.word	0xfffffbff
 8004648:	fffff7ff 	.word	0xfffff7ff

0800464c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	4a35      	ldr	r2, [pc, #212]	@ (8004730 <TIM_OC3_SetConfig+0xe4>)
 800465c:	401a      	ands	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2270      	movs	r2, #112	@ 0x70
 8004678:	4393      	bics	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2203      	movs	r2, #3
 8004680:	4393      	bics	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	4a28      	ldr	r2, [pc, #160]	@ (8004734 <TIM_OC3_SetConfig+0xe8>)
 8004692:	4013      	ands	r3, r2
 8004694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a24      	ldr	r2, [pc, #144]	@ (8004738 <TIM_OC3_SetConfig+0xec>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d10d      	bne.n	80046c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	4a23      	ldr	r2, [pc, #140]	@ (800473c <TIM_OC3_SetConfig+0xf0>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	021b      	lsls	r3, r3, #8
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004740 <TIM_OC3_SetConfig+0xf4>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004738 <TIM_OC3_SetConfig+0xec>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00b      	beq.n	80046e6 <TIM_OC3_SetConfig+0x9a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004744 <TIM_OC3_SetConfig+0xf8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d007      	beq.n	80046e6 <TIM_OC3_SetConfig+0x9a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004748 <TIM_OC3_SetConfig+0xfc>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d003      	beq.n	80046e6 <TIM_OC3_SetConfig+0x9a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a1a      	ldr	r2, [pc, #104]	@ (800474c <TIM_OC3_SetConfig+0x100>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d113      	bne.n	800470e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	4a19      	ldr	r2, [pc, #100]	@ (8004750 <TIM_OC3_SetConfig+0x104>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	4a18      	ldr	r2, [pc, #96]	@ (8004754 <TIM_OC3_SetConfig+0x108>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	4313      	orrs	r3, r2
 800470c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	621a      	str	r2, [r3, #32]
}
 8004728:	46c0      	nop			@ (mov r8, r8)
 800472a:	46bd      	mov	sp, r7
 800472c:	b006      	add	sp, #24
 800472e:	bd80      	pop	{r7, pc}
 8004730:	fffffeff 	.word	0xfffffeff
 8004734:	fffffdff 	.word	0xfffffdff
 8004738:	40012c00 	.word	0x40012c00
 800473c:	fffff7ff 	.word	0xfffff7ff
 8004740:	fffffbff 	.word	0xfffffbff
 8004744:	40014000 	.word	0x40014000
 8004748:	40014400 	.word	0x40014400
 800474c:	40014800 	.word	0x40014800
 8004750:	ffffefff 	.word	0xffffefff
 8004754:	ffffdfff 	.word	0xffffdfff

08004758 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	4a28      	ldr	r2, [pc, #160]	@ (8004808 <TIM_OC4_SetConfig+0xb0>)
 8004768:	401a      	ands	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4a22      	ldr	r2, [pc, #136]	@ (800480c <TIM_OC4_SetConfig+0xb4>)
 8004784:	4013      	ands	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4a21      	ldr	r2, [pc, #132]	@ (8004810 <TIM_OC4_SetConfig+0xb8>)
 800478c:	4013      	ands	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	021b      	lsls	r3, r3, #8
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	4a1d      	ldr	r2, [pc, #116]	@ (8004814 <TIM_OC4_SetConfig+0xbc>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	031b      	lsls	r3, r3, #12
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a19      	ldr	r2, [pc, #100]	@ (8004818 <TIM_OC4_SetConfig+0xc0>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d00b      	beq.n	80047d0 <TIM_OC4_SetConfig+0x78>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a18      	ldr	r2, [pc, #96]	@ (800481c <TIM_OC4_SetConfig+0xc4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d007      	beq.n	80047d0 <TIM_OC4_SetConfig+0x78>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a17      	ldr	r2, [pc, #92]	@ (8004820 <TIM_OC4_SetConfig+0xc8>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d003      	beq.n	80047d0 <TIM_OC4_SetConfig+0x78>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a16      	ldr	r2, [pc, #88]	@ (8004824 <TIM_OC4_SetConfig+0xcc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d109      	bne.n	80047e4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	4a15      	ldr	r2, [pc, #84]	@ (8004828 <TIM_OC4_SetConfig+0xd0>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	019b      	lsls	r3, r3, #6
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	621a      	str	r2, [r3, #32]
}
 80047fe:	46c0      	nop			@ (mov r8, r8)
 8004800:	46bd      	mov	sp, r7
 8004802:	b006      	add	sp, #24
 8004804:	bd80      	pop	{r7, pc}
 8004806:	46c0      	nop			@ (mov r8, r8)
 8004808:	ffffefff 	.word	0xffffefff
 800480c:	ffff8fff 	.word	0xffff8fff
 8004810:	fffffcff 	.word	0xfffffcff
 8004814:	ffffdfff 	.word	0xffffdfff
 8004818:	40012c00 	.word	0x40012c00
 800481c:	40014000 	.word	0x40014000
 8004820:	40014400 	.word	0x40014400
 8004824:	40014800 	.word	0x40014800
 8004828:	ffffbfff 	.word	0xffffbfff

0800482c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	2201      	movs	r2, #1
 8004844:	4393      	bics	r3, r2
 8004846:	001a      	movs	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	22f0      	movs	r2, #240	@ 0xf0
 8004856:	4393      	bics	r3, r2
 8004858:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	220a      	movs	r2, #10
 8004868:	4393      	bics	r3, r2
 800486a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	621a      	str	r2, [r3, #32]
}
 8004880:	46c0      	nop			@ (mov r8, r8)
 8004882:	46bd      	mov	sp, r7
 8004884:	b006      	add	sp, #24
 8004886:	bd80      	pop	{r7, pc}

08004888 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	2210      	movs	r2, #16
 800489a:	4393      	bics	r3, r2
 800489c:	001a      	movs	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	4a0d      	ldr	r2, [pc, #52]	@ (80048e8 <TIM_TI2_ConfigInputStage+0x60>)
 80048b2:	4013      	ands	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	031b      	lsls	r3, r3, #12
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	4313      	orrs	r3, r2
 80048be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	22a0      	movs	r2, #160	@ 0xa0
 80048c4:	4393      	bics	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	621a      	str	r2, [r3, #32]
}
 80048de:	46c0      	nop			@ (mov r8, r8)
 80048e0:	46bd      	mov	sp, r7
 80048e2:	b006      	add	sp, #24
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	46c0      	nop			@ (mov r8, r8)
 80048e8:	ffff0fff 	.word	0xffff0fff

080048ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2270      	movs	r2, #112	@ 0x70
 8004900:	4393      	bics	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4313      	orrs	r3, r2
 800490a:	2207      	movs	r2, #7
 800490c:	4313      	orrs	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	609a      	str	r2, [r3, #8]
}
 8004916:	46c0      	nop			@ (mov r8, r8)
 8004918:	46bd      	mov	sp, r7
 800491a:	b004      	add	sp, #16
 800491c:	bd80      	pop	{r7, pc}
	...

08004920 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	4a09      	ldr	r2, [pc, #36]	@ (800495c <TIM_ETR_SetConfig+0x3c>)
 8004938:	4013      	ands	r3, r2
 800493a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	021a      	lsls	r2, r3, #8
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	431a      	orrs	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4313      	orrs	r3, r2
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	609a      	str	r2, [r3, #8]
}
 8004954:	46c0      	nop			@ (mov r8, r8)
 8004956:	46bd      	mov	sp, r7
 8004958:	b006      	add	sp, #24
 800495a:	bd80      	pop	{r7, pc}
 800495c:	ffff00ff 	.word	0xffff00ff

08004960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	223c      	movs	r2, #60	@ 0x3c
 800496e:	5c9b      	ldrb	r3, [r3, r2]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d101      	bne.n	8004978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004974:	2302      	movs	r3, #2
 8004976:	e047      	b.n	8004a08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	223c      	movs	r2, #60	@ 0x3c
 800497c:	2101      	movs	r1, #1
 800497e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	223d      	movs	r2, #61	@ 0x3d
 8004984:	2102      	movs	r1, #2
 8004986:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2270      	movs	r2, #112	@ 0x70
 800499c:	4393      	bics	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a16      	ldr	r2, [pc, #88]	@ (8004a10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00f      	beq.n	80049dc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	2380      	movs	r3, #128	@ 0x80
 80049c2:	05db      	lsls	r3, r3, #23
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d009      	beq.n	80049dc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a11      	ldr	r2, [pc, #68]	@ (8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d004      	beq.n	80049dc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a10      	ldr	r2, [pc, #64]	@ (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d10c      	bne.n	80049f6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2280      	movs	r2, #128	@ 0x80
 80049e0:	4393      	bics	r3, r2
 80049e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	223d      	movs	r2, #61	@ 0x3d
 80049fa:	2101      	movs	r1, #1
 80049fc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	223c      	movs	r2, #60	@ 0x3c
 8004a02:	2100      	movs	r1, #0
 8004a04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	0018      	movs	r0, r3
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	b004      	add	sp, #16
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	40012c00 	.word	0x40012c00
 8004a14:	40000400 	.word	0x40000400
 8004a18:	40014000 	.word	0x40014000

08004a1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	223c      	movs	r2, #60	@ 0x3c
 8004a2e:	5c9b      	ldrb	r3, [r3, r2]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d101      	bne.n	8004a38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a34:	2302      	movs	r3, #2
 8004a36:	e03e      	b.n	8004ab6 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	223c      	movs	r2, #60	@ 0x3c
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	22ff      	movs	r2, #255	@ 0xff
 8004a44:	4393      	bics	r3, r2
 8004a46:	001a      	movs	r2, r3
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004a54:	401a      	ands	r2, r3
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4a18      	ldr	r2, [pc, #96]	@ (8004ac4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004a62:	401a      	ands	r2, r3
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4a16      	ldr	r2, [pc, #88]	@ (8004ac8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004a70:	401a      	ands	r2, r3
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	4a13      	ldr	r2, [pc, #76]	@ (8004acc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004a7e:	401a      	ands	r2, r3
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4a11      	ldr	r2, [pc, #68]	@ (8004ad0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004a8c:	401a      	ands	r2, r3
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	4a0e      	ldr	r2, [pc, #56]	@ (8004ad4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004a9a:	401a      	ands	r2, r3
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	223c      	movs	r2, #60	@ 0x3c
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	b004      	add	sp, #16
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	46c0      	nop			@ (mov r8, r8)
 8004ac0:	fffffcff 	.word	0xfffffcff
 8004ac4:	fffffbff 	.word	0xfffffbff
 8004ac8:	fffff7ff 	.word	0xfffff7ff
 8004acc:	ffffefff 	.word	0xffffefff
 8004ad0:	ffffdfff 	.word	0xffffdfff
 8004ad4:	ffffbfff 	.word	0xffffbfff

08004ad8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e044      	b.n	8004b74 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d107      	bne.n	8004b02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2278      	movs	r2, #120	@ 0x78
 8004af6:	2100      	movs	r1, #0
 8004af8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	0018      	movs	r0, r3
 8004afe:	f7fd fc8f 	bl	8002420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2224      	movs	r2, #36	@ 0x24
 8004b06:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2101      	movs	r1, #1
 8004b14:	438a      	bics	r2, r1
 8004b16:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f000 f830 	bl	8004b80 <UART_SetConfig>
 8004b20:	0003      	movs	r3, r0
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e024      	b.n	8004b74 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	0018      	movs	r0, r3
 8004b36:	f000 f9ab 	bl	8004e90 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	490d      	ldr	r1, [pc, #52]	@ (8004b7c <HAL_UART_Init+0xa4>)
 8004b46:	400a      	ands	r2, r1
 8004b48:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	212a      	movs	r1, #42	@ 0x2a
 8004b56:	438a      	bics	r2, r1
 8004b58:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2101      	movs	r1, #1
 8004b66:	430a      	orrs	r2, r1
 8004b68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f000 fa43 	bl	8004ff8 <UART_CheckIdleState>
 8004b72:	0003      	movs	r3, r0
}
 8004b74:	0018      	movs	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	b002      	add	sp, #8
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	ffffb7ff 	.word	0xffffb7ff

08004b80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b88:	231e      	movs	r3, #30
 8004b8a:	18fb      	adds	r3, r7, r3
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4aaf      	ldr	r2, [pc, #700]	@ (8004e6c <UART_SetConfig+0x2ec>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	0019      	movs	r1, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	4aaa      	ldr	r2, [pc, #680]	@ (8004e70 <UART_SetConfig+0x2f0>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	0019      	movs	r1, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	4aa1      	ldr	r2, [pc, #644]	@ (8004e74 <UART_SetConfig+0x2f4>)
 8004bee:	4013      	ands	r3, r2
 8004bf0:	0019      	movs	r1, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a9d      	ldr	r2, [pc, #628]	@ (8004e78 <UART_SetConfig+0x2f8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d127      	bne.n	8004c56 <UART_SetConfig+0xd6>
 8004c06:	4b9d      	ldr	r3, [pc, #628]	@ (8004e7c <UART_SetConfig+0x2fc>)
 8004c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0a:	2203      	movs	r2, #3
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d00d      	beq.n	8004c2e <UART_SetConfig+0xae>
 8004c12:	d81b      	bhi.n	8004c4c <UART_SetConfig+0xcc>
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d014      	beq.n	8004c42 <UART_SetConfig+0xc2>
 8004c18:	d818      	bhi.n	8004c4c <UART_SetConfig+0xcc>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <UART_SetConfig+0xa4>
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d00a      	beq.n	8004c38 <UART_SetConfig+0xb8>
 8004c22:	e013      	b.n	8004c4c <UART_SetConfig+0xcc>
 8004c24:	231f      	movs	r3, #31
 8004c26:	18fb      	adds	r3, r7, r3
 8004c28:	2200      	movs	r2, #0
 8004c2a:	701a      	strb	r2, [r3, #0]
 8004c2c:	e065      	b.n	8004cfa <UART_SetConfig+0x17a>
 8004c2e:	231f      	movs	r3, #31
 8004c30:	18fb      	adds	r3, r7, r3
 8004c32:	2202      	movs	r2, #2
 8004c34:	701a      	strb	r2, [r3, #0]
 8004c36:	e060      	b.n	8004cfa <UART_SetConfig+0x17a>
 8004c38:	231f      	movs	r3, #31
 8004c3a:	18fb      	adds	r3, r7, r3
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	701a      	strb	r2, [r3, #0]
 8004c40:	e05b      	b.n	8004cfa <UART_SetConfig+0x17a>
 8004c42:	231f      	movs	r3, #31
 8004c44:	18fb      	adds	r3, r7, r3
 8004c46:	2208      	movs	r2, #8
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	e056      	b.n	8004cfa <UART_SetConfig+0x17a>
 8004c4c:	231f      	movs	r3, #31
 8004c4e:	18fb      	adds	r3, r7, r3
 8004c50:	2210      	movs	r2, #16
 8004c52:	701a      	strb	r2, [r3, #0]
 8004c54:	e051      	b.n	8004cfa <UART_SetConfig+0x17a>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a89      	ldr	r2, [pc, #548]	@ (8004e80 <UART_SetConfig+0x300>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d134      	bne.n	8004cca <UART_SetConfig+0x14a>
 8004c60:	4b86      	ldr	r3, [pc, #536]	@ (8004e7c <UART_SetConfig+0x2fc>)
 8004c62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c64:	23c0      	movs	r3, #192	@ 0xc0
 8004c66:	029b      	lsls	r3, r3, #10
 8004c68:	4013      	ands	r3, r2
 8004c6a:	22c0      	movs	r2, #192	@ 0xc0
 8004c6c:	0292      	lsls	r2, r2, #10
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d017      	beq.n	8004ca2 <UART_SetConfig+0x122>
 8004c72:	22c0      	movs	r2, #192	@ 0xc0
 8004c74:	0292      	lsls	r2, r2, #10
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d822      	bhi.n	8004cc0 <UART_SetConfig+0x140>
 8004c7a:	2280      	movs	r2, #128	@ 0x80
 8004c7c:	0292      	lsls	r2, r2, #10
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d019      	beq.n	8004cb6 <UART_SetConfig+0x136>
 8004c82:	2280      	movs	r2, #128	@ 0x80
 8004c84:	0292      	lsls	r2, r2, #10
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d81a      	bhi.n	8004cc0 <UART_SetConfig+0x140>
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d004      	beq.n	8004c98 <UART_SetConfig+0x118>
 8004c8e:	2280      	movs	r2, #128	@ 0x80
 8004c90:	0252      	lsls	r2, r2, #9
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00a      	beq.n	8004cac <UART_SetConfig+0x12c>
 8004c96:	e013      	b.n	8004cc0 <UART_SetConfig+0x140>
 8004c98:	231f      	movs	r3, #31
 8004c9a:	18fb      	adds	r3, r7, r3
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	701a      	strb	r2, [r3, #0]
 8004ca0:	e02b      	b.n	8004cfa <UART_SetConfig+0x17a>
 8004ca2:	231f      	movs	r3, #31
 8004ca4:	18fb      	adds	r3, r7, r3
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	e026      	b.n	8004cfa <UART_SetConfig+0x17a>
 8004cac:	231f      	movs	r3, #31
 8004cae:	18fb      	adds	r3, r7, r3
 8004cb0:	2204      	movs	r2, #4
 8004cb2:	701a      	strb	r2, [r3, #0]
 8004cb4:	e021      	b.n	8004cfa <UART_SetConfig+0x17a>
 8004cb6:	231f      	movs	r3, #31
 8004cb8:	18fb      	adds	r3, r7, r3
 8004cba:	2208      	movs	r2, #8
 8004cbc:	701a      	strb	r2, [r3, #0]
 8004cbe:	e01c      	b.n	8004cfa <UART_SetConfig+0x17a>
 8004cc0:	231f      	movs	r3, #31
 8004cc2:	18fb      	adds	r3, r7, r3
 8004cc4:	2210      	movs	r2, #16
 8004cc6:	701a      	strb	r2, [r3, #0]
 8004cc8:	e017      	b.n	8004cfa <UART_SetConfig+0x17a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a6d      	ldr	r2, [pc, #436]	@ (8004e84 <UART_SetConfig+0x304>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d104      	bne.n	8004cde <UART_SetConfig+0x15e>
 8004cd4:	231f      	movs	r3, #31
 8004cd6:	18fb      	adds	r3, r7, r3
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]
 8004cdc:	e00d      	b.n	8004cfa <UART_SetConfig+0x17a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a69      	ldr	r2, [pc, #420]	@ (8004e88 <UART_SetConfig+0x308>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d104      	bne.n	8004cf2 <UART_SetConfig+0x172>
 8004ce8:	231f      	movs	r3, #31
 8004cea:	18fb      	adds	r3, r7, r3
 8004cec:	2200      	movs	r2, #0
 8004cee:	701a      	strb	r2, [r3, #0]
 8004cf0:	e003      	b.n	8004cfa <UART_SetConfig+0x17a>
 8004cf2:	231f      	movs	r3, #31
 8004cf4:	18fb      	adds	r3, r7, r3
 8004cf6:	2210      	movs	r2, #16
 8004cf8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69da      	ldr	r2, [r3, #28]
 8004cfe:	2380      	movs	r3, #128	@ 0x80
 8004d00:	021b      	lsls	r3, r3, #8
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d15c      	bne.n	8004dc0 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8004d06:	231f      	movs	r3, #31
 8004d08:	18fb      	adds	r3, r7, r3
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d015      	beq.n	8004d3c <UART_SetConfig+0x1bc>
 8004d10:	dc18      	bgt.n	8004d44 <UART_SetConfig+0x1c4>
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d00d      	beq.n	8004d32 <UART_SetConfig+0x1b2>
 8004d16:	dc15      	bgt.n	8004d44 <UART_SetConfig+0x1c4>
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <UART_SetConfig+0x1a2>
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d005      	beq.n	8004d2c <UART_SetConfig+0x1ac>
 8004d20:	e010      	b.n	8004d44 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d22:	f7fe fba1 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 8004d26:	0003      	movs	r3, r0
 8004d28:	61bb      	str	r3, [r7, #24]
        break;
 8004d2a:	e012      	b.n	8004d52 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d2c:	4b57      	ldr	r3, [pc, #348]	@ (8004e8c <UART_SetConfig+0x30c>)
 8004d2e:	61bb      	str	r3, [r7, #24]
        break;
 8004d30:	e00f      	b.n	8004d52 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d32:	f7fe fb1d 	bl	8003370 <HAL_RCC_GetSysClockFreq>
 8004d36:	0003      	movs	r3, r0
 8004d38:	61bb      	str	r3, [r7, #24]
        break;
 8004d3a:	e00a      	b.n	8004d52 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d3c:	2380      	movs	r3, #128	@ 0x80
 8004d3e:	021b      	lsls	r3, r3, #8
 8004d40:	61bb      	str	r3, [r7, #24]
        break;
 8004d42:	e006      	b.n	8004d52 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d48:	231e      	movs	r3, #30
 8004d4a:	18fb      	adds	r3, r7, r3
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	701a      	strb	r2, [r3, #0]
        break;
 8004d50:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d100      	bne.n	8004d5a <UART_SetConfig+0x1da>
 8004d58:	e07a      	b.n	8004e50 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	005a      	lsls	r2, r3, #1
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	085b      	lsrs	r3, r3, #1
 8004d64:	18d2      	adds	r2, r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	0019      	movs	r1, r3
 8004d6c:	0010      	movs	r0, r2
 8004d6e:	f7fb f9cb 	bl	8000108 <__udivsi3>
 8004d72:	0003      	movs	r3, r0
 8004d74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	2b0f      	cmp	r3, #15
 8004d7a:	d91c      	bls.n	8004db6 <UART_SetConfig+0x236>
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	2380      	movs	r3, #128	@ 0x80
 8004d80:	025b      	lsls	r3, r3, #9
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d217      	bcs.n	8004db6 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	200e      	movs	r0, #14
 8004d8c:	183b      	adds	r3, r7, r0
 8004d8e:	210f      	movs	r1, #15
 8004d90:	438a      	bics	r2, r1
 8004d92:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	085b      	lsrs	r3, r3, #1
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2207      	movs	r2, #7
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	b299      	uxth	r1, r3
 8004da0:	183b      	adds	r3, r7, r0
 8004da2:	183a      	adds	r2, r7, r0
 8004da4:	8812      	ldrh	r2, [r2, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	183a      	adds	r2, r7, r0
 8004db0:	8812      	ldrh	r2, [r2, #0]
 8004db2:	60da      	str	r2, [r3, #12]
 8004db4:	e04c      	b.n	8004e50 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8004db6:	231e      	movs	r3, #30
 8004db8:	18fb      	adds	r3, r7, r3
 8004dba:	2201      	movs	r2, #1
 8004dbc:	701a      	strb	r2, [r3, #0]
 8004dbe:	e047      	b.n	8004e50 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dc0:	231f      	movs	r3, #31
 8004dc2:	18fb      	adds	r3, r7, r3
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d015      	beq.n	8004df6 <UART_SetConfig+0x276>
 8004dca:	dc18      	bgt.n	8004dfe <UART_SetConfig+0x27e>
 8004dcc:	2b04      	cmp	r3, #4
 8004dce:	d00d      	beq.n	8004dec <UART_SetConfig+0x26c>
 8004dd0:	dc15      	bgt.n	8004dfe <UART_SetConfig+0x27e>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <UART_SetConfig+0x25c>
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d005      	beq.n	8004de6 <UART_SetConfig+0x266>
 8004dda:	e010      	b.n	8004dfe <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ddc:	f7fe fb44 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 8004de0:	0003      	movs	r3, r0
 8004de2:	61bb      	str	r3, [r7, #24]
        break;
 8004de4:	e012      	b.n	8004e0c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004de6:	4b29      	ldr	r3, [pc, #164]	@ (8004e8c <UART_SetConfig+0x30c>)
 8004de8:	61bb      	str	r3, [r7, #24]
        break;
 8004dea:	e00f      	b.n	8004e0c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dec:	f7fe fac0 	bl	8003370 <HAL_RCC_GetSysClockFreq>
 8004df0:	0003      	movs	r3, r0
 8004df2:	61bb      	str	r3, [r7, #24]
        break;
 8004df4:	e00a      	b.n	8004e0c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004df6:	2380      	movs	r3, #128	@ 0x80
 8004df8:	021b      	lsls	r3, r3, #8
 8004dfa:	61bb      	str	r3, [r7, #24]
        break;
 8004dfc:	e006      	b.n	8004e0c <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e02:	231e      	movs	r3, #30
 8004e04:	18fb      	adds	r3, r7, r3
 8004e06:	2201      	movs	r2, #1
 8004e08:	701a      	strb	r2, [r3, #0]
        break;
 8004e0a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d01e      	beq.n	8004e50 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	085a      	lsrs	r2, r3, #1
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	18d2      	adds	r2, r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	0019      	movs	r1, r3
 8004e22:	0010      	movs	r0, r2
 8004e24:	f7fb f970 	bl	8000108 <__udivsi3>
 8004e28:	0003      	movs	r3, r0
 8004e2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	2b0f      	cmp	r3, #15
 8004e30:	d90a      	bls.n	8004e48 <UART_SetConfig+0x2c8>
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	2380      	movs	r3, #128	@ 0x80
 8004e36:	025b      	lsls	r3, r3, #9
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d205      	bcs.n	8004e48 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	60da      	str	r2, [r3, #12]
 8004e46:	e003      	b.n	8004e50 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8004e48:	231e      	movs	r3, #30
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e5c:	231e      	movs	r3, #30
 8004e5e:	18fb      	adds	r3, r7, r3
 8004e60:	781b      	ldrb	r3, [r3, #0]
}
 8004e62:	0018      	movs	r0, r3
 8004e64:	46bd      	mov	sp, r7
 8004e66:	b008      	add	sp, #32
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	46c0      	nop			@ (mov r8, r8)
 8004e6c:	efff69f3 	.word	0xefff69f3
 8004e70:	ffffcfff 	.word	0xffffcfff
 8004e74:	fffff4ff 	.word	0xfffff4ff
 8004e78:	40013800 	.word	0x40013800
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	40004400 	.word	0x40004400
 8004e84:	40004800 	.word	0x40004800
 8004e88:	40004c00 	.word	0x40004c00
 8004e8c:	007a1200 	.word	0x007a1200

08004e90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	d00b      	beq.n	8004eba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	4a4a      	ldr	r2, [pc, #296]	@ (8004fd4 <UART_AdvFeatureConfig+0x144>)
 8004eaa:	4013      	ands	r3, r2
 8004eac:	0019      	movs	r1, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	d00b      	beq.n	8004edc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	4a43      	ldr	r2, [pc, #268]	@ (8004fd8 <UART_AdvFeatureConfig+0x148>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	0019      	movs	r1, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee0:	2204      	movs	r2, #4
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	d00b      	beq.n	8004efe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	4a3b      	ldr	r2, [pc, #236]	@ (8004fdc <UART_AdvFeatureConfig+0x14c>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	0019      	movs	r1, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f02:	2208      	movs	r2, #8
 8004f04:	4013      	ands	r3, r2
 8004f06:	d00b      	beq.n	8004f20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	4a34      	ldr	r2, [pc, #208]	@ (8004fe0 <UART_AdvFeatureConfig+0x150>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	0019      	movs	r1, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f24:	2210      	movs	r2, #16
 8004f26:	4013      	ands	r3, r2
 8004f28:	d00b      	beq.n	8004f42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	4a2c      	ldr	r2, [pc, #176]	@ (8004fe4 <UART_AdvFeatureConfig+0x154>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	0019      	movs	r1, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f46:	2220      	movs	r2, #32
 8004f48:	4013      	ands	r3, r2
 8004f4a:	d00b      	beq.n	8004f64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	4a25      	ldr	r2, [pc, #148]	@ (8004fe8 <UART_AdvFeatureConfig+0x158>)
 8004f54:	4013      	ands	r3, r2
 8004f56:	0019      	movs	r1, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f68:	2240      	movs	r2, #64	@ 0x40
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	d01d      	beq.n	8004faa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	4a1d      	ldr	r2, [pc, #116]	@ (8004fec <UART_AdvFeatureConfig+0x15c>)
 8004f76:	4013      	ands	r3, r2
 8004f78:	0019      	movs	r1, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f8a:	2380      	movs	r3, #128	@ 0x80
 8004f8c:	035b      	lsls	r3, r3, #13
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d10b      	bne.n	8004faa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	4a15      	ldr	r2, [pc, #84]	@ (8004ff0 <UART_AdvFeatureConfig+0x160>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	0019      	movs	r1, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fae:	2280      	movs	r2, #128	@ 0x80
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d00b      	beq.n	8004fcc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	4a0e      	ldr	r2, [pc, #56]	@ (8004ff4 <UART_AdvFeatureConfig+0x164>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	0019      	movs	r1, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	605a      	str	r2, [r3, #4]
  }
}
 8004fcc:	46c0      	nop			@ (mov r8, r8)
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	b002      	add	sp, #8
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	fffdffff 	.word	0xfffdffff
 8004fd8:	fffeffff 	.word	0xfffeffff
 8004fdc:	fffbffff 	.word	0xfffbffff
 8004fe0:	ffff7fff 	.word	0xffff7fff
 8004fe4:	ffffefff 	.word	0xffffefff
 8004fe8:	ffffdfff 	.word	0xffffdfff
 8004fec:	ffefffff 	.word	0xffefffff
 8004ff0:	ff9fffff 	.word	0xff9fffff
 8004ff4:	fff7ffff 	.word	0xfff7ffff

08004ff8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b092      	sub	sp, #72	@ 0x48
 8004ffc:	af02      	add	r7, sp, #8
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2284      	movs	r2, #132	@ 0x84
 8005004:	2100      	movs	r1, #0
 8005006:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005008:	f7fd fada 	bl	80025c0 <HAL_GetTick>
 800500c:	0003      	movs	r3, r0
 800500e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2208      	movs	r2, #8
 8005018:	4013      	ands	r3, r2
 800501a:	2b08      	cmp	r3, #8
 800501c:	d12c      	bne.n	8005078 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800501e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005020:	2280      	movs	r2, #128	@ 0x80
 8005022:	0391      	lsls	r1, r2, #14
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	4a46      	ldr	r2, [pc, #280]	@ (8005140 <UART_CheckIdleState+0x148>)
 8005028:	9200      	str	r2, [sp, #0]
 800502a:	2200      	movs	r2, #0
 800502c:	f000 f88c 	bl	8005148 <UART_WaitOnFlagUntilTimeout>
 8005030:	1e03      	subs	r3, r0, #0
 8005032:	d021      	beq.n	8005078 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005034:	f3ef 8310 	mrs	r3, PRIMASK
 8005038:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800503a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800503c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800503e:	2301      	movs	r3, #1
 8005040:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005044:	f383 8810 	msr	PRIMASK, r3
}
 8005048:	46c0      	nop			@ (mov r8, r8)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2180      	movs	r1, #128	@ 0x80
 8005056:	438a      	bics	r2, r1
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800505e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005060:	f383 8810 	msr	PRIMASK, r3
}
 8005064:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2220      	movs	r2, #32
 800506a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2278      	movs	r2, #120	@ 0x78
 8005070:	2100      	movs	r1, #0
 8005072:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e05f      	b.n	8005138 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2204      	movs	r2, #4
 8005080:	4013      	ands	r3, r2
 8005082:	2b04      	cmp	r3, #4
 8005084:	d146      	bne.n	8005114 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005088:	2280      	movs	r2, #128	@ 0x80
 800508a:	03d1      	lsls	r1, r2, #15
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	4a2c      	ldr	r2, [pc, #176]	@ (8005140 <UART_CheckIdleState+0x148>)
 8005090:	9200      	str	r2, [sp, #0]
 8005092:	2200      	movs	r2, #0
 8005094:	f000 f858 	bl	8005148 <UART_WaitOnFlagUntilTimeout>
 8005098:	1e03      	subs	r3, r0, #0
 800509a:	d03b      	beq.n	8005114 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800509c:	f3ef 8310 	mrs	r3, PRIMASK
 80050a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80050a2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80050a6:	2301      	movs	r3, #1
 80050a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f383 8810 	msr	PRIMASK, r3
}
 80050b0:	46c0      	nop			@ (mov r8, r8)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4921      	ldr	r1, [pc, #132]	@ (8005144 <UART_CheckIdleState+0x14c>)
 80050be:	400a      	ands	r2, r1
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f383 8810 	msr	PRIMASK, r3
}
 80050cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ce:	f3ef 8310 	mrs	r3, PRIMASK
 80050d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80050d4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80050d8:	2301      	movs	r3, #1
 80050da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	f383 8810 	msr	PRIMASK, r3
}
 80050e2:	46c0      	nop			@ (mov r8, r8)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2101      	movs	r1, #1
 80050f0:	438a      	bics	r2, r1
 80050f2:	609a      	str	r2, [r3, #8]
 80050f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	f383 8810 	msr	PRIMASK, r3
}
 80050fe:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2280      	movs	r2, #128	@ 0x80
 8005104:	2120      	movs	r1, #32
 8005106:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2278      	movs	r2, #120	@ 0x78
 800510c:	2100      	movs	r1, #0
 800510e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e011      	b.n	8005138 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2220      	movs	r2, #32
 8005118:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2280      	movs	r2, #128	@ 0x80
 800511e:	2120      	movs	r1, #32
 8005120:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2278      	movs	r2, #120	@ 0x78
 8005132:	2100      	movs	r1, #0
 8005134:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	0018      	movs	r0, r3
 800513a:	46bd      	mov	sp, r7
 800513c:	b010      	add	sp, #64	@ 0x40
 800513e:	bd80      	pop	{r7, pc}
 8005140:	01ffffff 	.word	0x01ffffff
 8005144:	fffffedf 	.word	0xfffffedf

08005148 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	603b      	str	r3, [r7, #0]
 8005154:	1dfb      	adds	r3, r7, #7
 8005156:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005158:	e04b      	b.n	80051f2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	3301      	adds	r3, #1
 800515e:	d048      	beq.n	80051f2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005160:	f7fd fa2e 	bl	80025c0 <HAL_GetTick>
 8005164:	0002      	movs	r2, r0
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	429a      	cmp	r2, r3
 800516e:	d302      	bcc.n	8005176 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e04b      	b.n	8005212 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2204      	movs	r2, #4
 8005182:	4013      	ands	r3, r2
 8005184:	d035      	beq.n	80051f2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	2208      	movs	r2, #8
 800518e:	4013      	ands	r3, r2
 8005190:	2b08      	cmp	r3, #8
 8005192:	d111      	bne.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2208      	movs	r2, #8
 800519a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	0018      	movs	r0, r3
 80051a0:	f000 f83c 	bl	800521c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2284      	movs	r2, #132	@ 0x84
 80051a8:	2108      	movs	r1, #8
 80051aa:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2278      	movs	r2, #120	@ 0x78
 80051b0:	2100      	movs	r1, #0
 80051b2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e02c      	b.n	8005212 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	69da      	ldr	r2, [r3, #28]
 80051be:	2380      	movs	r3, #128	@ 0x80
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	401a      	ands	r2, r3
 80051c4:	2380      	movs	r3, #128	@ 0x80
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d112      	bne.n	80051f2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2280      	movs	r2, #128	@ 0x80
 80051d2:	0112      	lsls	r2, r2, #4
 80051d4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	0018      	movs	r0, r3
 80051da:	f000 f81f 	bl	800521c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2284      	movs	r2, #132	@ 0x84
 80051e2:	2120      	movs	r1, #32
 80051e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2278      	movs	r2, #120	@ 0x78
 80051ea:	2100      	movs	r1, #0
 80051ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e00f      	b.n	8005212 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	4013      	ands	r3, r2
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	425a      	negs	r2, r3
 8005202:	4153      	adcs	r3, r2
 8005204:	b2db      	uxtb	r3, r3
 8005206:	001a      	movs	r2, r3
 8005208:	1dfb      	adds	r3, r7, #7
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	429a      	cmp	r2, r3
 800520e:	d0a4      	beq.n	800515a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	0018      	movs	r0, r3
 8005214:	46bd      	mov	sp, r7
 8005216:	b004      	add	sp, #16
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08e      	sub	sp, #56	@ 0x38
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005224:	f3ef 8310 	mrs	r3, PRIMASK
 8005228:	617b      	str	r3, [r7, #20]
  return(result);
 800522a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800522c:	637b      	str	r3, [r7, #52]	@ 0x34
 800522e:	2301      	movs	r3, #1
 8005230:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	f383 8810 	msr	PRIMASK, r3
}
 8005238:	46c0      	nop			@ (mov r8, r8)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4926      	ldr	r1, [pc, #152]	@ (80052e0 <UART_EndRxTransfer+0xc4>)
 8005246:	400a      	ands	r2, r1
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800524c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	f383 8810 	msr	PRIMASK, r3
}
 8005254:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005256:	f3ef 8310 	mrs	r3, PRIMASK
 800525a:	623b      	str	r3, [r7, #32]
  return(result);
 800525c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800525e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005260:	2301      	movs	r3, #1
 8005262:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005266:	f383 8810 	msr	PRIMASK, r3
}
 800526a:	46c0      	nop			@ (mov r8, r8)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689a      	ldr	r2, [r3, #8]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2101      	movs	r1, #1
 8005278:	438a      	bics	r2, r1
 800527a:	609a      	str	r2, [r3, #8]
 800527c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005282:	f383 8810 	msr	PRIMASK, r3
}
 8005286:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800528c:	2b01      	cmp	r3, #1
 800528e:	d118      	bne.n	80052c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005290:	f3ef 8310 	mrs	r3, PRIMASK
 8005294:	60bb      	str	r3, [r7, #8]
  return(result);
 8005296:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005298:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800529a:	2301      	movs	r3, #1
 800529c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f383 8810 	msr	PRIMASK, r3
}
 80052a4:	46c0      	nop			@ (mov r8, r8)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2110      	movs	r1, #16
 80052b2:	438a      	bics	r2, r1
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f383 8810 	msr	PRIMASK, r3
}
 80052c0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2280      	movs	r2, #128	@ 0x80
 80052c6:	2120      	movs	r1, #32
 80052c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80052d6:	46c0      	nop			@ (mov r8, r8)
 80052d8:	46bd      	mov	sp, r7
 80052da:	b00e      	add	sp, #56	@ 0x38
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	46c0      	nop			@ (mov r8, r8)
 80052e0:	fffffedf 	.word	0xfffffedf

080052e4 <memset>:
 80052e4:	0003      	movs	r3, r0
 80052e6:	1882      	adds	r2, r0, r2
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d100      	bne.n	80052ee <memset+0xa>
 80052ec:	4770      	bx	lr
 80052ee:	7019      	strb	r1, [r3, #0]
 80052f0:	3301      	adds	r3, #1
 80052f2:	e7f9      	b.n	80052e8 <memset+0x4>

080052f4 <__libc_init_array>:
 80052f4:	b570      	push	{r4, r5, r6, lr}
 80052f6:	2600      	movs	r6, #0
 80052f8:	4c0c      	ldr	r4, [pc, #48]	@ (800532c <__libc_init_array+0x38>)
 80052fa:	4d0d      	ldr	r5, [pc, #52]	@ (8005330 <__libc_init_array+0x3c>)
 80052fc:	1b64      	subs	r4, r4, r5
 80052fe:	10a4      	asrs	r4, r4, #2
 8005300:	42a6      	cmp	r6, r4
 8005302:	d109      	bne.n	8005318 <__libc_init_array+0x24>
 8005304:	2600      	movs	r6, #0
 8005306:	f000 f819 	bl	800533c <_init>
 800530a:	4c0a      	ldr	r4, [pc, #40]	@ (8005334 <__libc_init_array+0x40>)
 800530c:	4d0a      	ldr	r5, [pc, #40]	@ (8005338 <__libc_init_array+0x44>)
 800530e:	1b64      	subs	r4, r4, r5
 8005310:	10a4      	asrs	r4, r4, #2
 8005312:	42a6      	cmp	r6, r4
 8005314:	d105      	bne.n	8005322 <__libc_init_array+0x2e>
 8005316:	bd70      	pop	{r4, r5, r6, pc}
 8005318:	00b3      	lsls	r3, r6, #2
 800531a:	58eb      	ldr	r3, [r5, r3]
 800531c:	4798      	blx	r3
 800531e:	3601      	adds	r6, #1
 8005320:	e7ee      	b.n	8005300 <__libc_init_array+0xc>
 8005322:	00b3      	lsls	r3, r6, #2
 8005324:	58eb      	ldr	r3, [r5, r3]
 8005326:	4798      	blx	r3
 8005328:	3601      	adds	r6, #1
 800532a:	e7f2      	b.n	8005312 <__libc_init_array+0x1e>
 800532c:	0800540c 	.word	0x0800540c
 8005330:	0800540c 	.word	0x0800540c
 8005334:	08005410 	.word	0x08005410
 8005338:	0800540c 	.word	0x0800540c

0800533c <_init>:
 800533c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533e:	46c0      	nop			@ (mov r8, r8)
 8005340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005342:	bc08      	pop	{r3}
 8005344:	469e      	mov	lr, r3
 8005346:	4770      	bx	lr

08005348 <_fini>:
 8005348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534a:	46c0      	nop			@ (mov r8, r8)
 800534c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800534e:	bc08      	pop	{r3}
 8005350:	469e      	mov	lr, r3
 8005352:	4770      	bx	lr
